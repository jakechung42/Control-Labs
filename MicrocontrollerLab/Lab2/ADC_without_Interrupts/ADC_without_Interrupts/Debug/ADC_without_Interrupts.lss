
ADC_without_Interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000201  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000038  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	25 c0       	rjmp	.+74     	; 0x8e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:

int main (void)
{
	unsigned int adc_data;

	DDRD   = 0b11100000; //Set bits 6, 7 and 8 as outputs
  46:	80 ee       	ldi	r24, 0xE0	; 224
  48:	8a b9       	out	0x0a, r24	; 10
	ADMUX  = 0b00000000; //Input on AD Channel 0
  4a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
  4e:	87 e8       	ldi	r24, 0x87	; 135
  50:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>


	while(1)
	{
		ADCSRA = ADCSRA | 0b01000000;  // Start AD conversion, this or gate only flips ADSC
  54:	ea e7       	ldi	r30, 0x7A	; 122
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	80 64       	ori	r24, 0x40	; 64
  5c:	80 83       	st	Z, r24

		while ((ADCSRA & 0b01000000) == 0b01000000); // Wait while AD conversion is executed
  5e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
  62:	86 fd       	sbrc	r24, 6
  64:	fc cf       	rjmp	.-8      	; 0x5e <main+0x18>

		adc_data = ADCW;
  66:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
  6a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>

		if(adc_data > (3*1023)/5)
  6e:	86 36       	cpi	r24, 0x66	; 102
  70:	22 e0       	ldi	r18, 0x02	; 2
  72:	92 07       	cpc	r25, r18
  74:	18 f0       	brcs	.+6      	; 0x7c <main+0x36>
		{
			LEDs = red;
  76:	8f ed       	ldi	r24, 0xDF	; 223
  78:	8b b9       	out	0x0b, r24	; 11
  7a:	ec cf       	rjmp	.-40     	; 0x54 <main+0xe>
		}
		else if (adc_data < (2*1023)/5)
  7c:	89 39       	cpi	r24, 0x99	; 153
  7e:	91 40       	sbci	r25, 0x01	; 1
  80:	18 f4       	brcc	.+6      	; 0x88 <main+0x42>
		{
			LEDs = yellow;
  82:	8f eb       	ldi	r24, 0xBF	; 191
  84:	8b b9       	out	0x0b, r24	; 11
  86:	e6 cf       	rjmp	.-52     	; 0x54 <main+0xe>
		}
		else
		{
			LEDs = green;
  88:	8f e7       	ldi	r24, 0x7F	; 127
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	e3 cf       	rjmp	.-58     	; 0x54 <main+0xe>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
