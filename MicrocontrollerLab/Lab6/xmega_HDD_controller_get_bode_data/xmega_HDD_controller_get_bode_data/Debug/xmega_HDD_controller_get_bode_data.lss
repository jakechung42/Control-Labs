
xmega_HDD_controller_get_bode_data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00001530  000015c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00802024  00802024  000015e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d99  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e25  00000000  00000000  00007495  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f4  00000000  00000000  0000b2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  0000bab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000491f  00000000  00000000  0000bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cb  00000000  00000000  0001051b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000107e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	e0 e3       	ldi	r30, 0x30	; 48
     220:	f5 e1       	ldi	r31, 0x15	; 21
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	a4 32       	cpi	r26, 0x24	; 36
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	a4 e2       	ldi	r26, 0x24	; 36
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a4 35       	cpi	r26, 0x54	; 84
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 b9 03 	call	0x772	; 0x772 <main>
     248:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
     266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	af 93       	push	r26
     2a0:	bf 93       	push	r27
     2a2:	ef 93       	push	r30
     2a4:	ff 93       	push	r31
	
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
     2a6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     2aa:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     2ae:	80 93 38 20 	sts	0x2038, r24	; 0x802038 <adcIn>
     2b2:	90 93 39 20 	sts	0x2039, r25	; 0x802039 <adcIn+0x1>
	setPoint = (adcIn/4095.);		//convert to voltage
     2b6:	60 91 38 20 	lds	r22, 0x2038	; 0x802038 <adcIn>
     2ba:	70 91 39 20 	lds	r23, 0x2039	; 0x802039 <adcIn+0x1>
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 1b 05 	call	0xa36	; 0xa36 <__floatunsisf>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 ef       	ldi	r19, 0xF0	; 240
     2ca:	4f e7       	ldi	r20, 0x7F	; 127
     2cc:	55 e4       	ldi	r21, 0x45	; 69
     2ce:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divsf3>
     2d2:	60 93 34 20 	sts	0x2034, r22	; 0x802034 <setPoint>
     2d6:	70 93 35 20 	sts	0x2035, r23	; 0x802035 <setPoint+0x1>
     2da:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <setPoint+0x2>
     2de:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <setPoint+0x3>
	// setPoint = (adcIn/4095.)-0.030;		//convert to voltage
	// setPoint = 2;                   //Set the setpoint to midrange for initial testing of the controller
	
	encCount = TCC0.CNT;			//read encoder
     2e2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
     2e6:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
     2ea:	80 93 46 20 	sts	0x2046, r24	; 0x802046 <encCount>
     2ee:	90 93 47 20 	sts	0x2047, r25	; 0x802047 <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
     2f2:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <encCount>
     2f6:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <encCount+0x1>
     2fa:	99 23       	and	r25, r25
     2fc:	24 f4       	brge	.+8      	; 0x306 <__vector_20+0x94>
     2fe:	10 92 46 20 	sts	0x2046, r1	; 0x802046 <encCount>
     302:	10 92 47 20 	sts	0x2047, r1	; 0x802047 <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
     306:	60 91 46 20 	lds	r22, 0x2046	; 0x802046 <encCount>
     30a:	70 91 47 20 	lds	r23, 0x2047	; 0x802047 <encCount+0x1>
     30e:	07 2e       	mov	r0, r23
     310:	00 0c       	add	r0, r0
     312:	88 0b       	sbc	r24, r24
     314:	99 0b       	sbc	r25, r25
     316:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__floatsisf>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	4f e2       	ldi	r20, 0x2F	; 47
     320:	54 e4       	ldi	r21, 0x44	; 68
     322:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divsf3>
     326:	60 93 42 20 	sts	0x2042, r22	; 0x802042 <position>
     32a:	70 93 43 20 	sts	0x2043, r23	; 0x802043 <position+0x1>
     32e:	80 93 44 20 	sts	0x2044, r24	; 0x802044 <position+0x2>
     332:	90 93 45 20 	sts	0x2045, r25	; 0x802045 <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
     336:	60 91 42 20 	lds	r22, 0x2042	; 0x802042 <position>
     33a:	70 91 43 20 	lds	r23, 0x2043	; 0x802043 <position+0x1>
     33e:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <position+0x2>
     342:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <position+0x3>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 ef       	ldi	r19, 0xF0	; 240
     34a:	4f e7       	ldi	r20, 0x7F	; 127
     34c:	55 e4       	ldi	r21, 0x45	; 69
     34e:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
     352:	60 93 3e 20 	sts	0x203E, r22	; 0x80203e <positionDAC>
     356:	70 93 3f 20 	sts	0x203F, r23	; 0x80203f <positionDAC+0x1>
     35a:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <positionDAC+0x2>
     35e:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <positionDAC+0x3>
	// printf("positionDAC = %d, position = %d, encCount = %d\n", (int)(positionDAC), (int)(position*100), (int)encCount);
	if(positionDAC < 0) positionDAC = 0;	//rollover check
     362:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <positionDAC>
     366:	70 91 3f 20 	lds	r23, 0x203F	; 0x80203f <positionDAC+0x1>
     36a:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <positionDAC+0x2>
     36e:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <positionDAC+0x3>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	a9 01       	movw	r20, r18
     378:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__cmpsf2>
     37c:	88 23       	and	r24, r24
     37e:	44 f4       	brge	.+16     	; 0x390 <__vector_20+0x11e>
     380:	10 92 3e 20 	sts	0x203E, r1	; 0x80203e <positionDAC>
     384:	10 92 3f 20 	sts	0x203F, r1	; 0x80203f <positionDAC+0x1>
     388:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <positionDAC+0x2>
     38c:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <positionDAC+0x3>
	// positionDAC = 2048;
	// position = 0.0;

	error = setPoint - position;			//compute error
     390:	60 91 34 20 	lds	r22, 0x2034	; 0x802034 <setPoint>
     394:	70 91 35 20 	lds	r23, 0x2035	; 0x802035 <setPoint+0x1>
     398:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <setPoint+0x2>
     39c:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <setPoint+0x3>
     3a0:	20 91 42 20 	lds	r18, 0x2042	; 0x802042 <position>
     3a4:	30 91 43 20 	lds	r19, 0x2043	; 0x802043 <position+0x1>
     3a8:	40 91 44 20 	lds	r20, 0x2044	; 0x802044 <position+0x2>
     3ac:	50 91 45 20 	lds	r21, 0x2045	; 0x802045 <position+0x3>
     3b0:	0e 94 01 04 	call	0x802	; 0x802 <__subsf3>
     3b4:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <error>
     3b8:	70 93 3b 20 	sts	0x203B, r23	; 0x80203b <error+0x1>
     3bc:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <error+0x2>
     3c0:	90 93 3d 20 	sts	0x203D, r25	; 0x80203d <error+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = 0.3;  // Initial value
     3c4:	8a e9       	ldi	r24, 0x9A	; 154
     3c6:	99 e9       	ldi	r25, 0x99	; 153
     3c8:	a9 e9       	ldi	r26, 0x99	; 153
     3ca:	be e3       	ldi	r27, 0x3E	; 62
     3cc:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <ctrlCorrection>
     3d0:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <ctrlCorrection+0x1>
     3d4:	a0 93 2a 20 	sts	0x202A, r26	; 0x80202a <ctrlCorrection+0x2>
     3d8:	b0 93 2b 20 	sts	0x202B, r27	; 0x80202b <ctrlCorrection+0x3>
	//ctrlCorrection = 0.495;  // Control Correction to Correct the Single ended to Bipolar circuit zero offset
	// For my circuit the output of the Single ended to Bipolar circuit equaled -0.495 volts
	// when the control input (ctrlOut = 0.0) equalled 0.
	
	
	ctrlOut = Kp * error;
     3dc:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Kp>
     3e0:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Kp+0x1>
     3e4:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <Kp+0x2>
     3e8:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <Kp+0x3>
     3ec:	20 91 3a 20 	lds	r18, 0x203A	; 0x80203a <error>
     3f0:	30 91 3b 20 	lds	r19, 0x203B	; 0x80203b <error+0x1>
     3f4:	40 91 3c 20 	lds	r20, 0x203C	; 0x80203c <error+0x2>
     3f8:	50 91 3d 20 	lds	r21, 0x203D	; 0x80203d <error+0x3>
     3fc:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
     400:	60 93 30 20 	sts	0x2030, r22	; 0x802030 <ctrlOut>
     404:	70 93 31 20 	sts	0x2031, r23	; 0x802031 <ctrlOut+0x1>
     408:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <ctrlOut+0x2>
     40c:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <ctrlOut+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
     410:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <ctrlOut>
     414:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <ctrlOut+0x1>
     418:	a0 91 32 20 	lds	r26, 0x2032	; 0x802032 <ctrlOut+0x2>
     41c:	b0 91 33 20 	lds	r27, 0x2033	; 0x802033 <ctrlOut+0x3>
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	9f 77       	andi	r25, 0x7F	; 127
     426:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <maxVoltage>
     42a:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <maxVoltage+0x1>
     42e:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <maxVoltage+0x2>
     432:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <maxVoltage+0x3>
     436:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__gesf2>
     43a:	88 23       	and	r24, r24
     43c:	d4 f0       	brlt	.+52     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	ctrlOut = copysign(maxVoltage, ctrlOut);
     43e:	40 91 30 20 	lds	r20, 0x2030	; 0x802030 <ctrlOut>
     442:	50 91 31 20 	lds	r21, 0x2031	; 0x802031 <ctrlOut+0x1>
     446:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <ctrlOut+0x2>
     44a:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <ctrlOut+0x3>
     44e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <maxVoltage>
     452:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <maxVoltage+0x1>
     456:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <maxVoltage+0x2>
     45a:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     45e:	77 fb       	bst	r23, 7
     460:	b7 f9       	bld	r27, 7
     462:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <ctrlOut>
     466:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <ctrlOut+0x1>
     46a:	a0 93 32 20 	sts	0x2032, r26	; 0x802032 <ctrlOut+0x2>
     46e:	b0 93 33 20 	sts	0x2033, r27	; 0x802033 <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
     472:	60 91 30 20 	lds	r22, 0x2030	; 0x802030 <ctrlOut>
     476:	70 91 31 20 	lds	r23, 0x2031	; 0x802031 <ctrlOut+0x1>
     47a:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <ctrlOut+0x2>
     47e:	90 91 33 20 	lds	r25, 0x2033	; 0x802033 <ctrlOut+0x3>
     482:	20 91 28 20 	lds	r18, 0x2028	; 0x802028 <ctrlCorrection>
     486:	30 91 29 20 	lds	r19, 0x2029	; 0x802029 <ctrlCorrection+0x1>
     48a:	40 91 2a 20 	lds	r20, 0x202A	; 0x80202a <ctrlCorrection+0x2>
     48e:	50 91 2b 20 	lds	r21, 0x202B	; 0x80202b <ctrlCorrection+0x3>
     492:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>
     496:	20 91 24 20 	lds	r18, 0x2024	; 0x802024 <__data_end>
     49a:	30 91 25 20 	lds	r19, 0x2025	; 0x802025 <__data_end+0x1>
     49e:	40 91 26 20 	lds	r20, 0x2026	; 0x802026 <__data_end+0x2>
     4a2:	50 91 27 20 	lds	r21, 0x2027	; 0x802027 <__data_end+0x3>
     4a6:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	55 e4       	ldi	r21, 0x45	; 69
     4b2:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>
     4b6:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <ctrlDAC>
     4ba:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <ctrlDAC+0x1>
     4be:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <ctrlDAC+0x2>
     4c2:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
     4c6:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <ctrlDAC>
     4ca:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <ctrlDAC+0x1>
     4ce:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <ctrlDAC+0x2>
     4d2:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <ctrlDAC+0x3>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	a9 01       	movw	r20, r18
     4dc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__cmpsf2>
     4e0:	88 23       	and	r24, r24
     4e2:	44 f4       	brge	.+16     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4e4:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <ctrlDAC>
     4e8:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <ctrlDAC+0x1>
     4ec:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <ctrlDAC+0x2>
     4f0:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
     4f4:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <ctrlDAC>
     4f8:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <ctrlDAC+0x1>
     4fc:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <ctrlDAC+0x2>
     500:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <ctrlDAC+0x3>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 ef       	ldi	r19, 0xF0	; 240
     508:	4f e7       	ldi	r20, 0x7F	; 127
     50a:	55 e4       	ldi	r21, 0x45	; 69
     50c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__gesf2>
     510:	18 16       	cp	r1, r24
     512:	64 f4       	brge	.+24     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 ef       	ldi	r25, 0xF0	; 240
     518:	af e7       	ldi	r26, 0x7F	; 127
     51a:	b5 e4       	ldi	r27, 0x45	; 69
     51c:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <ctrlDAC>
     520:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <ctrlDAC+0x1>
     524:	a0 93 2e 20 	sts	0x202E, r26	; 0x80202e <ctrlDAC+0x2>
     528:	b0 93 2f 20 	sts	0x202F, r27	; 0x80202f <ctrlDAC+0x3>
	// DACB.CH0DATA = (int)ctrlDAC;				//Write ctrl signal to DACB channel 0
	// while((DACB.STATUS & DAC_CH1DRE_bm)==0);
	// DACB.CH1DATA = (int)positionDAC;					//Write arm position to DACB channel 1

	// flip the order to check channel 0 and channel 1
	printf("positionDAC = %d\n", (int)(positionDAC));
     52c:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <positionDAC>
     530:	70 91 3f 20 	lds	r23, 0x203F	; 0x80203f <positionDAC+0x1>
     534:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <positionDAC+0x2>
     538:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <positionDAC+0x3>
     53c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fixsfsi>
     540:	7f 93       	push	r23
     542:	6f 93       	push	r22
     544:	82 e1       	ldi	r24, 0x12	; 18
     546:	90 e2       	ldi	r25, 0x20	; 32
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 8a 06 	call	0xd14	; 0xd14 <printf>
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     55c:	80 ff       	sbrs	r24, 0
     55e:	fc cf       	rjmp	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
     560:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <positionDAC>
     564:	70 91 3f 20 	lds	r23, 0x203F	; 0x80203f <positionDAC+0x1>
     568:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <positionDAC+0x2>
     56c:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <positionDAC+0x3>
     570:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fixsfsi>
     574:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     578:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
     57c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     580:	81 ff       	sbrs	r24, 1
     582:	fc cf       	rjmp	.-8      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
     584:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <ctrlDAC>
     588:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <ctrlDAC+0x1>
     58c:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <ctrlDAC+0x2>
     590:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <ctrlDAC+0x3>
     594:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fixsfsi>
     598:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
     59c:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>

	
	// printf("Error = %d, ctrlOut = %d, Position = %d, ctrlDac = %d, PositionDac = %d\n", (int)(error*100), (int)(ctrlOut*100), (int)(position*100), (int)ctrlDAC, (int)positionDAC);
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>
}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	bf 91       	pop	r27
     5ac:	af 91       	pop	r26
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	7f 91       	pop	r23
     5b4:	6f 91       	pop	r22
     5b6:	5f 91       	pop	r21
     5b8:	4f 91       	pop	r20
     5ba:	3f 91       	pop	r19
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0b be       	out	0x3b, r0	; 59
     5c2:	0f 90       	pop	r0
     5c4:	09 be       	out	0x39, r0	; 57
     5c6:	0f 90       	pop	r0
     5c8:	08 be       	out	0x38, r0	; 56
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     5d4:	e0 e5       	ldi	r30, 0x50	; 80
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	82 60       	ori	r24, 0x02	; 2
     5dc:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
     5de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     5e2:	81 ff       	sbrs	r24, 1
     5e4:	fc cf       	rjmp	.-8      	; 0x5de <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
     5e6:	88 ed       	ldi	r24, 0xD8	; 216
     5e8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
     5f0:	08 95       	ret

000005f2 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
     5f2:	e0 e4       	ldi	r30, 0x40	; 64
     5f4:	f6 e0       	ldi	r31, 0x06	; 6
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     5fe:	e0 ea       	ldi	r30, 0xA0	; 160
     600:	f8 e0       	ldi	r31, 0x08	; 8
     602:	85 81       	ldd	r24, Z+5	; 0x05
     604:	83 60       	ori	r24, 0x03	; 3
     606:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     608:	8b e6       	ldi	r24, 0x6B	; 107
     60a:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     60c:	80 eb       	ldi	r24, 0xB0	; 176
     60e:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
     610:	84 81       	ldd	r24, Z+4	; 0x04
     612:	88 60       	ori	r24, 0x08	; 8
     614:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fdevopen>
     622:	08 95       	ret

00000624 <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
     624:	e0 e6       	ldi	r30, 0x60	; 96
     626:	f6 e0       	ldi	r31, 0x06	; 6
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
     62c:	80 89       	ldd	r24, Z+16	; 0x10
     62e:	83 60       	ori	r24, 0x03	; 3
     630:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
     632:	e0 e8       	ldi	r30, 0x80	; 128
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	88 e6       	ldi	r24, 0x68	; 104
     638:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
     63a:	80 85       	ldd	r24, Z+8	; 0x08
     63c:	89 60       	ori	r24, 0x09	; 9
     63e:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
     640:	e0 e0       	ldi	r30, 0x00	; 0
     642:	f8 e0       	ldi	r31, 0x08	; 8
     644:	83 81       	ldd	r24, Z+3	; 0x03
     646:	88 66       	ori	r24, 0x68	; 104
     648:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
     64a:	80 81       	ld	r24, Z
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 83       	st	Z, r24
     650:	08 95       	ret

00000652 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     652:	aa ec       	ldi	r26, 0xCA	; 202
     654:	b1 e0       	ldi	r27, 0x01	; 1
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     65a:	e8 2f       	mov	r30, r24
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     660:	1c 92       	st	X, r1

	return result;
}
     662:	08 95       	ret

00000664 <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     66a:	c1 15       	cp	r28, r1
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	d8 07       	cpc	r29, r24
     670:	39 f4       	brne	.+14     	; 0x680 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	8c 87       	std	Y+12, r24	; 0x0c
     67c:	9d 87       	std	Y+13, r25	; 0x0d
     67e:	06 c0       	rjmp	.+12     	; 0x68c <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     680:	84 e2       	ldi	r24, 0x24	; 36
     682:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	8c 87       	std	Y+12, r24	; 0x0c
     68a:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 32 03 	call	0x664	; 0x664 <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
     69a:	e0 e0       	ldi	r30, 0x00	; 0
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	88 60       	ori	r24, 0x08	; 8
     6a2:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
     6aa:	80 a1       	ldd	r24, Z+32	; 0x20
     6ac:	81 60       	ori	r24, 0x01	; 1
     6ae:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
     6b0:	84 81       	ldd	r24, Z+4	; 0x04
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
     6b6:	80 81       	ld	r24, Z
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     6c4:	c1 15       	cp	r28, r1
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	d8 07       	cpc	r29, r24
     6ca:	89 f4       	brne	.+34     	; 0x6ee <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     6cc:	80 e3       	ldi	r24, 0x30	; 48
     6ce:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6d2:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     6d4:	81 e3       	ldi	r24, 0x31	; 49
     6d6:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6da:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     6dc:	84 e3       	ldi	r24, 0x34	; 52
     6de:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6e2:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     6e4:	85 e3       	ldi	r24, 0x35	; 53
     6e6:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6ea:	8a 87       	std	Y+10, r24	; 0x0a
     6ec:	10 c0       	rjmp	.+32     	; 0x70e <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     6ee:	82 e3       	ldi	r24, 0x32	; 50
     6f0:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6f4:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     6f6:	83 e3       	ldi	r24, 0x33	; 51
     6f8:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     6fc:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     6fe:	86 e3       	ldi	r24, 0x36	; 54
     700:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     704:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     706:	87 e3       	ldi	r24, 0x37	; 55
     708:	0e 94 29 03 	call	0x652	; 0x652 <SP_ReadCalibrationByte>
     70c:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	0e 94 5f 03 	call	0x6be	; 0x6be <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
     71c:	e0 e2       	ldi	r30, 0x20	; 32
     71e:	f3 e0       	ldi	r31, 0x03	; 3
     720:	81 81       	ldd	r24, Z+1	; 0x01
     722:	80 64       	ori	r24, 0x40	; 64
     724:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
     72a:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
     72c:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     72e:	80 81       	ld	r24, Z
     730:	8d 60       	ori	r24, 0x0D	; 13
     732:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 5f 03 	call	0x6be	; 0x6be <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	f3 e0       	ldi	r31, 0x03	; 3
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	80 64       	ori	r24, 0x40	; 64
     744:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     746:	82 81       	ldd	r24, Z+2	; 0x02
     748:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
     74a:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
     74c:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     74e:	80 81       	ld	r24, Z
     750:	8d 60       	ori	r24, 0x0D	; 13
     752:	80 83       	st	Z, r24
     754:	08 95       	ret

00000756 <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
     756:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     758:	e0 e4       	ldi	r30, 0x40	; 64
     75a:	f8 e0       	ldi	r31, 0x08	; 8
     75c:	81 81       	ldd	r24, Z+1	; 0x01
     75e:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     760:	96 81       	ldd	r25, Z+6	; 0x06
     762:	91 60       	ori	r25, 0x01	; 1
     764:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     766:	26 a3       	std	Z+38, r18	; 0x26
     768:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     76a:	80 81       	ld	r24, Z
     76c:	83 60       	ori	r24, 0x03	; 3
     76e:	80 83       	st	Z, r24
     770:	08 95       	ret

00000772 <main>:


int main(void)
{
	
	clk_init();
     772:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <clk_init>
	encoder_init();
     776:	0e 94 12 03 	call	0x624	; 0x624 <encoder_init>
	usart_init();
     77a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <usart_init>
	dac_init();
     77e:	0e 94 8a 03 	call	0x714	; 0x714 <dac_init>
	adc_init();
     782:	0e 94 49 03 	call	0x692	; 0x692 <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
     78c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <maxVoltage>
     790:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <maxVoltage+0x1>
     794:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <maxVoltage+0x2>
     798:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <maxVoltage+0x3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	0e 94 02 04 	call	0x804	; 0x804 <__addsf3>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 ef       	ldi	r23, 0xF0	; 240
     7ac:	8f e7       	ldi	r24, 0x7F	; 127
     7ae:	95 e4       	ldi	r25, 0x45	; 69
     7b0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__divsf3>
     7b4:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <__data_end>
     7b8:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <__data_end+0x1>
     7bc:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <__data_end+0x2>
     7c0:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
     7c4:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <Ts>
     7c8:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <Ts+0x1>
     7cc:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <Ts+0x2>
     7d0:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <Ts+0x3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	34 e2       	ldi	r19, 0x24	; 36
     7d8:	44 ef       	ldi	r20, 0xF4	; 244
     7da:	5a e4       	ldi	r21, 0x4A	; 74
     7dc:	0e 94 d2 05 	call	0xba4	; 0xba4 <__mulsf3>
     7e0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixunssfsi>
     7e4:	60 93 48 20 	sts	0x2048, r22	; 0x802048 <topCount>
     7e8:	70 93 49 20 	sts	0x2049, r23	; 0x802049 <topCount+0x1>
	
	timer_init(topCount);
     7ec:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <topCount>
     7f0:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <topCount+0x1>
     7f4:	0e 94 ab 03 	call	0x756	; 0x756 <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     7fe:	78 94       	sei
     800:	ff cf       	rjmp	.-2      	; 0x800 <__EEPROM_REGION_LENGTH__>

00000802 <__subsf3>:
     802:	50 58       	subi	r21, 0x80	; 128

00000804 <__addsf3>:
     804:	bb 27       	eor	r27, r27
     806:	aa 27       	eor	r26, r26
     808:	0e 94 19 04 	call	0x832	; 0x832 <__addsf3x>
     80c:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_round>
     810:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscA>
     814:	38 f0       	brcs	.+14     	; 0x824 <__addsf3+0x20>
     816:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscB>
     81a:	20 f0       	brcs	.+8      	; 0x824 <__addsf3+0x20>
     81c:	39 f4       	brne	.+14     	; 0x82c <__addsf3+0x28>
     81e:	9f 3f       	cpi	r25, 0xFF	; 255
     820:	19 f4       	brne	.+6      	; 0x828 <__addsf3+0x24>
     822:	26 f4       	brtc	.+8      	; 0x82c <__addsf3+0x28>
     824:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_nan>
     828:	0e f4       	brtc	.+2      	; 0x82c <__addsf3+0x28>
     82a:	e0 95       	com	r30
     82c:	e7 fb       	bst	r30, 7
     82e:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>

00000832 <__addsf3x>:
     832:	e9 2f       	mov	r30, r25
     834:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_split3>
     838:	58 f3       	brcs	.-42     	; 0x810 <__addsf3+0xc>
     83a:	ba 17       	cp	r27, r26
     83c:	62 07       	cpc	r22, r18
     83e:	73 07       	cpc	r23, r19
     840:	84 07       	cpc	r24, r20
     842:	95 07       	cpc	r25, r21
     844:	20 f0       	brcs	.+8      	; 0x84e <__addsf3x+0x1c>
     846:	79 f4       	brne	.+30     	; 0x866 <__addsf3x+0x34>
     848:	a6 f5       	brtc	.+104    	; 0x8b2 <__addsf3x+0x80>
     84a:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_zero>
     84e:	0e f4       	brtc	.+2      	; 0x852 <__addsf3x+0x20>
     850:	e0 95       	com	r30
     852:	0b 2e       	mov	r0, r27
     854:	ba 2f       	mov	r27, r26
     856:	a0 2d       	mov	r26, r0
     858:	0b 01       	movw	r0, r22
     85a:	b9 01       	movw	r22, r18
     85c:	90 01       	movw	r18, r0
     85e:	0c 01       	movw	r0, r24
     860:	ca 01       	movw	r24, r20
     862:	a0 01       	movw	r20, r0
     864:	11 24       	eor	r1, r1
     866:	ff 27       	eor	r31, r31
     868:	59 1b       	sub	r21, r25
     86a:	99 f0       	breq	.+38     	; 0x892 <__addsf3x+0x60>
     86c:	59 3f       	cpi	r21, 0xF9	; 249
     86e:	50 f4       	brcc	.+20     	; 0x884 <__addsf3x+0x52>
     870:	50 3e       	cpi	r21, 0xE0	; 224
     872:	68 f1       	brcs	.+90     	; 0x8ce <__addsf3x+0x9c>
     874:	1a 16       	cp	r1, r26
     876:	f0 40       	sbci	r31, 0x00	; 0
     878:	a2 2f       	mov	r26, r18
     87a:	23 2f       	mov	r18, r19
     87c:	34 2f       	mov	r19, r20
     87e:	44 27       	eor	r20, r20
     880:	58 5f       	subi	r21, 0xF8	; 248
     882:	f3 cf       	rjmp	.-26     	; 0x86a <__addsf3x+0x38>
     884:	46 95       	lsr	r20
     886:	37 95       	ror	r19
     888:	27 95       	ror	r18
     88a:	a7 95       	ror	r26
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	53 95       	inc	r21
     890:	c9 f7       	brne	.-14     	; 0x884 <__addsf3x+0x52>
     892:	7e f4       	brtc	.+30     	; 0x8b2 <__addsf3x+0x80>
     894:	1f 16       	cp	r1, r31
     896:	ba 0b       	sbc	r27, r26
     898:	62 0b       	sbc	r22, r18
     89a:	73 0b       	sbc	r23, r19
     89c:	84 0b       	sbc	r24, r20
     89e:	ba f0       	brmi	.+46     	; 0x8ce <__addsf3x+0x9c>
     8a0:	91 50       	subi	r25, 0x01	; 1
     8a2:	a1 f0       	breq	.+40     	; 0x8cc <__addsf3x+0x9a>
     8a4:	ff 0f       	add	r31, r31
     8a6:	bb 1f       	adc	r27, r27
     8a8:	66 1f       	adc	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	88 1f       	adc	r24, r24
     8ae:	c2 f7       	brpl	.-16     	; 0x8a0 <__addsf3x+0x6e>
     8b0:	0e c0       	rjmp	.+28     	; 0x8ce <__addsf3x+0x9c>
     8b2:	ba 0f       	add	r27, r26
     8b4:	62 1f       	adc	r22, r18
     8b6:	73 1f       	adc	r23, r19
     8b8:	84 1f       	adc	r24, r20
     8ba:	48 f4       	brcc	.+18     	; 0x8ce <__addsf3x+0x9c>
     8bc:	87 95       	ror	r24
     8be:	77 95       	ror	r23
     8c0:	67 95       	ror	r22
     8c2:	b7 95       	ror	r27
     8c4:	f7 95       	ror	r31
     8c6:	9e 3f       	cpi	r25, 0xFE	; 254
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <__addsf3x+0x9a>
     8ca:	b0 cf       	rjmp	.-160    	; 0x82c <__addsf3+0x28>
     8cc:	93 95       	inc	r25
     8ce:	88 0f       	add	r24, r24
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__addsf3x+0xa2>
     8d2:	99 27       	eor	r25, r25
     8d4:	ee 0f       	add	r30, r30
     8d6:	97 95       	ror	r25
     8d8:	87 95       	ror	r24
     8da:	08 95       	ret

000008dc <__cmpsf2>:
     8dc:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_cmp>
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <__cmpsf2+0x8>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	08 95       	ret

000008e6 <__divsf3>:
     8e6:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3x>
     8ea:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_round>
     8ee:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscB>
     8f2:	58 f0       	brcs	.+22     	; 0x90a <__divsf3+0x24>
     8f4:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscA>
     8f8:	40 f0       	brcs	.+16     	; 0x90a <__divsf3+0x24>
     8fa:	29 f4       	brne	.+10     	; 0x906 <__divsf3+0x20>
     8fc:	5f 3f       	cpi	r21, 0xFF	; 255
     8fe:	29 f0       	breq	.+10     	; 0x90a <__divsf3+0x24>
     900:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
     904:	51 11       	cpse	r21, r1
     906:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
     90a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_nan>

0000090e <__divsf3x>:
     90e:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_split3>
     912:	68 f3       	brcs	.-38     	; 0x8ee <__divsf3+0x8>

00000914 <__divsf3_pse>:
     914:	99 23       	and	r25, r25
     916:	b1 f3       	breq	.-20     	; 0x904 <__divsf3+0x1e>
     918:	55 23       	and	r21, r21
     91a:	91 f3       	breq	.-28     	; 0x900 <__divsf3+0x1a>
     91c:	95 1b       	sub	r25, r21
     91e:	55 0b       	sbc	r21, r21
     920:	bb 27       	eor	r27, r27
     922:	aa 27       	eor	r26, r26
     924:	62 17       	cp	r22, r18
     926:	73 07       	cpc	r23, r19
     928:	84 07       	cpc	r24, r20
     92a:	38 f0       	brcs	.+14     	; 0x93a <__divsf3_pse+0x26>
     92c:	9f 5f       	subi	r25, 0xFF	; 255
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	44 1f       	adc	r20, r20
     936:	aa 1f       	adc	r26, r26
     938:	a9 f3       	breq	.-22     	; 0x924 <__divsf3_pse+0x10>
     93a:	35 d0       	rcall	.+106    	; 0x9a6 <__divsf3_pse+0x92>
     93c:	0e 2e       	mov	r0, r30
     93e:	3a f0       	brmi	.+14     	; 0x94e <__divsf3_pse+0x3a>
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	32 d0       	rcall	.+100    	; 0x9a8 <__divsf3_pse+0x94>
     944:	91 50       	subi	r25, 0x01	; 1
     946:	50 40       	sbci	r21, 0x00	; 0
     948:	e6 95       	lsr	r30
     94a:	00 1c       	adc	r0, r0
     94c:	ca f7       	brpl	.-14     	; 0x940 <__divsf3_pse+0x2c>
     94e:	2b d0       	rcall	.+86     	; 0x9a6 <__divsf3_pse+0x92>
     950:	fe 2f       	mov	r31, r30
     952:	29 d0       	rcall	.+82     	; 0x9a6 <__divsf3_pse+0x92>
     954:	66 0f       	add	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	88 1f       	adc	r24, r24
     95a:	bb 1f       	adc	r27, r27
     95c:	26 17       	cp	r18, r22
     95e:	37 07       	cpc	r19, r23
     960:	48 07       	cpc	r20, r24
     962:	ab 07       	cpc	r26, r27
     964:	b0 e8       	ldi	r27, 0x80	; 128
     966:	09 f0       	breq	.+2      	; 0x96a <__divsf3_pse+0x56>
     968:	bb 0b       	sbc	r27, r27
     96a:	80 2d       	mov	r24, r0
     96c:	bf 01       	movw	r22, r30
     96e:	ff 27       	eor	r31, r31
     970:	93 58       	subi	r25, 0x83	; 131
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	3a f0       	brmi	.+14     	; 0x984 <__divsf3_pse+0x70>
     976:	9e 3f       	cpi	r25, 0xFE	; 254
     978:	51 05       	cpc	r21, r1
     97a:	78 f0       	brcs	.+30     	; 0x99a <__divsf3_pse+0x86>
     97c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
     980:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
     984:	5f 3f       	cpi	r21, 0xFF	; 255
     986:	e4 f3       	brlt	.-8      	; 0x980 <__divsf3_pse+0x6c>
     988:	98 3e       	cpi	r25, 0xE8	; 232
     98a:	d4 f3       	brlt	.-12     	; 0x980 <__divsf3_pse+0x6c>
     98c:	86 95       	lsr	r24
     98e:	77 95       	ror	r23
     990:	67 95       	ror	r22
     992:	b7 95       	ror	r27
     994:	f7 95       	ror	r31
     996:	9f 5f       	subi	r25, 0xFF	; 255
     998:	c9 f7       	brne	.-14     	; 0x98c <__divsf3_pse+0x78>
     99a:	88 0f       	add	r24, r24
     99c:	91 1d       	adc	r25, r1
     99e:	96 95       	lsr	r25
     9a0:	87 95       	ror	r24
     9a2:	97 f9       	bld	r25, 7
     9a4:	08 95       	ret
     9a6:	e1 e0       	ldi	r30, 0x01	; 1
     9a8:	66 0f       	add	r22, r22
     9aa:	77 1f       	adc	r23, r23
     9ac:	88 1f       	adc	r24, r24
     9ae:	bb 1f       	adc	r27, r27
     9b0:	62 17       	cp	r22, r18
     9b2:	73 07       	cpc	r23, r19
     9b4:	84 07       	cpc	r24, r20
     9b6:	ba 07       	cpc	r27, r26
     9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__divsf3_pse+0xae>
     9ba:	62 1b       	sub	r22, r18
     9bc:	73 0b       	sbc	r23, r19
     9be:	84 0b       	sbc	r24, r20
     9c0:	ba 0b       	sbc	r27, r26
     9c2:	ee 1f       	adc	r30, r30
     9c4:	88 f7       	brcc	.-30     	; 0x9a8 <__divsf3_pse+0x94>
     9c6:	e0 95       	com	r30
     9c8:	08 95       	ret

000009ca <__fixsfsi>:
     9ca:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fixunssfsi>
     9ce:	68 94       	set
     9d0:	b1 11       	cpse	r27, r1
     9d2:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
     9d6:	08 95       	ret

000009d8 <__fixunssfsi>:
     9d8:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_splitA>
     9dc:	88 f0       	brcs	.+34     	; 0xa00 <__fixunssfsi+0x28>
     9de:	9f 57       	subi	r25, 0x7F	; 127
     9e0:	98 f0       	brcs	.+38     	; 0xa08 <__fixunssfsi+0x30>
     9e2:	b9 2f       	mov	r27, r25
     9e4:	99 27       	eor	r25, r25
     9e6:	b7 51       	subi	r27, 0x17	; 23
     9e8:	b0 f0       	brcs	.+44     	; 0xa16 <__fixunssfsi+0x3e>
     9ea:	e1 f0       	breq	.+56     	; 0xa24 <__fixunssfsi+0x4c>
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	88 1f       	adc	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	1a f0       	brmi	.+6      	; 0x9fc <__fixunssfsi+0x24>
     9f6:	ba 95       	dec	r27
     9f8:	c9 f7       	brne	.-14     	; 0x9ec <__fixunssfsi+0x14>
     9fa:	14 c0       	rjmp	.+40     	; 0xa24 <__fixunssfsi+0x4c>
     9fc:	b1 30       	cpi	r27, 0x01	; 1
     9fe:	91 f0       	breq	.+36     	; 0xa24 <__fixunssfsi+0x4c>
     a00:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_zero>
     a04:	b1 e0       	ldi	r27, 0x01	; 1
     a06:	08 95       	ret
     a08:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__fp_zero>
     a0c:	67 2f       	mov	r22, r23
     a0e:	78 2f       	mov	r23, r24
     a10:	88 27       	eor	r24, r24
     a12:	b8 5f       	subi	r27, 0xF8	; 248
     a14:	39 f0       	breq	.+14     	; 0xa24 <__fixunssfsi+0x4c>
     a16:	b9 3f       	cpi	r27, 0xF9	; 249
     a18:	cc f3       	brlt	.-14     	; 0xa0c <__fixunssfsi+0x34>
     a1a:	86 95       	lsr	r24
     a1c:	77 95       	ror	r23
     a1e:	67 95       	ror	r22
     a20:	b3 95       	inc	r27
     a22:	d9 f7       	brne	.-10     	; 0xa1a <__fixunssfsi+0x42>
     a24:	3e f4       	brtc	.+14     	; 0xa34 <__fixunssfsi+0x5c>
     a26:	90 95       	com	r25
     a28:	80 95       	com	r24
     a2a:	70 95       	com	r23
     a2c:	61 95       	neg	r22
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	08 95       	ret

00000a36 <__floatunsisf>:
     a36:	e8 94       	clt
     a38:	09 c0       	rjmp	.+18     	; 0xa4c <__floatsisf+0x12>

00000a3a <__floatsisf>:
     a3a:	97 fb       	bst	r25, 7
     a3c:	3e f4       	brtc	.+14     	; 0xa4c <__floatsisf+0x12>
     a3e:	90 95       	com	r25
     a40:	80 95       	com	r24
     a42:	70 95       	com	r23
     a44:	61 95       	neg	r22
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	8f 4f       	sbci	r24, 0xFF	; 255
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	99 23       	and	r25, r25
     a4e:	a9 f0       	breq	.+42     	; 0xa7a <__floatsisf+0x40>
     a50:	f9 2f       	mov	r31, r25
     a52:	96 e9       	ldi	r25, 0x96	; 150
     a54:	bb 27       	eor	r27, r27
     a56:	93 95       	inc	r25
     a58:	f6 95       	lsr	r31
     a5a:	87 95       	ror	r24
     a5c:	77 95       	ror	r23
     a5e:	67 95       	ror	r22
     a60:	b7 95       	ror	r27
     a62:	f1 11       	cpse	r31, r1
     a64:	f8 cf       	rjmp	.-16     	; 0xa56 <__floatsisf+0x1c>
     a66:	fa f4       	brpl	.+62     	; 0xaa6 <__floatsisf+0x6c>
     a68:	bb 0f       	add	r27, r27
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__floatsisf+0x36>
     a6c:	60 ff       	sbrs	r22, 0
     a6e:	1b c0       	rjmp	.+54     	; 0xaa6 <__floatsisf+0x6c>
     a70:	6f 5f       	subi	r22, 0xFF	; 255
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	8f 4f       	sbci	r24, 0xFF	; 255
     a76:	9f 4f       	sbci	r25, 0xFF	; 255
     a78:	16 c0       	rjmp	.+44     	; 0xaa6 <__floatsisf+0x6c>
     a7a:	88 23       	and	r24, r24
     a7c:	11 f0       	breq	.+4      	; 0xa82 <__floatsisf+0x48>
     a7e:	96 e9       	ldi	r25, 0x96	; 150
     a80:	11 c0       	rjmp	.+34     	; 0xaa4 <__floatsisf+0x6a>
     a82:	77 23       	and	r23, r23
     a84:	21 f0       	breq	.+8      	; 0xa8e <__floatsisf+0x54>
     a86:	9e e8       	ldi	r25, 0x8E	; 142
     a88:	87 2f       	mov	r24, r23
     a8a:	76 2f       	mov	r23, r22
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__floatsisf+0x5e>
     a8e:	66 23       	and	r22, r22
     a90:	71 f0       	breq	.+28     	; 0xaae <__floatsisf+0x74>
     a92:	96 e8       	ldi	r25, 0x86	; 134
     a94:	86 2f       	mov	r24, r22
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	2a f0       	brmi	.+10     	; 0xaa6 <__floatsisf+0x6c>
     a9c:	9a 95       	dec	r25
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	da f7       	brpl	.-10     	; 0xa9c <__floatsisf+0x62>
     aa6:	88 0f       	add	r24, r24
     aa8:	96 95       	lsr	r25
     aaa:	87 95       	ror	r24
     aac:	97 f9       	bld	r25, 7
     aae:	08 95       	ret

00000ab0 <__fp_cmp>:
     ab0:	99 0f       	add	r25, r25
     ab2:	00 08       	sbc	r0, r0
     ab4:	55 0f       	add	r21, r21
     ab6:	aa 0b       	sbc	r26, r26
     ab8:	e0 e8       	ldi	r30, 0x80	; 128
     aba:	fe ef       	ldi	r31, 0xFE	; 254
     abc:	16 16       	cp	r1, r22
     abe:	17 06       	cpc	r1, r23
     ac0:	e8 07       	cpc	r30, r24
     ac2:	f9 07       	cpc	r31, r25
     ac4:	c0 f0       	brcs	.+48     	; 0xaf6 <__fp_cmp+0x46>
     ac6:	12 16       	cp	r1, r18
     ac8:	13 06       	cpc	r1, r19
     aca:	e4 07       	cpc	r30, r20
     acc:	f5 07       	cpc	r31, r21
     ace:	98 f0       	brcs	.+38     	; 0xaf6 <__fp_cmp+0x46>
     ad0:	62 1b       	sub	r22, r18
     ad2:	73 0b       	sbc	r23, r19
     ad4:	84 0b       	sbc	r24, r20
     ad6:	95 0b       	sbc	r25, r21
     ad8:	39 f4       	brne	.+14     	; 0xae8 <__fp_cmp+0x38>
     ada:	0a 26       	eor	r0, r26
     adc:	61 f0       	breq	.+24     	; 0xaf6 <__fp_cmp+0x46>
     ade:	23 2b       	or	r18, r19
     ae0:	24 2b       	or	r18, r20
     ae2:	25 2b       	or	r18, r21
     ae4:	21 f4       	brne	.+8      	; 0xaee <__fp_cmp+0x3e>
     ae6:	08 95       	ret
     ae8:	0a 26       	eor	r0, r26
     aea:	09 f4       	brne	.+2      	; 0xaee <__fp_cmp+0x3e>
     aec:	a1 40       	sbci	r26, 0x01	; 1
     aee:	a6 95       	lsr	r26
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	81 1d       	adc	r24, r1
     af4:	81 1d       	adc	r24, r1
     af6:	08 95       	ret

00000af8 <__fp_inf>:
     af8:	97 f9       	bld	r25, 7
     afa:	9f 67       	ori	r25, 0x7F	; 127
     afc:	80 e8       	ldi	r24, 0x80	; 128
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	08 95       	ret

00000b04 <__fp_nan>:
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	08 95       	ret

00000b0a <__fp_pscA>:
     b0a:	00 24       	eor	r0, r0
     b0c:	0a 94       	dec	r0
     b0e:	16 16       	cp	r1, r22
     b10:	17 06       	cpc	r1, r23
     b12:	18 06       	cpc	r1, r24
     b14:	09 06       	cpc	r0, r25
     b16:	08 95       	ret

00000b18 <__fp_pscB>:
     b18:	00 24       	eor	r0, r0
     b1a:	0a 94       	dec	r0
     b1c:	12 16       	cp	r1, r18
     b1e:	13 06       	cpc	r1, r19
     b20:	14 06       	cpc	r1, r20
     b22:	05 06       	cpc	r0, r21
     b24:	08 95       	ret

00000b26 <__fp_round>:
     b26:	09 2e       	mov	r0, r25
     b28:	03 94       	inc	r0
     b2a:	00 0c       	add	r0, r0
     b2c:	11 f4       	brne	.+4      	; 0xb32 <__fp_round+0xc>
     b2e:	88 23       	and	r24, r24
     b30:	52 f0       	brmi	.+20     	; 0xb46 <__fp_round+0x20>
     b32:	bb 0f       	add	r27, r27
     b34:	40 f4       	brcc	.+16     	; 0xb46 <__fp_round+0x20>
     b36:	bf 2b       	or	r27, r31
     b38:	11 f4       	brne	.+4      	; 0xb3e <__fp_round+0x18>
     b3a:	60 ff       	sbrs	r22, 0
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <__fp_round+0x20>
     b3e:	6f 5f       	subi	r22, 0xFF	; 255
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	8f 4f       	sbci	r24, 0xFF	; 255
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	08 95       	ret

00000b48 <__fp_split3>:
     b48:	57 fd       	sbrc	r21, 7
     b4a:	90 58       	subi	r25, 0x80	; 128
     b4c:	44 0f       	add	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	59 f0       	breq	.+22     	; 0xb68 <__fp_splitA+0x10>
     b52:	5f 3f       	cpi	r21, 0xFF	; 255
     b54:	71 f0       	breq	.+28     	; 0xb72 <__fp_splitA+0x1a>
     b56:	47 95       	ror	r20

00000b58 <__fp_splitA>:
     b58:	88 0f       	add	r24, r24
     b5a:	97 fb       	bst	r25, 7
     b5c:	99 1f       	adc	r25, r25
     b5e:	61 f0       	breq	.+24     	; 0xb78 <__fp_splitA+0x20>
     b60:	9f 3f       	cpi	r25, 0xFF	; 255
     b62:	79 f0       	breq	.+30     	; 0xb82 <__fp_splitA+0x2a>
     b64:	87 95       	ror	r24
     b66:	08 95       	ret
     b68:	12 16       	cp	r1, r18
     b6a:	13 06       	cpc	r1, r19
     b6c:	14 06       	cpc	r1, r20
     b6e:	55 1f       	adc	r21, r21
     b70:	f2 cf       	rjmp	.-28     	; 0xb56 <__fp_split3+0xe>
     b72:	46 95       	lsr	r20
     b74:	f1 df       	rcall	.-30     	; 0xb58 <__fp_splitA>
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <__fp_splitA+0x30>
     b78:	16 16       	cp	r1, r22
     b7a:	17 06       	cpc	r1, r23
     b7c:	18 06       	cpc	r1, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	f1 cf       	rjmp	.-30     	; 0xb64 <__fp_splitA+0xc>
     b82:	86 95       	lsr	r24
     b84:	71 05       	cpc	r23, r1
     b86:	61 05       	cpc	r22, r1
     b88:	08 94       	sec
     b8a:	08 95       	ret

00000b8c <__fp_zero>:
     b8c:	e8 94       	clt

00000b8e <__fp_szero>:
     b8e:	bb 27       	eor	r27, r27
     b90:	66 27       	eor	r22, r22
     b92:	77 27       	eor	r23, r23
     b94:	cb 01       	movw	r24, r22
     b96:	97 f9       	bld	r25, 7
     b98:	08 95       	ret

00000b9a <__gesf2>:
     b9a:	0e 94 58 05 	call	0xab0	; 0xab0 <__fp_cmp>
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <__gesf2+0x8>
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	08 95       	ret

00000ba4 <__mulsf3>:
     ba4:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3x>
     ba8:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__fp_round>
     bac:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_pscA>
     bb0:	38 f0       	brcs	.+14     	; 0xbc0 <__mulsf3+0x1c>
     bb2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__fp_pscB>
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__mulsf3+0x1c>
     bb8:	95 23       	and	r25, r21
     bba:	11 f0       	breq	.+4      	; 0xbc0 <__mulsf3+0x1c>
     bbc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
     bc0:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_nan>
     bc4:	11 24       	eor	r1, r1
     bc6:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>

00000bca <__mulsf3x>:
     bca:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_split3>
     bce:	70 f3       	brcs	.-36     	; 0xbac <__mulsf3+0x8>

00000bd0 <__mulsf3_pse>:
     bd0:	95 9f       	mul	r25, r21
     bd2:	c1 f3       	breq	.-16     	; 0xbc4 <__mulsf3+0x20>
     bd4:	95 0f       	add	r25, r21
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	55 1f       	adc	r21, r21
     bda:	62 9f       	mul	r22, r18
     bdc:	f0 01       	movw	r30, r0
     bde:	72 9f       	mul	r23, r18
     be0:	bb 27       	eor	r27, r27
     be2:	f0 0d       	add	r31, r0
     be4:	b1 1d       	adc	r27, r1
     be6:	63 9f       	mul	r22, r19
     be8:	aa 27       	eor	r26, r26
     bea:	f0 0d       	add	r31, r0
     bec:	b1 1d       	adc	r27, r1
     bee:	aa 1f       	adc	r26, r26
     bf0:	64 9f       	mul	r22, r20
     bf2:	66 27       	eor	r22, r22
     bf4:	b0 0d       	add	r27, r0
     bf6:	a1 1d       	adc	r26, r1
     bf8:	66 1f       	adc	r22, r22
     bfa:	82 9f       	mul	r24, r18
     bfc:	22 27       	eor	r18, r18
     bfe:	b0 0d       	add	r27, r0
     c00:	a1 1d       	adc	r26, r1
     c02:	62 1f       	adc	r22, r18
     c04:	73 9f       	mul	r23, r19
     c06:	b0 0d       	add	r27, r0
     c08:	a1 1d       	adc	r26, r1
     c0a:	62 1f       	adc	r22, r18
     c0c:	83 9f       	mul	r24, r19
     c0e:	a0 0d       	add	r26, r0
     c10:	61 1d       	adc	r22, r1
     c12:	22 1f       	adc	r18, r18
     c14:	74 9f       	mul	r23, r20
     c16:	33 27       	eor	r19, r19
     c18:	a0 0d       	add	r26, r0
     c1a:	61 1d       	adc	r22, r1
     c1c:	23 1f       	adc	r18, r19
     c1e:	84 9f       	mul	r24, r20
     c20:	60 0d       	add	r22, r0
     c22:	21 1d       	adc	r18, r1
     c24:	82 2f       	mov	r24, r18
     c26:	76 2f       	mov	r23, r22
     c28:	6a 2f       	mov	r22, r26
     c2a:	11 24       	eor	r1, r1
     c2c:	9f 57       	subi	r25, 0x7F	; 127
     c2e:	50 40       	sbci	r21, 0x00	; 0
     c30:	9a f0       	brmi	.+38     	; 0xc58 <__mulsf3_pse+0x88>
     c32:	f1 f0       	breq	.+60     	; 0xc70 <__mulsf3_pse+0xa0>
     c34:	88 23       	and	r24, r24
     c36:	4a f0       	brmi	.+18     	; 0xc4a <__mulsf3_pse+0x7a>
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	bb 1f       	adc	r27, r27
     c3e:	66 1f       	adc	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	91 50       	subi	r25, 0x01	; 1
     c46:	50 40       	sbci	r21, 0x00	; 0
     c48:	a9 f7       	brne	.-22     	; 0xc34 <__mulsf3_pse+0x64>
     c4a:	9e 3f       	cpi	r25, 0xFE	; 254
     c4c:	51 05       	cpc	r21, r1
     c4e:	80 f0       	brcs	.+32     	; 0xc70 <__mulsf3_pse+0xa0>
     c50:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_inf>
     c54:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_szero>
     c58:	5f 3f       	cpi	r21, 0xFF	; 255
     c5a:	e4 f3       	brlt	.-8      	; 0xc54 <__mulsf3_pse+0x84>
     c5c:	98 3e       	cpi	r25, 0xE8	; 232
     c5e:	d4 f3       	brlt	.-12     	; 0xc54 <__mulsf3_pse+0x84>
     c60:	86 95       	lsr	r24
     c62:	77 95       	ror	r23
     c64:	67 95       	ror	r22
     c66:	b7 95       	ror	r27
     c68:	f7 95       	ror	r31
     c6a:	e7 95       	ror	r30
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	c1 f7       	brne	.-16     	; 0xc60 <__mulsf3_pse+0x90>
     c70:	fe 2b       	or	r31, r30
     c72:	88 0f       	add	r24, r24
     c74:	91 1d       	adc	r25, r1
     c76:	96 95       	lsr	r25
     c78:	87 95       	ror	r24
     c7a:	97 f9       	bld	r25, 7
     c7c:	08 95       	ret

00000c7e <fdevopen>:
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	31 f4       	brne	.+12     	; 0xc96 <fdevopen+0x18>
     c8a:	61 15       	cp	r22, r1
     c8c:	71 05       	cpc	r23, r1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <fdevopen+0x18>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	3a c0       	rjmp	.+116    	; 0xd0a <fdevopen+0x8c>
     c96:	8b 01       	movw	r16, r22
     c98:	ec 01       	movw	r28, r24
     c9a:	6e e0       	ldi	r22, 0x0E	; 14
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 a2 08 	call	0x1144	; 0x1144 <calloc>
     ca6:	fc 01       	movw	r30, r24
     ca8:	89 2b       	or	r24, r25
     caa:	91 f3       	breq	.-28     	; 0xc90 <fdevopen+0x12>
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	83 83       	std	Z+3, r24	; 0x03
     cb0:	01 15       	cp	r16, r1
     cb2:	11 05       	cpc	r17, r1
     cb4:	71 f0       	breq	.+28     	; 0xcd2 <fdevopen+0x54>
     cb6:	02 87       	std	Z+10, r16	; 0x0a
     cb8:	13 87       	std	Z+11, r17	; 0x0b
     cba:	81 e8       	ldi	r24, 0x81	; 129
     cbc:	83 83       	std	Z+3, r24	; 0x03
     cbe:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <__iob>
     cc2:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <__iob+0x1>
     cc6:	89 2b       	or	r24, r25
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <fdevopen+0x54>
     cca:	e0 93 4a 20 	sts	0x204A, r30	; 0x80204a <__iob>
     cce:	f0 93 4b 20 	sts	0x204B, r31	; 0x80204b <__iob+0x1>
     cd2:	20 97       	sbiw	r28, 0x00	; 0
     cd4:	c9 f0       	breq	.+50     	; 0xd08 <fdevopen+0x8a>
     cd6:	c0 87       	std	Z+8, r28	; 0x08
     cd8:	d1 87       	std	Z+9, r29	; 0x09
     cda:	83 81       	ldd	r24, Z+3	; 0x03
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	83 83       	std	Z+3, r24	; 0x03
     ce0:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <__iob+0x2>
     ce4:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <__iob+0x3>
     ce8:	89 2b       	or	r24, r25
     cea:	71 f4       	brne	.+28     	; 0xd08 <fdevopen+0x8a>
     cec:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <__iob+0x2>
     cf0:	f0 93 4d 20 	sts	0x204D, r31	; 0x80204d <__iob+0x3>
     cf4:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <__iob+0x4>
     cf8:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <__iob+0x5>
     cfc:	89 2b       	or	r24, r25
     cfe:	21 f4       	brne	.+8      	; 0xd08 <fdevopen+0x8a>
     d00:	e0 93 4e 20 	sts	0x204E, r30	; 0x80204e <__iob+0x4>
     d04:	f0 93 4f 20 	sts	0x204F, r31	; 0x80204f <__iob+0x5>
     d08:	cf 01       	movw	r24, r30
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <printf>:
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	ae 01       	movw	r20, r28
     d1e:	4a 5f       	subi	r20, 0xFA	; 250
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	fa 01       	movw	r30, r20
     d24:	61 91       	ld	r22, Z+
     d26:	71 91       	ld	r23, Z+
     d28:	af 01       	movw	r20, r30
     d2a:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <__iob+0x2>
     d2e:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <__iob+0x3>
     d32:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vfprintf>
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <vfprintf>:
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	2b 97       	sbiw	r28, 0x0b	; 11
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	6c 01       	movw	r12, r24
     d6c:	7b 01       	movw	r14, r22
     d6e:	8a 01       	movw	r16, r20
     d70:	fc 01       	movw	r30, r24
     d72:	16 82       	std	Z+6, r1	; 0x06
     d74:	17 82       	std	Z+7, r1	; 0x07
     d76:	83 81       	ldd	r24, Z+3	; 0x03
     d78:	81 ff       	sbrs	r24, 1
     d7a:	cc c1       	rjmp	.+920    	; 0x1114 <vfprintf+0x3d8>
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	3c 01       	movw	r6, r24
     d82:	f6 01       	movw	r30, r12
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	f7 01       	movw	r30, r14
     d88:	93 fd       	sbrc	r25, 3
     d8a:	85 91       	lpm	r24, Z+
     d8c:	93 ff       	sbrs	r25, 3
     d8e:	81 91       	ld	r24, Z+
     d90:	7f 01       	movw	r14, r30
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <vfprintf+0x5c>
     d96:	ba c1       	rjmp	.+884    	; 0x110c <vfprintf+0x3d0>
     d98:	85 32       	cpi	r24, 0x25	; 37
     d9a:	39 f4       	brne	.+14     	; 0xdaa <vfprintf+0x6e>
     d9c:	93 fd       	sbrc	r25, 3
     d9e:	85 91       	lpm	r24, Z+
     da0:	93 ff       	sbrs	r25, 3
     da2:	81 91       	ld	r24, Z+
     da4:	7f 01       	movw	r14, r30
     da6:	85 32       	cpi	r24, 0x25	; 37
     da8:	29 f4       	brne	.+10     	; 0xdb4 <vfprintf+0x78>
     daa:	b6 01       	movw	r22, r12
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
     db2:	e7 cf       	rjmp	.-50     	; 0xd82 <vfprintf+0x46>
     db4:	91 2c       	mov	r9, r1
     db6:	21 2c       	mov	r2, r1
     db8:	31 2c       	mov	r3, r1
     dba:	ff e1       	ldi	r31, 0x1F	; 31
     dbc:	f3 15       	cp	r31, r3
     dbe:	d8 f0       	brcs	.+54     	; 0xdf6 <vfprintf+0xba>
     dc0:	8b 32       	cpi	r24, 0x2B	; 43
     dc2:	79 f0       	breq	.+30     	; 0xde2 <vfprintf+0xa6>
     dc4:	38 f4       	brcc	.+14     	; 0xdd4 <vfprintf+0x98>
     dc6:	80 32       	cpi	r24, 0x20	; 32
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0xac>
     dca:	83 32       	cpi	r24, 0x23	; 35
     dcc:	a1 f4       	brne	.+40     	; 0xdf6 <vfprintf+0xba>
     dce:	23 2d       	mov	r18, r3
     dd0:	20 61       	ori	r18, 0x10	; 16
     dd2:	1d c0       	rjmp	.+58     	; 0xe0e <vfprintf+0xd2>
     dd4:	8d 32       	cpi	r24, 0x2D	; 45
     dd6:	61 f0       	breq	.+24     	; 0xdf0 <vfprintf+0xb4>
     dd8:	80 33       	cpi	r24, 0x30	; 48
     dda:	69 f4       	brne	.+26     	; 0xdf6 <vfprintf+0xba>
     ddc:	23 2d       	mov	r18, r3
     dde:	21 60       	ori	r18, 0x01	; 1
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <vfprintf+0xd2>
     de2:	83 2d       	mov	r24, r3
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	38 2e       	mov	r3, r24
     de8:	e3 2d       	mov	r30, r3
     dea:	e4 60       	ori	r30, 0x04	; 4
     dec:	3e 2e       	mov	r3, r30
     dee:	2a c0       	rjmp	.+84     	; 0xe44 <vfprintf+0x108>
     df0:	f3 2d       	mov	r31, r3
     df2:	f8 60       	ori	r31, 0x08	; 8
     df4:	1d c0       	rjmp	.+58     	; 0xe30 <vfprintf+0xf4>
     df6:	37 fc       	sbrc	r3, 7
     df8:	2d c0       	rjmp	.+90     	; 0xe54 <vfprintf+0x118>
     dfa:	20 ed       	ldi	r18, 0xD0	; 208
     dfc:	28 0f       	add	r18, r24
     dfe:	2a 30       	cpi	r18, 0x0A	; 10
     e00:	40 f0       	brcs	.+16     	; 0xe12 <vfprintf+0xd6>
     e02:	8e 32       	cpi	r24, 0x2E	; 46
     e04:	b9 f4       	brne	.+46     	; 0xe34 <vfprintf+0xf8>
     e06:	36 fc       	sbrc	r3, 6
     e08:	81 c1       	rjmp	.+770    	; 0x110c <vfprintf+0x3d0>
     e0a:	23 2d       	mov	r18, r3
     e0c:	20 64       	ori	r18, 0x40	; 64
     e0e:	32 2e       	mov	r3, r18
     e10:	19 c0       	rjmp	.+50     	; 0xe44 <vfprintf+0x108>
     e12:	36 fe       	sbrs	r3, 6
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <vfprintf+0xe6>
     e16:	8a e0       	ldi	r24, 0x0A	; 10
     e18:	98 9e       	mul	r9, r24
     e1a:	20 0d       	add	r18, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	92 2e       	mov	r9, r18
     e20:	11 c0       	rjmp	.+34     	; 0xe44 <vfprintf+0x108>
     e22:	ea e0       	ldi	r30, 0x0A	; 10
     e24:	2e 9e       	mul	r2, r30
     e26:	20 0d       	add	r18, r0
     e28:	11 24       	eor	r1, r1
     e2a:	22 2e       	mov	r2, r18
     e2c:	f3 2d       	mov	r31, r3
     e2e:	f0 62       	ori	r31, 0x20	; 32
     e30:	3f 2e       	mov	r3, r31
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <vfprintf+0x108>
     e34:	8c 36       	cpi	r24, 0x6C	; 108
     e36:	21 f4       	brne	.+8      	; 0xe40 <vfprintf+0x104>
     e38:	83 2d       	mov	r24, r3
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	38 2e       	mov	r3, r24
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x108>
     e40:	88 36       	cpi	r24, 0x68	; 104
     e42:	41 f4       	brne	.+16     	; 0xe54 <vfprintf+0x118>
     e44:	f7 01       	movw	r30, r14
     e46:	93 fd       	sbrc	r25, 3
     e48:	85 91       	lpm	r24, Z+
     e4a:	93 ff       	sbrs	r25, 3
     e4c:	81 91       	ld	r24, Z+
     e4e:	7f 01       	movw	r14, r30
     e50:	81 11       	cpse	r24, r1
     e52:	b3 cf       	rjmp	.-154    	; 0xdba <vfprintf+0x7e>
     e54:	98 2f       	mov	r25, r24
     e56:	9f 7d       	andi	r25, 0xDF	; 223
     e58:	95 54       	subi	r25, 0x45	; 69
     e5a:	93 30       	cpi	r25, 0x03	; 3
     e5c:	28 f4       	brcc	.+10     	; 0xe68 <vfprintf+0x12c>
     e5e:	0c 5f       	subi	r16, 0xFC	; 252
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	9f e3       	ldi	r25, 0x3F	; 63
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <vfprintf+0x146>
     e68:	83 36       	cpi	r24, 0x63	; 99
     e6a:	31 f0       	breq	.+12     	; 0xe78 <vfprintf+0x13c>
     e6c:	83 37       	cpi	r24, 0x73	; 115
     e6e:	71 f0       	breq	.+28     	; 0xe8c <vfprintf+0x150>
     e70:	83 35       	cpi	r24, 0x53	; 83
     e72:	09 f0       	breq	.+2      	; 0xe76 <vfprintf+0x13a>
     e74:	59 c0       	rjmp	.+178    	; 0xf28 <vfprintf+0x1ec>
     e76:	21 c0       	rjmp	.+66     	; 0xeba <vfprintf+0x17e>
     e78:	f8 01       	movw	r30, r16
     e7a:	80 81       	ld	r24, Z
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	0e 5f       	subi	r16, 0xFE	; 254
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	88 24       	eor	r8, r8
     e84:	83 94       	inc	r8
     e86:	91 2c       	mov	r9, r1
     e88:	53 01       	movw	r10, r6
     e8a:	13 c0       	rjmp	.+38     	; 0xeb2 <vfprintf+0x176>
     e8c:	28 01       	movw	r4, r16
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	4f 0e       	add	r4, r31
     e92:	51 1c       	adc	r5, r1
     e94:	f8 01       	movw	r30, r16
     e96:	a0 80       	ld	r10, Z
     e98:	b1 80       	ldd	r11, Z+1	; 0x01
     e9a:	36 fe       	sbrs	r3, 6
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <vfprintf+0x168>
     e9e:	69 2d       	mov	r22, r9
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <vfprintf+0x16c>
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	c5 01       	movw	r24, r10
     eaa:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <strnlen>
     eae:	4c 01       	movw	r8, r24
     eb0:	82 01       	movw	r16, r4
     eb2:	f3 2d       	mov	r31, r3
     eb4:	ff 77       	andi	r31, 0x7F	; 127
     eb6:	3f 2e       	mov	r3, r31
     eb8:	16 c0       	rjmp	.+44     	; 0xee6 <vfprintf+0x1aa>
     eba:	28 01       	movw	r4, r16
     ebc:	22 e0       	ldi	r18, 0x02	; 2
     ebe:	42 0e       	add	r4, r18
     ec0:	51 1c       	adc	r5, r1
     ec2:	f8 01       	movw	r30, r16
     ec4:	a0 80       	ld	r10, Z
     ec6:	b1 80       	ldd	r11, Z+1	; 0x01
     ec8:	36 fe       	sbrs	r3, 6
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <vfprintf+0x196>
     ecc:	69 2d       	mov	r22, r9
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x19a>
     ed2:	6f ef       	ldi	r22, 0xFF	; 255
     ed4:	7f ef       	ldi	r23, 0xFF	; 255
     ed6:	c5 01       	movw	r24, r10
     ed8:	0e 94 df 09 	call	0x13be	; 0x13be <strnlen_P>
     edc:	4c 01       	movw	r8, r24
     ede:	f3 2d       	mov	r31, r3
     ee0:	f0 68       	ori	r31, 0x80	; 128
     ee2:	3f 2e       	mov	r3, r31
     ee4:	82 01       	movw	r16, r4
     ee6:	33 fc       	sbrc	r3, 3
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <vfprintf+0x1e4>
     eea:	82 2d       	mov	r24, r2
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	88 16       	cp	r8, r24
     ef0:	99 06       	cpc	r9, r25
     ef2:	b0 f4       	brcc	.+44     	; 0xf20 <vfprintf+0x1e4>
     ef4:	b6 01       	movw	r22, r12
     ef6:	80 e2       	ldi	r24, 0x20	; 32
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
     efe:	2a 94       	dec	r2
     f00:	f4 cf       	rjmp	.-24     	; 0xeea <vfprintf+0x1ae>
     f02:	f5 01       	movw	r30, r10
     f04:	37 fc       	sbrc	r3, 7
     f06:	85 91       	lpm	r24, Z+
     f08:	37 fe       	sbrs	r3, 7
     f0a:	81 91       	ld	r24, Z+
     f0c:	5f 01       	movw	r10, r30
     f0e:	b6 01       	movw	r22, r12
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
     f16:	21 10       	cpse	r2, r1
     f18:	2a 94       	dec	r2
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	82 1a       	sub	r8, r18
     f1e:	91 08       	sbc	r9, r1
     f20:	81 14       	cp	r8, r1
     f22:	91 04       	cpc	r9, r1
     f24:	71 f7       	brne	.-36     	; 0xf02 <vfprintf+0x1c6>
     f26:	e8 c0       	rjmp	.+464    	; 0x10f8 <vfprintf+0x3bc>
     f28:	84 36       	cpi	r24, 0x64	; 100
     f2a:	11 f0       	breq	.+4      	; 0xf30 <vfprintf+0x1f4>
     f2c:	89 36       	cpi	r24, 0x69	; 105
     f2e:	41 f5       	brne	.+80     	; 0xf80 <vfprintf+0x244>
     f30:	f8 01       	movw	r30, r16
     f32:	37 fe       	sbrs	r3, 7
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <vfprintf+0x208>
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	0c 5f       	subi	r16, 0xFC	; 252
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <vfprintf+0x218>
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	07 2e       	mov	r0, r23
     f4a:	00 0c       	add	r0, r0
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 5f       	subi	r16, 0xFE	; 254
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	f3 2d       	mov	r31, r3
     f56:	ff 76       	andi	r31, 0x6F	; 111
     f58:	3f 2e       	mov	r3, r31
     f5a:	97 ff       	sbrs	r25, 7
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <vfprintf+0x234>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	f0 68       	ori	r31, 0x80	; 128
     f6e:	3f 2e       	mov	r3, r31
     f70:	2a e0       	ldi	r18, 0x0A	; 10
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a3 01       	movw	r20, r6
     f76:	0e 94 38 0a 	call	0x1470	; 0x1470 <__ultoa_invert>
     f7a:	88 2e       	mov	r8, r24
     f7c:	86 18       	sub	r8, r6
     f7e:	45 c0       	rjmp	.+138    	; 0x100a <vfprintf+0x2ce>
     f80:	85 37       	cpi	r24, 0x75	; 117
     f82:	31 f4       	brne	.+12     	; 0xf90 <vfprintf+0x254>
     f84:	23 2d       	mov	r18, r3
     f86:	2f 7e       	andi	r18, 0xEF	; 239
     f88:	b2 2e       	mov	r11, r18
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	25 c0       	rjmp	.+74     	; 0xfda <vfprintf+0x29e>
     f90:	93 2d       	mov	r25, r3
     f92:	99 7f       	andi	r25, 0xF9	; 249
     f94:	b9 2e       	mov	r11, r25
     f96:	8f 36       	cpi	r24, 0x6F	; 111
     f98:	c1 f0       	breq	.+48     	; 0xfca <vfprintf+0x28e>
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <vfprintf+0x266>
     f9c:	88 35       	cpi	r24, 0x58	; 88
     f9e:	79 f0       	breq	.+30     	; 0xfbe <vfprintf+0x282>
     fa0:	b5 c0       	rjmp	.+362    	; 0x110c <vfprintf+0x3d0>
     fa2:	80 37       	cpi	r24, 0x70	; 112
     fa4:	19 f0       	breq	.+6      	; 0xfac <vfprintf+0x270>
     fa6:	88 37       	cpi	r24, 0x78	; 120
     fa8:	21 f0       	breq	.+8      	; 0xfb2 <vfprintf+0x276>
     faa:	b0 c0       	rjmp	.+352    	; 0x110c <vfprintf+0x3d0>
     fac:	e9 2f       	mov	r30, r25
     fae:	e0 61       	ori	r30, 0x10	; 16
     fb0:	be 2e       	mov	r11, r30
     fb2:	b4 fe       	sbrs	r11, 4
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <vfprintf+0x294>
     fb6:	fb 2d       	mov	r31, r11
     fb8:	f4 60       	ori	r31, 0x04	; 4
     fba:	bf 2e       	mov	r11, r31
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <vfprintf+0x294>
     fbe:	34 fe       	sbrs	r3, 4
     fc0:	0a c0       	rjmp	.+20     	; 0xfd6 <vfprintf+0x29a>
     fc2:	29 2f       	mov	r18, r25
     fc4:	26 60       	ori	r18, 0x06	; 6
     fc6:	b2 2e       	mov	r11, r18
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <vfprintf+0x29a>
     fca:	28 e0       	ldi	r18, 0x08	; 8
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	05 c0       	rjmp	.+10     	; 0xfda <vfprintf+0x29e>
     fd0:	20 e1       	ldi	r18, 0x10	; 16
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <vfprintf+0x29e>
     fd6:	20 e1       	ldi	r18, 0x10	; 16
     fd8:	32 e0       	ldi	r19, 0x02	; 2
     fda:	f8 01       	movw	r30, r16
     fdc:	b7 fe       	sbrs	r11, 7
     fde:	07 c0       	rjmp	.+14     	; 0xfee <vfprintf+0x2b2>
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	0c 5f       	subi	r16, 0xFC	; 252
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	06 c0       	rjmp	.+12     	; 0xffa <vfprintf+0x2be>
     fee:	60 81       	ld	r22, Z
     ff0:	71 81       	ldd	r23, Z+1	; 0x01
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 5f       	subi	r16, 0xFE	; 254
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	a3 01       	movw	r20, r6
     ffc:	0e 94 38 0a 	call	0x1470	; 0x1470 <__ultoa_invert>
    1000:	88 2e       	mov	r8, r24
    1002:	86 18       	sub	r8, r6
    1004:	fb 2d       	mov	r31, r11
    1006:	ff 77       	andi	r31, 0x7F	; 127
    1008:	3f 2e       	mov	r3, r31
    100a:	36 fe       	sbrs	r3, 6
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <vfprintf+0x2ec>
    100e:	23 2d       	mov	r18, r3
    1010:	2e 7f       	andi	r18, 0xFE	; 254
    1012:	a2 2e       	mov	r10, r18
    1014:	89 14       	cp	r8, r9
    1016:	58 f4       	brcc	.+22     	; 0x102e <vfprintf+0x2f2>
    1018:	34 fe       	sbrs	r3, 4
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <vfprintf+0x2f6>
    101c:	32 fc       	sbrc	r3, 2
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <vfprintf+0x2f6>
    1020:	83 2d       	mov	r24, r3
    1022:	8e 7e       	andi	r24, 0xEE	; 238
    1024:	a8 2e       	mov	r10, r24
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <vfprintf+0x2f6>
    1028:	b8 2c       	mov	r11, r8
    102a:	a3 2c       	mov	r10, r3
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x2f8>
    102e:	b8 2c       	mov	r11, r8
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x2f8>
    1032:	b9 2c       	mov	r11, r9
    1034:	a4 fe       	sbrs	r10, 4
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <vfprintf+0x31a>
    1038:	fe 01       	movw	r30, r28
    103a:	e8 0d       	add	r30, r8
    103c:	f1 1d       	adc	r31, r1
    103e:	80 81       	ld	r24, Z
    1040:	80 33       	cpi	r24, 0x30	; 48
    1042:	21 f4       	brne	.+8      	; 0x104c <vfprintf+0x310>
    1044:	9a 2d       	mov	r25, r10
    1046:	99 7e       	andi	r25, 0xE9	; 233
    1048:	a9 2e       	mov	r10, r25
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x322>
    104c:	a2 fe       	sbrs	r10, 2
    104e:	06 c0       	rjmp	.+12     	; 0x105c <vfprintf+0x320>
    1050:	b3 94       	inc	r11
    1052:	b3 94       	inc	r11
    1054:	04 c0       	rjmp	.+8      	; 0x105e <vfprintf+0x322>
    1056:	8a 2d       	mov	r24, r10
    1058:	86 78       	andi	r24, 0x86	; 134
    105a:	09 f0       	breq	.+2      	; 0x105e <vfprintf+0x322>
    105c:	b3 94       	inc	r11
    105e:	a3 fc       	sbrc	r10, 3
    1060:	11 c0       	rjmp	.+34     	; 0x1084 <vfprintf+0x348>
    1062:	a0 fe       	sbrs	r10, 0
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <vfprintf+0x336>
    1066:	b2 14       	cp	r11, r2
    1068:	88 f4       	brcc	.+34     	; 0x108c <vfprintf+0x350>
    106a:	28 0c       	add	r2, r8
    106c:	92 2c       	mov	r9, r2
    106e:	9b 18       	sub	r9, r11
    1070:	0e c0       	rjmp	.+28     	; 0x108e <vfprintf+0x352>
    1072:	b2 14       	cp	r11, r2
    1074:	60 f4       	brcc	.+24     	; 0x108e <vfprintf+0x352>
    1076:	b6 01       	movw	r22, r12
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    1080:	b3 94       	inc	r11
    1082:	f7 cf       	rjmp	.-18     	; 0x1072 <vfprintf+0x336>
    1084:	b2 14       	cp	r11, r2
    1086:	18 f4       	brcc	.+6      	; 0x108e <vfprintf+0x352>
    1088:	2b 18       	sub	r2, r11
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <vfprintf+0x354>
    108c:	98 2c       	mov	r9, r8
    108e:	21 2c       	mov	r2, r1
    1090:	a4 fe       	sbrs	r10, 4
    1092:	10 c0       	rjmp	.+32     	; 0x10b4 <vfprintf+0x378>
    1094:	b6 01       	movw	r22, r12
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    109e:	a2 fe       	sbrs	r10, 2
    10a0:	17 c0       	rjmp	.+46     	; 0x10d0 <vfprintf+0x394>
    10a2:	a1 fc       	sbrc	r10, 1
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <vfprintf+0x370>
    10a6:	88 e7       	ldi	r24, 0x78	; 120
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <vfprintf+0x374>
    10ac:	88 e5       	ldi	r24, 0x58	; 88
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b6 01       	movw	r22, r12
    10b2:	0c c0       	rjmp	.+24     	; 0x10cc <vfprintf+0x390>
    10b4:	8a 2d       	mov	r24, r10
    10b6:	86 78       	andi	r24, 0x86	; 134
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <vfprintf+0x394>
    10ba:	a1 fe       	sbrs	r10, 1
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x386>
    10be:	8b e2       	ldi	r24, 0x2B	; 43
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <vfprintf+0x388>
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	a7 fc       	sbrc	r10, 7
    10c6:	8d e2       	ldi	r24, 0x2D	; 45
    10c8:	b6 01       	movw	r22, r12
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    10d0:	89 14       	cp	r8, r9
    10d2:	38 f4       	brcc	.+14     	; 0x10e2 <vfprintf+0x3a6>
    10d4:	b6 01       	movw	r22, r12
    10d6:	80 e3       	ldi	r24, 0x30	; 48
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    10de:	9a 94       	dec	r9
    10e0:	f7 cf       	rjmp	.-18     	; 0x10d0 <vfprintf+0x394>
    10e2:	8a 94       	dec	r8
    10e4:	f3 01       	movw	r30, r6
    10e6:	e8 0d       	add	r30, r8
    10e8:	f1 1d       	adc	r31, r1
    10ea:	80 81       	ld	r24, Z
    10ec:	b6 01       	movw	r22, r12
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    10f4:	81 10       	cpse	r8, r1
    10f6:	f5 cf       	rjmp	.-22     	; 0x10e2 <vfprintf+0x3a6>
    10f8:	22 20       	and	r2, r2
    10fa:	09 f4       	brne	.+2      	; 0x10fe <vfprintf+0x3c2>
    10fc:	42 ce       	rjmp	.-892    	; 0xd82 <vfprintf+0x46>
    10fe:	b6 01       	movw	r22, r12
    1100:	80 e2       	ldi	r24, 0x20	; 32
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fputc>
    1108:	2a 94       	dec	r2
    110a:	f6 cf       	rjmp	.-20     	; 0x10f8 <vfprintf+0x3bc>
    110c:	f6 01       	movw	r30, r12
    110e:	86 81       	ldd	r24, Z+6	; 0x06
    1110:	97 81       	ldd	r25, Z+7	; 0x07
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <vfprintf+0x3dc>
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	9f ef       	ldi	r25, 0xFF	; 255
    1118:	2b 96       	adiw	r28, 0x0b	; 11
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	7f 90       	pop	r7
    1138:	6f 90       	pop	r6
    113a:	5f 90       	pop	r5
    113c:	4f 90       	pop	r4
    113e:	3f 90       	pop	r3
    1140:	2f 90       	pop	r2
    1142:	08 95       	ret

00001144 <calloc>:
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	86 9f       	mul	r24, r22
    114e:	80 01       	movw	r16, r0
    1150:	87 9f       	mul	r24, r23
    1152:	10 0d       	add	r17, r0
    1154:	96 9f       	mul	r25, r22
    1156:	10 0d       	add	r17, r0
    1158:	11 24       	eor	r1, r1
    115a:	c8 01       	movw	r24, r16
    115c:	0e 94 be 08 	call	0x117c	; 0x117c <malloc>
    1160:	ec 01       	movw	r28, r24
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	29 f0       	breq	.+10     	; 0x1170 <calloc+0x2c>
    1166:	a8 01       	movw	r20, r16
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <memset>
    1170:	ce 01       	movw	r24, r28
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	08 95       	ret

0000117c <malloc>:
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	91 05       	cpc	r25, r1
    1188:	10 f4       	brcc	.+4      	; 0x118e <malloc+0x12>
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <__flp>
    1192:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <__flp+0x1>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	30 97       	sbiw	r30, 0x00	; 0
    11a0:	19 f1       	breq	.+70     	; 0x11e8 <malloc+0x6c>
    11a2:	40 81       	ld	r20, Z
    11a4:	51 81       	ldd	r21, Z+1	; 0x01
    11a6:	02 81       	ldd	r16, Z+2	; 0x02
    11a8:	13 81       	ldd	r17, Z+3	; 0x03
    11aa:	48 17       	cp	r20, r24
    11ac:	59 07       	cpc	r21, r25
    11ae:	c8 f0       	brcs	.+50     	; 0x11e2 <malloc+0x66>
    11b0:	84 17       	cp	r24, r20
    11b2:	95 07       	cpc	r25, r21
    11b4:	69 f4       	brne	.+26     	; 0x11d0 <malloc+0x54>
    11b6:	10 97       	sbiw	r26, 0x00	; 0
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <malloc+0x4a>
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	0c 93       	st	X, r16
    11be:	12 97       	sbiw	r26, 0x02	; 2
    11c0:	13 96       	adiw	r26, 0x03	; 3
    11c2:	1c 93       	st	X, r17
    11c4:	27 c0       	rjmp	.+78     	; 0x1214 <malloc+0x98>
    11c6:	00 93 52 20 	sts	0x2052, r16	; 0x802052 <__flp>
    11ca:	10 93 53 20 	sts	0x2053, r17	; 0x802053 <__flp+0x1>
    11ce:	22 c0       	rjmp	.+68     	; 0x1214 <malloc+0x98>
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	19 f0       	breq	.+6      	; 0x11dc <malloc+0x60>
    11d6:	42 17       	cp	r20, r18
    11d8:	53 07       	cpc	r21, r19
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <malloc+0x66>
    11dc:	9a 01       	movw	r18, r20
    11de:	bd 01       	movw	r22, r26
    11e0:	ef 01       	movw	r28, r30
    11e2:	df 01       	movw	r26, r30
    11e4:	f8 01       	movw	r30, r16
    11e6:	db cf       	rjmp	.-74     	; 0x119e <malloc+0x22>
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	f9 f0       	breq	.+62     	; 0x122c <malloc+0xb0>
    11ee:	28 1b       	sub	r18, r24
    11f0:	39 0b       	sbc	r19, r25
    11f2:	24 30       	cpi	r18, 0x04	; 4
    11f4:	31 05       	cpc	r19, r1
    11f6:	80 f4       	brcc	.+32     	; 0x1218 <malloc+0x9c>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	61 15       	cp	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	21 f0       	breq	.+8      	; 0x120a <malloc+0x8e>
    1202:	fb 01       	movw	r30, r22
    1204:	82 83       	std	Z+2, r24	; 0x02
    1206:	93 83       	std	Z+3, r25	; 0x03
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <malloc+0x96>
    120a:	80 93 52 20 	sts	0x2052, r24	; 0x802052 <__flp>
    120e:	90 93 53 20 	sts	0x2053, r25	; 0x802053 <__flp+0x1>
    1212:	fe 01       	movw	r30, r28
    1214:	32 96       	adiw	r30, 0x02	; 2
    1216:	44 c0       	rjmp	.+136    	; 0x12a0 <malloc+0x124>
    1218:	fe 01       	movw	r30, r28
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	81 93       	st	Z+, r24
    1220:	91 93       	st	Z+, r25
    1222:	22 50       	subi	r18, 0x02	; 2
    1224:	31 09       	sbc	r19, r1
    1226:	28 83       	st	Y, r18
    1228:	39 83       	std	Y+1, r19	; 0x01
    122a:	3a c0       	rjmp	.+116    	; 0x12a0 <malloc+0x124>
    122c:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <__brkval>
    1230:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <__brkval+0x1>
    1234:	23 2b       	or	r18, r19
    1236:	41 f4       	brne	.+16     	; 0x1248 <malloc+0xcc>
    1238:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    123c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1240:	20 93 50 20 	sts	0x2050, r18	; 0x802050 <__brkval>
    1244:	30 93 51 20 	sts	0x2051, r19	; 0x802051 <__brkval+0x1>
    1248:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    124c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	41 f4       	brne	.+16     	; 0x1266 <malloc+0xea>
    1256:	2d b7       	in	r18, 0x3d	; 61
    1258:	3e b7       	in	r19, 0x3e	; 62
    125a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    125e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1262:	24 1b       	sub	r18, r20
    1264:	35 0b       	sbc	r19, r21
    1266:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <__brkval>
    126a:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <__brkval+0x1>
    126e:	e2 17       	cp	r30, r18
    1270:	f3 07       	cpc	r31, r19
    1272:	a0 f4       	brcc	.+40     	; 0x129c <malloc+0x120>
    1274:	2e 1b       	sub	r18, r30
    1276:	3f 0b       	sbc	r19, r31
    1278:	28 17       	cp	r18, r24
    127a:	39 07       	cpc	r19, r25
    127c:	78 f0       	brcs	.+30     	; 0x129c <malloc+0x120>
    127e:	ac 01       	movw	r20, r24
    1280:	4e 5f       	subi	r20, 0xFE	; 254
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	24 17       	cp	r18, r20
    1286:	35 07       	cpc	r19, r21
    1288:	48 f0       	brcs	.+18     	; 0x129c <malloc+0x120>
    128a:	4e 0f       	add	r20, r30
    128c:	5f 1f       	adc	r21, r31
    128e:	40 93 50 20 	sts	0x2050, r20	; 0x802050 <__brkval>
    1292:	50 93 51 20 	sts	0x2051, r21	; 0x802051 <__brkval+0x1>
    1296:	81 93       	st	Z+, r24
    1298:	91 93       	st	Z+, r25
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <malloc+0x124>
    129c:	e0 e0       	ldi	r30, 0x00	; 0
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	cf 01       	movw	r24, r30
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <free>:
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <free+0xa>
    12b4:	81 c0       	rjmp	.+258    	; 0x13b8 <free+0x10c>
    12b6:	fc 01       	movw	r30, r24
    12b8:	32 97       	sbiw	r30, 0x02	; 2
    12ba:	12 82       	std	Z+2, r1	; 0x02
    12bc:	13 82       	std	Z+3, r1	; 0x03
    12be:	a0 91 52 20 	lds	r26, 0x2052	; 0x802052 <__flp>
    12c2:	b0 91 53 20 	lds	r27, 0x2053	; 0x802053 <__flp+0x1>
    12c6:	10 97       	sbiw	r26, 0x00	; 0
    12c8:	81 f4       	brne	.+32     	; 0x12ea <free+0x3e>
    12ca:	20 81       	ld	r18, Z
    12cc:	31 81       	ldd	r19, Z+1	; 0x01
    12ce:	82 0f       	add	r24, r18
    12d0:	93 1f       	adc	r25, r19
    12d2:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <__brkval>
    12d6:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <__brkval+0x1>
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	51 f5       	brne	.+84     	; 0x1334 <free+0x88>
    12e0:	e0 93 50 20 	sts	0x2050, r30	; 0x802050 <__brkval>
    12e4:	f0 93 51 20 	sts	0x2051, r31	; 0x802051 <__brkval+0x1>
    12e8:	67 c0       	rjmp	.+206    	; 0x13b8 <free+0x10c>
    12ea:	ed 01       	movw	r28, r26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	ce 17       	cp	r28, r30
    12f2:	df 07       	cpc	r29, r31
    12f4:	40 f4       	brcc	.+16     	; 0x1306 <free+0x5a>
    12f6:	4a 81       	ldd	r20, Y+2	; 0x02
    12f8:	5b 81       	ldd	r21, Y+3	; 0x03
    12fa:	9e 01       	movw	r18, r28
    12fc:	41 15       	cp	r20, r1
    12fe:	51 05       	cpc	r21, r1
    1300:	f1 f0       	breq	.+60     	; 0x133e <free+0x92>
    1302:	ea 01       	movw	r28, r20
    1304:	f5 cf       	rjmp	.-22     	; 0x12f0 <free+0x44>
    1306:	c2 83       	std	Z+2, r28	; 0x02
    1308:	d3 83       	std	Z+3, r29	; 0x03
    130a:	40 81       	ld	r20, Z
    130c:	51 81       	ldd	r21, Z+1	; 0x01
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	c8 17       	cp	r28, r24
    1314:	d9 07       	cpc	r29, r25
    1316:	59 f4       	brne	.+22     	; 0x132e <free+0x82>
    1318:	88 81       	ld	r24, Y
    131a:	99 81       	ldd	r25, Y+1	; 0x01
    131c:	84 0f       	add	r24, r20
    131e:	95 1f       	adc	r25, r21
    1320:	02 96       	adiw	r24, 0x02	; 2
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	82 83       	std	Z+2, r24	; 0x02
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	21 15       	cp	r18, r1
    1330:	31 05       	cpc	r19, r1
    1332:	29 f4       	brne	.+10     	; 0x133e <free+0x92>
    1334:	e0 93 52 20 	sts	0x2052, r30	; 0x802052 <__flp>
    1338:	f0 93 53 20 	sts	0x2053, r31	; 0x802053 <__flp+0x1>
    133c:	3d c0       	rjmp	.+122    	; 0x13b8 <free+0x10c>
    133e:	e9 01       	movw	r28, r18
    1340:	ea 83       	std	Y+2, r30	; 0x02
    1342:	fb 83       	std	Y+3, r31	; 0x03
    1344:	49 91       	ld	r20, Y+
    1346:	59 91       	ld	r21, Y+
    1348:	c4 0f       	add	r28, r20
    134a:	d5 1f       	adc	r29, r21
    134c:	ec 17       	cp	r30, r28
    134e:	fd 07       	cpc	r31, r29
    1350:	61 f4       	brne	.+24     	; 0x136a <free+0xbe>
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	84 0f       	add	r24, r20
    1358:	95 1f       	adc	r25, r21
    135a:	02 96       	adiw	r24, 0x02	; 2
    135c:	e9 01       	movw	r28, r18
    135e:	88 83       	st	Y, r24
    1360:	99 83       	std	Y+1, r25	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	e0 e0       	ldi	r30, 0x00	; 0
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	12 96       	adiw	r26, 0x02	; 2
    1370:	8d 91       	ld	r24, X+
    1372:	9c 91       	ld	r25, X
    1374:	13 97       	sbiw	r26, 0x03	; 3
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	19 f0       	breq	.+6      	; 0x1380 <free+0xd4>
    137a:	fd 01       	movw	r30, r26
    137c:	dc 01       	movw	r26, r24
    137e:	f7 cf       	rjmp	.-18     	; 0x136e <free+0xc2>
    1380:	8d 91       	ld	r24, X+
    1382:	9c 91       	ld	r25, X
    1384:	11 97       	sbiw	r26, 0x01	; 1
    1386:	9d 01       	movw	r18, r26
    1388:	2e 5f       	subi	r18, 0xFE	; 254
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <__brkval>
    1394:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <__brkval+0x1>
    1398:	28 17       	cp	r18, r24
    139a:	39 07       	cpc	r19, r25
    139c:	69 f4       	brne	.+26     	; 0x13b8 <free+0x10c>
    139e:	30 97       	sbiw	r30, 0x00	; 0
    13a0:	29 f4       	brne	.+10     	; 0x13ac <free+0x100>
    13a2:	10 92 52 20 	sts	0x2052, r1	; 0x802052 <__flp>
    13a6:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <__flp+0x1>
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <free+0x104>
    13ac:	12 82       	std	Z+2, r1	; 0x02
    13ae:	13 82       	std	Z+3, r1	; 0x03
    13b0:	a0 93 50 20 	sts	0x2050, r26	; 0x802050 <__brkval>
    13b4:	b0 93 51 20 	sts	0x2051, r27	; 0x802051 <__brkval+0x1>
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <strnlen_P>:
    13be:	fc 01       	movw	r30, r24
    13c0:	05 90       	lpm	r0, Z+
    13c2:	61 50       	subi	r22, 0x01	; 1
    13c4:	70 40       	sbci	r23, 0x00	; 0
    13c6:	01 10       	cpse	r0, r1
    13c8:	d8 f7       	brcc	.-10     	; 0x13c0 <strnlen_P+0x2>
    13ca:	80 95       	com	r24
    13cc:	90 95       	com	r25
    13ce:	8e 0f       	add	r24, r30
    13d0:	9f 1f       	adc	r25, r31
    13d2:	08 95       	ret

000013d4 <memset>:
    13d4:	dc 01       	movw	r26, r24
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <memset+0x6>
    13d8:	6d 93       	st	X+, r22
    13da:	41 50       	subi	r20, 0x01	; 1
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	e0 f7       	brcc	.-8      	; 0x13d8 <memset+0x4>
    13e0:	08 95       	ret

000013e2 <strnlen>:
    13e2:	fc 01       	movw	r30, r24
    13e4:	61 50       	subi	r22, 0x01	; 1
    13e6:	70 40       	sbci	r23, 0x00	; 0
    13e8:	01 90       	ld	r0, Z+
    13ea:	01 10       	cpse	r0, r1
    13ec:	d8 f7       	brcc	.-10     	; 0x13e4 <strnlen+0x2>
    13ee:	80 95       	com	r24
    13f0:	90 95       	com	r25
    13f2:	8e 0f       	add	r24, r30
    13f4:	9f 1f       	adc	r25, r31
    13f6:	08 95       	ret

000013f8 <fputc>:
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	fb 01       	movw	r30, r22
    1402:	23 81       	ldd	r18, Z+3	; 0x03
    1404:	21 fd       	sbrc	r18, 1
    1406:	03 c0       	rjmp	.+6      	; 0x140e <fputc+0x16>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	9f ef       	ldi	r25, 0xFF	; 255
    140c:	2c c0       	rjmp	.+88     	; 0x1466 <fputc+0x6e>
    140e:	22 ff       	sbrs	r18, 2
    1410:	16 c0       	rjmp	.+44     	; 0x143e <fputc+0x46>
    1412:	46 81       	ldd	r20, Z+6	; 0x06
    1414:	57 81       	ldd	r21, Z+7	; 0x07
    1416:	24 81       	ldd	r18, Z+4	; 0x04
    1418:	35 81       	ldd	r19, Z+5	; 0x05
    141a:	42 17       	cp	r20, r18
    141c:	53 07       	cpc	r21, r19
    141e:	44 f4       	brge	.+16     	; 0x1430 <fputc+0x38>
    1420:	a0 81       	ld	r26, Z
    1422:	b1 81       	ldd	r27, Z+1	; 0x01
    1424:	9d 01       	movw	r18, r26
    1426:	2f 5f       	subi	r18, 0xFF	; 255
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	20 83       	st	Z, r18
    142c:	31 83       	std	Z+1, r19	; 0x01
    142e:	8c 93       	st	X, r24
    1430:	26 81       	ldd	r18, Z+6	; 0x06
    1432:	37 81       	ldd	r19, Z+7	; 0x07
    1434:	2f 5f       	subi	r18, 0xFF	; 255
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	26 83       	std	Z+6, r18	; 0x06
    143a:	37 83       	std	Z+7, r19	; 0x07
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <fputc+0x6e>
    143e:	8b 01       	movw	r16, r22
    1440:	ec 01       	movw	r28, r24
    1442:	fb 01       	movw	r30, r22
    1444:	00 84       	ldd	r0, Z+8	; 0x08
    1446:	f1 85       	ldd	r31, Z+9	; 0x09
    1448:	e0 2d       	mov	r30, r0
    144a:	19 95       	eicall
    144c:	89 2b       	or	r24, r25
    144e:	e1 f6       	brne	.-72     	; 0x1408 <fputc+0x10>
    1450:	d8 01       	movw	r26, r16
    1452:	16 96       	adiw	r26, 0x06	; 6
    1454:	8d 91       	ld	r24, X+
    1456:	9c 91       	ld	r25, X
    1458:	17 97       	sbiw	r26, 0x07	; 7
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	16 96       	adiw	r26, 0x06	; 6
    145e:	8d 93       	st	X+, r24
    1460:	9c 93       	st	X, r25
    1462:	17 97       	sbiw	r26, 0x07	; 7
    1464:	ce 01       	movw	r24, r28
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <__ultoa_invert>:
    1470:	fa 01       	movw	r30, r20
    1472:	aa 27       	eor	r26, r26
    1474:	28 30       	cpi	r18, 0x08	; 8
    1476:	51 f1       	breq	.+84     	; 0x14cc <__ultoa_invert+0x5c>
    1478:	20 31       	cpi	r18, 0x10	; 16
    147a:	81 f1       	breq	.+96     	; 0x14dc <__ultoa_invert+0x6c>
    147c:	e8 94       	clt
    147e:	6f 93       	push	r22
    1480:	6e 7f       	andi	r22, 0xFE	; 254
    1482:	6e 5f       	subi	r22, 0xFE	; 254
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	af 4f       	sbci	r26, 0xFF	; 255
    148c:	b1 e0       	ldi	r27, 0x01	; 1
    148e:	3e d0       	rcall	.+124    	; 0x150c <__ultoa_invert+0x9c>
    1490:	b4 e0       	ldi	r27, 0x04	; 4
    1492:	3c d0       	rcall	.+120    	; 0x150c <__ultoa_invert+0x9c>
    1494:	67 0f       	add	r22, r23
    1496:	78 1f       	adc	r23, r24
    1498:	89 1f       	adc	r24, r25
    149a:	9a 1f       	adc	r25, r26
    149c:	a1 1d       	adc	r26, r1
    149e:	68 0f       	add	r22, r24
    14a0:	79 1f       	adc	r23, r25
    14a2:	8a 1f       	adc	r24, r26
    14a4:	91 1d       	adc	r25, r1
    14a6:	a1 1d       	adc	r26, r1
    14a8:	6a 0f       	add	r22, r26
    14aa:	71 1d       	adc	r23, r1
    14ac:	81 1d       	adc	r24, r1
    14ae:	91 1d       	adc	r25, r1
    14b0:	a1 1d       	adc	r26, r1
    14b2:	20 d0       	rcall	.+64     	; 0x14f4 <__ultoa_invert+0x84>
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <__ultoa_invert+0x48>
    14b6:	68 94       	set
    14b8:	3f 91       	pop	r19
    14ba:	2a e0       	ldi	r18, 0x0A	; 10
    14bc:	26 9f       	mul	r18, r22
    14be:	11 24       	eor	r1, r1
    14c0:	30 19       	sub	r19, r0
    14c2:	30 5d       	subi	r19, 0xD0	; 208
    14c4:	31 93       	st	Z+, r19
    14c6:	de f6       	brtc	.-74     	; 0x147e <__ultoa_invert+0xe>
    14c8:	cf 01       	movw	r24, r30
    14ca:	08 95       	ret
    14cc:	46 2f       	mov	r20, r22
    14ce:	47 70       	andi	r20, 0x07	; 7
    14d0:	40 5d       	subi	r20, 0xD0	; 208
    14d2:	41 93       	st	Z+, r20
    14d4:	b3 e0       	ldi	r27, 0x03	; 3
    14d6:	0f d0       	rcall	.+30     	; 0x14f6 <__ultoa_invert+0x86>
    14d8:	c9 f7       	brne	.-14     	; 0x14cc <__ultoa_invert+0x5c>
    14da:	f6 cf       	rjmp	.-20     	; 0x14c8 <__ultoa_invert+0x58>
    14dc:	46 2f       	mov	r20, r22
    14de:	4f 70       	andi	r20, 0x0F	; 15
    14e0:	40 5d       	subi	r20, 0xD0	; 208
    14e2:	4a 33       	cpi	r20, 0x3A	; 58
    14e4:	18 f0       	brcs	.+6      	; 0x14ec <__ultoa_invert+0x7c>
    14e6:	49 5d       	subi	r20, 0xD9	; 217
    14e8:	31 fd       	sbrc	r19, 1
    14ea:	40 52       	subi	r20, 0x20	; 32
    14ec:	41 93       	st	Z+, r20
    14ee:	02 d0       	rcall	.+4      	; 0x14f4 <__ultoa_invert+0x84>
    14f0:	a9 f7       	brne	.-22     	; 0x14dc <__ultoa_invert+0x6c>
    14f2:	ea cf       	rjmp	.-44     	; 0x14c8 <__ultoa_invert+0x58>
    14f4:	b4 e0       	ldi	r27, 0x04	; 4
    14f6:	a6 95       	lsr	r26
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	ba 95       	dec	r27
    1502:	c9 f7       	brne	.-14     	; 0x14f6 <__ultoa_invert+0x86>
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 05       	cpc	r22, r1
    1508:	71 05       	cpc	r23, r1
    150a:	08 95       	ret
    150c:	9b 01       	movw	r18, r22
    150e:	ac 01       	movw	r20, r24
    1510:	0a 2e       	mov	r0, r26
    1512:	06 94       	lsr	r0
    1514:	57 95       	ror	r21
    1516:	47 95       	ror	r20
    1518:	37 95       	ror	r19
    151a:	27 95       	ror	r18
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__ultoa_invert+0xa2>
    1520:	62 0f       	add	r22, r18
    1522:	73 1f       	adc	r23, r19
    1524:	84 1f       	adc	r24, r20
    1526:	95 1f       	adc	r25, r21
    1528:	a0 1d       	adc	r26, r0
    152a:	08 95       	ret

0000152c <_exit>:
    152c:	f8 94       	cli

0000152e <__stop_program>:
    152e:	ff cf       	rjmp	.-2      	; 0x152e <__stop_program>
