
xmega_HDD_controller_get_bode_data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00000f80  00001014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00802012  00802012  00001026  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d7e  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e23  00000000  00000000  00006e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e6  00000000  00000000  0000acb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000b498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004918  00000000  00000000  0000b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028a  00000000  00000000  0000feec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00010176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
   4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
  54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
 200:	11 24       	eor	r1, r1
 202:	1f be       	out	0x3f, r1	; 63
 204:	cf ef       	ldi	r28, 0xFF	; 255
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df e3       	ldi	r29, 0x3F	; 63
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	0c bf       	out	0x3c, r16	; 60
 210:	18 be       	out	0x38, r1	; 56
 212:	19 be       	out	0x39, r1	; 57
 214:	1a be       	out	0x3a, r1	; 58
 216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
 218:	10 e2       	ldi	r17, 0x20	; 32
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b0 e2       	ldi	r27, 0x20	; 32
 21e:	e0 e8       	ldi	r30, 0x80	; 128
 220:	ff e0       	ldi	r31, 0x0F	; 15
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	0b bf       	out	0x3b, r16	; 59
 226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
 228:	07 90       	elpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	a2 31       	cpi	r26, 0x12	; 18
 22e:	b1 07       	cpc	r27, r17
 230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
 232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a2 e1       	ldi	r26, 0x12	; 18
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a2 34       	cpi	r26, 0x42	; 66
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	0e 94 a9 03 	call	0x752	; 0x752 <main>
 248:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_exit>

0000024c <__bad_interrupt>:
 24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
 25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 262:	85 ff       	sbrs	r24, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
 266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	08 b6       	in	r0, 0x38	; 56
 27e:	0f 92       	push	r0
 280:	18 be       	out	0x38, r1	; 56
 282:	09 b6       	in	r0, 0x39	; 57
 284:	0f 92       	push	r0
 286:	19 be       	out	0x39, r1	; 57
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	1b be       	out	0x3b, r1	; 59
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
 2a6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
 2aa:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
 2ae:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <adcIn>
 2b2:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <adcIn+0x1>
	// setPoint = (adcIn/4095.);		//convert to voltage.0.
	setPoint = (adcIn/4095.)-0.030;		//convert to voltage
 2b6:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <adcIn>
 2ba:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <adcIn+0x1>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatunsisf>
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 ef       	ldi	r19, 0xF0	; 240
 2ca:	4f e7       	ldi	r20, 0x7F	; 127
 2cc:	55 e4       	ldi	r21, 0x45	; 69
 2ce:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__divsf3>
 2d2:	2f e8       	ldi	r18, 0x8F	; 143
 2d4:	32 ec       	ldi	r19, 0xC2	; 194
 2d6:	45 ef       	ldi	r20, 0xF5	; 245
 2d8:	5c e3       	ldi	r21, 0x3C	; 60
 2da:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__subsf3>
 2de:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <setPoint>
 2e2:	70 93 23 20 	sts	0x2023, r23	; 0x802023 <setPoint+0x1>
 2e6:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <setPoint+0x2>
 2ea:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <setPoint+0x3>
	// setPoint = 2;                   //Set the setpoint to midrange for initial testing of the controller
	
	encCount = TCC0.CNT;			//read encoder
 2ee:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
 2f2:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
 2f6:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <encCount>
 2fa:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
 2fe:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <encCount>
 302:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <encCount+0x1>
 306:	99 23       	and	r25, r25
 308:	24 f4       	brge	.+8      	; 0x312 <__vector_20+0xa0>
 30a:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <encCount>
 30e:	10 92 35 20 	sts	0x2035, r1	; 0x802035 <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
 312:	60 91 34 20 	lds	r22, 0x2034	; 0x802034 <encCount>
 316:	70 91 35 20 	lds	r23, 0x2035	; 0x802035 <encCount+0x1>
 31a:	07 2e       	mov	r0, r23
 31c:	00 0c       	add	r0, r0
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	4f e2       	ldi	r20, 0x2F	; 47
 32c:	54 e4       	ldi	r21, 0x44	; 68
 32e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__divsf3>
 332:	60 93 30 20 	sts	0x2030, r22	; 0x802030 <position>
 336:	70 93 31 20 	sts	0x2031, r23	; 0x802031 <position+0x1>
 33a:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <position+0x2>
 33e:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
 342:	60 91 30 20 	lds	r22, 0x2030	; 0x802030 <position>
 346:	70 91 31 20 	lds	r23, 0x2031	; 0x802031 <position+0x1>
 34a:	80 91 32 20 	lds	r24, 0x2032	; 0x802032 <position+0x2>
 34e:	90 91 33 20 	lds	r25, 0x2033	; 0x802033 <position+0x3>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 ef       	ldi	r19, 0xF0	; 240
 356:	4f e7       	ldi	r20, 0x7F	; 127
 358:	55 e4       	ldi	r21, 0x45	; 69
 35a:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 35e:	60 93 2c 20 	sts	0x202C, r22	; 0x80202c <positionDAC>
 362:	70 93 2d 20 	sts	0x202D, r23	; 0x80202d <positionDAC+0x1>
 366:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <positionDAC+0x2>
 36a:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <positionDAC+0x3>
	// printf("positionDAC = %d, position = %d, encCount = %d\n", (int)(positionDAC), (int)(position*100), (int)encCount);
	// printf("encCount = %d\n", (int)encCount);
	if(positionDAC < 0) positionDAC = 0;	//rollover check
 36e:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <positionDAC>
 372:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <positionDAC+0x1>
 376:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <positionDAC+0x2>
 37a:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <positionDAC+0x3>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	a9 01       	movw	r20, r18
 384:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__cmpsf2>
 388:	88 23       	and	r24, r24
 38a:	44 f4       	brge	.+16     	; 0x39c <__vector_20+0x12a>
 38c:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <positionDAC>
 390:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <positionDAC+0x1>
 394:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <positionDAC+0x2>
 398:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <positionDAC+0x3>
	// positionDAC = 2048;
	// position = 0.0;

	error = setPoint - position;			//compute error
 39c:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <setPoint>
 3a0:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <setPoint+0x1>
 3a4:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <setPoint+0x2>
 3a8:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <setPoint+0x3>
 3ac:	20 91 30 20 	lds	r18, 0x2030	; 0x802030 <position>
 3b0:	30 91 31 20 	lds	r19, 0x2031	; 0x802031 <position+0x1>
 3b4:	40 91 32 20 	lds	r20, 0x2032	; 0x802032 <position+0x2>
 3b8:	50 91 33 20 	lds	r21, 0x2033	; 0x802033 <position+0x3>
 3bc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__subsf3>
 3c0:	60 93 28 20 	sts	0x2028, r22	; 0x802028 <error>
 3c4:	70 93 29 20 	sts	0x2029, r23	; 0x802029 <error+0x1>
 3c8:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <error+0x2>
 3cc:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <error+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = -0.2;  // Initial value
 3d0:	8d ec       	ldi	r24, 0xCD	; 205
 3d2:	9c ec       	ldi	r25, 0xCC	; 204
 3d4:	ac e4       	ldi	r26, 0x4C	; 76
 3d6:	be eb       	ldi	r27, 0xBE	; 190
 3d8:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <ctrlCorrection>
 3dc:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <ctrlCorrection+0x1>
 3e0:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <ctrlCorrection+0x2>
 3e4:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <ctrlCorrection+0x3>
	//ctrlCorrection = 0.495;  // Control Correction to Correct the Single ended to Bipolar circuit zero offset
	// For my circuit the output of the Single ended to Bipolar circuit equaled -0.495 volts
	// when the control input (ctrlOut = 0.0) equalled 0.
	
	
	ctrlOut = Kp * error;
 3e8:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Kp>
 3ec:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Kp+0x1>
 3f0:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <Kp+0x2>
 3f4:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <Kp+0x3>
 3f8:	20 91 28 20 	lds	r18, 0x2028	; 0x802028 <error>
 3fc:	30 91 29 20 	lds	r19, 0x2029	; 0x802029 <error+0x1>
 400:	40 91 2a 20 	lds	r20, 0x202A	; 0x80202a <error+0x2>
 404:	50 91 2b 20 	lds	r21, 0x202B	; 0x80202b <error+0x3>
 408:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 40c:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <ctrlOut>
 410:	70 93 1f 20 	sts	0x201F, r23	; 0x80201f <ctrlOut+0x1>
 414:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ctrlOut+0x2>
 418:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ctrlOut+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
 41c:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <ctrlOut>
 420:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <ctrlOut+0x1>
 424:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <ctrlOut+0x2>
 428:	b0 91 21 20 	lds	r27, 0x2021	; 0x802021 <ctrlOut+0x3>
 42c:	bc 01       	movw	r22, r24
 42e:	cd 01       	movw	r24, r26
 430:	9f 77       	andi	r25, 0x7F	; 127
 432:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <maxVoltage>
 436:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <maxVoltage+0x1>
 43a:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <maxVoltage+0x2>
 43e:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <maxVoltage+0x3>
 442:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gesf2>
 446:	88 23       	and	r24, r24
 448:	d4 f0       	brlt	.+52     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	ctrlOut = copysign(maxVoltage, ctrlOut);
 44a:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <ctrlOut>
 44e:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <ctrlOut+0x1>
 452:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <ctrlOut+0x2>
 456:	70 91 21 20 	lds	r23, 0x2021	; 0x802021 <ctrlOut+0x3>
 45a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <maxVoltage>
 45e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <maxVoltage+0x1>
 462:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <maxVoltage+0x2>
 466:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 46a:	77 fb       	bst	r23, 7
 46c:	b7 f9       	bld	r27, 7
 46e:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <ctrlOut>
 472:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <ctrlOut+0x1>
 476:	a0 93 20 20 	sts	0x2020, r26	; 0x802020 <ctrlOut+0x2>
 47a:	b0 93 21 20 	sts	0x2021, r27	; 0x802021 <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
 47e:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <ctrlOut>
 482:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <ctrlOut+0x1>
 486:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <ctrlOut+0x2>
 48a:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <ctrlOut+0x3>
 48e:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <ctrlCorrection>
 492:	30 91 17 20 	lds	r19, 0x2017	; 0x802017 <ctrlCorrection+0x1>
 496:	40 91 18 20 	lds	r20, 0x2018	; 0x802018 <ctrlCorrection+0x2>
 49a:	50 91 19 20 	lds	r21, 0x2019	; 0x802019 <ctrlCorrection+0x3>
 49e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__addsf3>
 4a2:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <__data_end>
 4a6:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <__data_end+0x1>
 4aa:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <__data_end+0x2>
 4ae:	50 91 15 20 	lds	r21, 0x2015	; 0x802015 <__data_end+0x3>
 4b2:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	55 e4       	ldi	r21, 0x45	; 69
 4be:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__addsf3>
 4c2:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <ctrlDAC>
 4c6:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <ctrlDAC+0x1>
 4ca:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ctrlDAC+0x2>
 4ce:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
 4d2:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <ctrlDAC>
 4d6:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <ctrlDAC+0x1>
 4da:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <ctrlDAC+0x2>
 4de:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <ctrlDAC+0x3>
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__cmpsf2>
 4ec:	88 23       	and	r24, r24
 4ee:	44 f4       	brge	.+16     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f0:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <ctrlDAC>
 4f4:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <ctrlDAC+0x1>
 4f8:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <ctrlDAC+0x2>
 4fc:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
 500:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <ctrlDAC>
 504:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <ctrlDAC+0x1>
 508:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <ctrlDAC+0x2>
 50c:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <ctrlDAC+0x3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 ef       	ldi	r19, 0xF0	; 240
 514:	4f e7       	ldi	r20, 0x7F	; 127
 516:	55 e4       	ldi	r21, 0x45	; 69
 518:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gesf2>
 51c:	18 16       	cp	r1, r24
 51e:	64 f4       	brge	.+24     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 ef       	ldi	r25, 0xF0	; 240
 524:	af e7       	ldi	r26, 0x7F	; 127
 526:	b5 e4       	ldi	r27, 0x45	; 69
 528:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <ctrlDAC>
 52c:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <ctrlDAC+0x1>
 530:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <ctrlDAC+0x2>
 534:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <ctrlDAC+0x3>
	// while((DACB.STATUS & DAC_CH1DRE_bm)==0);
	// DACB.CH1DATA = (int)positionDAC;					//Write arm position to DACB channel 1

	// flip the order to check channel 0 and channel 1
	// printf("positionDAC = %d\n", (int)(positionDAC));
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
 538:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 53c:	80 ff       	sbrs	r24, 0
 53e:	fc cf       	rjmp	.-8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
 540:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <positionDAC>
 544:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <positionDAC+0x1>
 548:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <positionDAC+0x2>
 54c:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <positionDAC+0x3>
 550:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
 554:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
 558:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
 55c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 560:	81 ff       	sbrs	r24, 1
 562:	fc cf       	rjmp	.-8      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
 564:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <ctrlDAC>
 568:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <ctrlDAC+0x1>
 56c:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <ctrlDAC+0x2>
 570:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <ctrlDAC+0x3>
 574:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fixsfsi>
 578:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
 57c:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>

	
	// printf("Error = %d, ctrlOut = %d, Position = %d, ctrlDac = %d, PositionDac = %d\n", (int)(error*100), (int)(ctrlOut*100), (int)(position*100), (int)ctrlDAC, (int)positionDAC);
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>
}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	09 be       	out	0x39, r0	; 57
 5a6:	0f 90       	pop	r0
 5a8:	08 be       	out	0x38, r0	; 56
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
 5b4:	e0 e5       	ldi	r30, 0x50	; 80
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
 5be:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 5c2:	81 ff       	sbrs	r24, 1
 5c4:	fc cf       	rjmp	.-8      	; 0x5be <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
 5c6:	88 ed       	ldi	r24, 0xD8	; 216
 5c8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
 5d0:	08 95       	ret

000005d2 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
 5d2:	e0 e4       	ldi	r30, 0x40	; 64
 5d4:	f6 e0       	ldi	r31, 0x06	; 6
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
 5de:	e0 ea       	ldi	r30, 0xA0	; 160
 5e0:	f8 e0       	ldi	r31, 0x08	; 8
 5e2:	85 81       	ldd	r24, Z+5	; 0x05
 5e4:	83 60       	ori	r24, 0x03	; 3
 5e6:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
 5e8:	8b e6       	ldi	r24, 0x6B	; 107
 5ea:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
 5ec:	80 eb       	ldi	r24, 0xB0	; 176
 5ee:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
 5f0:	84 81       	ldd	r24, Z+4	; 0x04
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	88 e2       	ldi	r24, 0x28	; 40
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fdevopen>
 602:	08 95       	ret

00000604 <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
 604:	e0 e6       	ldi	r30, 0x60	; 96
 606:	f6 e0       	ldi	r31, 0x06	; 6
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
 60c:	80 89       	ldd	r24, Z+16	; 0x10
 60e:	83 60       	ori	r24, 0x03	; 3
 610:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
 612:	e0 e8       	ldi	r30, 0x80	; 128
 614:	f1 e0       	ldi	r31, 0x01	; 1
 616:	88 e6       	ldi	r24, 0x68	; 104
 618:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
 61a:	80 85       	ldd	r24, Z+8	; 0x08
 61c:	89 60       	ori	r24, 0x09	; 9
 61e:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
 620:	e0 e0       	ldi	r30, 0x00	; 0
 622:	f8 e0       	ldi	r31, 0x08	; 8
 624:	83 81       	ldd	r24, Z+3	; 0x03
 626:	88 66       	ori	r24, 0x68	; 104
 628:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
 62a:	80 81       	ld	r24, Z
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	80 83       	st	Z, r24
 630:	08 95       	ret

00000632 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 632:	aa ec       	ldi	r26, 0xCA	; 202
 634:	b1 e0       	ldi	r27, 0x01	; 1
 636:	92 e0       	ldi	r25, 0x02	; 2
 638:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
 63a:	e8 2f       	mov	r30, r24
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 640:	1c 92       	st	X, r1

	return result;
}
 642:	08 95       	ret

00000644 <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
 64a:	c1 15       	cp	r28, r1
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	d8 07       	cpc	r29, r24
 650:	39 f4       	brne	.+14     	; 0x660 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
 652:	80 e2       	ldi	r24, 0x20	; 32
 654:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	8c 87       	std	Y+12, r24	; 0x0c
 65c:	9d 87       	std	Y+13, r25	; 0x0d
 65e:	06 c0       	rjmp	.+12     	; 0x66c <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
 660:	84 e2       	ldi	r24, 0x24	; 36
 662:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	8c 87       	std	Y+12, r24	; 0x0c
 66a:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	92 e0       	ldi	r25, 0x02	; 2
 676:	0e 94 22 03 	call	0x644	; 0x644 <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	f2 e0       	ldi	r31, 0x02	; 2
 67e:	81 81       	ldd	r24, Z+1	; 0x01
 680:	88 60       	ori	r24, 0x08	; 8
 682:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	82 60       	ori	r24, 0x02	; 2
 688:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
 68a:	80 a1       	ldd	r24, Z+32	; 0x20
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
 690:	84 81       	ldd	r24, Z+4	; 0x04
 692:	82 60       	ori	r24, 0x02	; 2
 694:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
 696:	80 81       	ld	r24, Z
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	80 83       	st	Z, r24
 69c:	08 95       	ret

0000069e <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	ec 01       	movw	r28, r24
	if(&DACA == dac){
 6a4:	c1 15       	cp	r28, r1
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	d8 07       	cpc	r29, r24
 6aa:	89 f4       	brne	.+34     	; 0x6ce <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
 6ac:	80 e3       	ldi	r24, 0x30	; 48
 6ae:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6b2:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
 6b4:	81 e3       	ldi	r24, 0x31	; 49
 6b6:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6ba:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
 6bc:	84 e3       	ldi	r24, 0x34	; 52
 6be:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6c2:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
 6c4:	85 e3       	ldi	r24, 0x35	; 53
 6c6:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6ca:	8a 87       	std	Y+10, r24	; 0x0a
 6cc:	10 c0       	rjmp	.+32     	; 0x6ee <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
 6ce:	82 e3       	ldi	r24, 0x32	; 50
 6d0:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6d4:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
 6d6:	83 e3       	ldi	r24, 0x33	; 51
 6d8:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6dc:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
 6de:	86 e3       	ldi	r24, 0x36	; 54
 6e0:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6e4:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
 6e6:	87 e3       	ldi	r24, 0x37	; 55
 6e8:	0e 94 19 03 	call	0x632	; 0x632 <SP_ReadCalibrationByte>
 6ec:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	93 e0       	ldi	r25, 0x03	; 3
 6f8:	0e 94 4f 03 	call	0x69e	; 0x69e <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
 6fc:	e0 e2       	ldi	r30, 0x20	; 32
 6fe:	f3 e0       	ldi	r31, 0x03	; 3
 700:	81 81       	ldd	r24, Z+1	; 0x01
 702:	80 64       	ori	r24, 0x40	; 64
 704:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
 706:	82 81       	ldd	r24, Z+2	; 0x02
 708:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
 70a:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
 70c:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
 70e:	80 81       	ld	r24, Z
 710:	8d 60       	ori	r24, 0x0D	; 13
 712:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	93 e0       	ldi	r25, 0x03	; 3
 718:	0e 94 4f 03 	call	0x69e	; 0x69e <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
 71c:	e0 e0       	ldi	r30, 0x00	; 0
 71e:	f3 e0       	ldi	r31, 0x03	; 3
 720:	81 81       	ldd	r24, Z+1	; 0x01
 722:	80 64       	ori	r24, 0x40	; 64
 724:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
 72a:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
 72c:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
 72e:	80 81       	ld	r24, Z
 730:	8d 60       	ori	r24, 0x0D	; 13
 732:	80 83       	st	Z, r24
 734:	08 95       	ret

00000736 <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
 736:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
 738:	e0 e4       	ldi	r30, 0x40	; 64
 73a:	f8 e0       	ldi	r31, 0x08	; 8
 73c:	81 81       	ldd	r24, Z+1	; 0x01
 73e:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
 740:	96 81       	ldd	r25, Z+6	; 0x06
 742:	91 60       	ori	r25, 0x01	; 1
 744:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
 746:	26 a3       	std	Z+38, r18	; 0x26
 748:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
 74a:	80 81       	ld	r24, Z
 74c:	83 60       	ori	r24, 0x03	; 3
 74e:	80 83       	st	Z, r24
 750:	08 95       	ret

00000752 <main>:


int main(void)
{
	
	clk_init();
 752:	0e 94 da 02 	call	0x5b4	; 0x5b4 <clk_init>
	encoder_init();
 756:	0e 94 02 03 	call	0x604	; 0x604 <encoder_init>
	usart_init();
 75a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usart_init>
	dac_init();
 75e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <dac_init>
	adc_init();
 762:	0e 94 39 03 	call	0x672	; 0x672 <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
 766:	80 e8       	ldi	r24, 0x80	; 128
 768:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
 76c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <maxVoltage>
 770:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <maxVoltage+0x1>
 774:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <maxVoltage+0x2>
 778:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <maxVoltage+0x3>
 77c:	9b 01       	movw	r18, r22
 77e:	ac 01       	movw	r20, r24
 780:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__addsf3>
 784:	9b 01       	movw	r18, r22
 786:	ac 01       	movw	r20, r24
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 ef       	ldi	r23, 0xF0	; 240
 78c:	8f e7       	ldi	r24, 0x7F	; 127
 78e:	95 e4       	ldi	r25, 0x45	; 69
 790:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__divsf3>
 794:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <__data_end>
 798:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <__data_end+0x1>
 79c:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <__data_end+0x2>
 7a0:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
 7a4:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <Ts>
 7a8:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <Ts+0x1>
 7ac:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <Ts+0x2>
 7b0:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <Ts+0x3>
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	34 e2       	ldi	r19, 0x24	; 36
 7b8:	44 ef       	ldi	r20, 0xF4	; 244
 7ba:	5a e4       	ldi	r21, 0x4A	; 74
 7bc:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulsf3>
 7c0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
 7c4:	60 93 36 20 	sts	0x2036, r22	; 0x802036 <topCount>
 7c8:	70 93 37 20 	sts	0x2037, r23	; 0x802037 <topCount+0x1>
	
	timer_init(topCount);
 7cc:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <topCount>
 7d0:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <topCount+0x1>
 7d4:	0e 94 9b 03 	call	0x736	; 0x736 <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 7d8:	87 e0       	ldi	r24, 0x07	; 7
 7da:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
 7de:	78 94       	sei
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <main+0x8e>

000007e2 <__subsf3>:
 7e2:	50 58       	subi	r21, 0x80	; 128

000007e4 <__addsf3>:
 7e4:	bb 27       	eor	r27, r27
 7e6:	aa 27       	eor	r26, r26
 7e8:	0e 94 09 04 	call	0x812	; 0x812 <__addsf3x>
 7ec:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
 7f0:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7f6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__EEPROM_REGION_LENGTH__+0x4>
 7fc:	39 f4       	brne	.+14     	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 7fe:	9f 3f       	cpi	r25, 0xFF	; 255
 800:	19 f4       	brne	.+6      	; 0x808 <__EEPROM_REGION_LENGTH__+0x8>
 802:	26 f4       	brtc	.+8      	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 804:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>
 808:	0e f4       	brtc	.+2      	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 80a:	e0 95       	com	r30
 80c:	e7 fb       	bst	r30, 7
 80e:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>

00000812 <__addsf3x>:
 812:	e9 2f       	mov	r30, r25
 814:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 818:	58 f3       	brcs	.-42     	; 0x7f0 <__addsf3+0xc>
 81a:	ba 17       	cp	r27, r26
 81c:	62 07       	cpc	r22, r18
 81e:	73 07       	cpc	r23, r19
 820:	84 07       	cpc	r24, r20
 822:	95 07       	cpc	r25, r21
 824:	20 f0       	brcs	.+8      	; 0x82e <__addsf3x+0x1c>
 826:	79 f4       	brne	.+30     	; 0x846 <__addsf3x+0x34>
 828:	a6 f5       	brtc	.+104    	; 0x892 <__addsf3x+0x80>
 82a:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
 82e:	0e f4       	brtc	.+2      	; 0x832 <__addsf3x+0x20>
 830:	e0 95       	com	r30
 832:	0b 2e       	mov	r0, r27
 834:	ba 2f       	mov	r27, r26
 836:	a0 2d       	mov	r26, r0
 838:	0b 01       	movw	r0, r22
 83a:	b9 01       	movw	r22, r18
 83c:	90 01       	movw	r18, r0
 83e:	0c 01       	movw	r0, r24
 840:	ca 01       	movw	r24, r20
 842:	a0 01       	movw	r20, r0
 844:	11 24       	eor	r1, r1
 846:	ff 27       	eor	r31, r31
 848:	59 1b       	sub	r21, r25
 84a:	99 f0       	breq	.+38     	; 0x872 <__addsf3x+0x60>
 84c:	59 3f       	cpi	r21, 0xF9	; 249
 84e:	50 f4       	brcc	.+20     	; 0x864 <__addsf3x+0x52>
 850:	50 3e       	cpi	r21, 0xE0	; 224
 852:	68 f1       	brcs	.+90     	; 0x8ae <__addsf3x+0x9c>
 854:	1a 16       	cp	r1, r26
 856:	f0 40       	sbci	r31, 0x00	; 0
 858:	a2 2f       	mov	r26, r18
 85a:	23 2f       	mov	r18, r19
 85c:	34 2f       	mov	r19, r20
 85e:	44 27       	eor	r20, r20
 860:	58 5f       	subi	r21, 0xF8	; 248
 862:	f3 cf       	rjmp	.-26     	; 0x84a <__addsf3x+0x38>
 864:	46 95       	lsr	r20
 866:	37 95       	ror	r19
 868:	27 95       	ror	r18
 86a:	a7 95       	ror	r26
 86c:	f0 40       	sbci	r31, 0x00	; 0
 86e:	53 95       	inc	r21
 870:	c9 f7       	brne	.-14     	; 0x864 <__addsf3x+0x52>
 872:	7e f4       	brtc	.+30     	; 0x892 <__addsf3x+0x80>
 874:	1f 16       	cp	r1, r31
 876:	ba 0b       	sbc	r27, r26
 878:	62 0b       	sbc	r22, r18
 87a:	73 0b       	sbc	r23, r19
 87c:	84 0b       	sbc	r24, r20
 87e:	ba f0       	brmi	.+46     	; 0x8ae <__addsf3x+0x9c>
 880:	91 50       	subi	r25, 0x01	; 1
 882:	a1 f0       	breq	.+40     	; 0x8ac <__addsf3x+0x9a>
 884:	ff 0f       	add	r31, r31
 886:	bb 1f       	adc	r27, r27
 888:	66 1f       	adc	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	c2 f7       	brpl	.-16     	; 0x880 <__addsf3x+0x6e>
 890:	0e c0       	rjmp	.+28     	; 0x8ae <__addsf3x+0x9c>
 892:	ba 0f       	add	r27, r26
 894:	62 1f       	adc	r22, r18
 896:	73 1f       	adc	r23, r19
 898:	84 1f       	adc	r24, r20
 89a:	48 f4       	brcc	.+18     	; 0x8ae <__addsf3x+0x9c>
 89c:	87 95       	ror	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	b7 95       	ror	r27
 8a4:	f7 95       	ror	r31
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	08 f0       	brcs	.+2      	; 0x8ac <__addsf3x+0x9a>
 8aa:	b0 cf       	rjmp	.-160    	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 8ac:	93 95       	inc	r25
 8ae:	88 0f       	add	r24, r24
 8b0:	08 f0       	brcs	.+2      	; 0x8b4 <__addsf3x+0xa2>
 8b2:	99 27       	eor	r25, r25
 8b4:	ee 0f       	add	r30, r30
 8b6:	97 95       	ror	r25
 8b8:	87 95       	ror	r24
 8ba:	08 95       	ret

000008bc <__cmpsf2>:
 8bc:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_cmp>
 8c0:	08 f4       	brcc	.+2      	; 0x8c4 <__cmpsf2+0x8>
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	08 95       	ret

000008c6 <__divsf3>:
 8c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3x>
 8ca:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
 8ce:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
 8d2:	58 f0       	brcs	.+22     	; 0x8ea <__divsf3+0x24>
 8d4:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
 8d8:	40 f0       	brcs	.+16     	; 0x8ea <__divsf3+0x24>
 8da:	29 f4       	brne	.+10     	; 0x8e6 <__divsf3+0x20>
 8dc:	5f 3f       	cpi	r21, 0xFF	; 255
 8de:	29 f0       	breq	.+10     	; 0x8ea <__divsf3+0x24>
 8e0:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 8e4:	51 11       	cpse	r21, r1
 8e6:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 8ea:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>

000008ee <__divsf3x>:
 8ee:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 8f2:	68 f3       	brcs	.-38     	; 0x8ce <__divsf3+0x8>

000008f4 <__divsf3_pse>:
 8f4:	99 23       	and	r25, r25
 8f6:	b1 f3       	breq	.-20     	; 0x8e4 <__divsf3+0x1e>
 8f8:	55 23       	and	r21, r21
 8fa:	91 f3       	breq	.-28     	; 0x8e0 <__divsf3+0x1a>
 8fc:	95 1b       	sub	r25, r21
 8fe:	55 0b       	sbc	r21, r21
 900:	bb 27       	eor	r27, r27
 902:	aa 27       	eor	r26, r26
 904:	62 17       	cp	r22, r18
 906:	73 07       	cpc	r23, r19
 908:	84 07       	cpc	r24, r20
 90a:	38 f0       	brcs	.+14     	; 0x91a <__divsf3_pse+0x26>
 90c:	9f 5f       	subi	r25, 0xFF	; 255
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
 910:	22 0f       	add	r18, r18
 912:	33 1f       	adc	r19, r19
 914:	44 1f       	adc	r20, r20
 916:	aa 1f       	adc	r26, r26
 918:	a9 f3       	breq	.-22     	; 0x904 <__divsf3_pse+0x10>
 91a:	35 d0       	rcall	.+106    	; 0x986 <__divsf3_pse+0x92>
 91c:	0e 2e       	mov	r0, r30
 91e:	3a f0       	brmi	.+14     	; 0x92e <__divsf3_pse+0x3a>
 920:	e0 e8       	ldi	r30, 0x80	; 128
 922:	32 d0       	rcall	.+100    	; 0x988 <__divsf3_pse+0x94>
 924:	91 50       	subi	r25, 0x01	; 1
 926:	50 40       	sbci	r21, 0x00	; 0
 928:	e6 95       	lsr	r30
 92a:	00 1c       	adc	r0, r0
 92c:	ca f7       	brpl	.-14     	; 0x920 <__divsf3_pse+0x2c>
 92e:	2b d0       	rcall	.+86     	; 0x986 <__divsf3_pse+0x92>
 930:	fe 2f       	mov	r31, r30
 932:	29 d0       	rcall	.+82     	; 0x986 <__divsf3_pse+0x92>
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	bb 1f       	adc	r27, r27
 93c:	26 17       	cp	r18, r22
 93e:	37 07       	cpc	r19, r23
 940:	48 07       	cpc	r20, r24
 942:	ab 07       	cpc	r26, r27
 944:	b0 e8       	ldi	r27, 0x80	; 128
 946:	09 f0       	breq	.+2      	; 0x94a <__divsf3_pse+0x56>
 948:	bb 0b       	sbc	r27, r27
 94a:	80 2d       	mov	r24, r0
 94c:	bf 01       	movw	r22, r30
 94e:	ff 27       	eor	r31, r31
 950:	93 58       	subi	r25, 0x83	; 131
 952:	5f 4f       	sbci	r21, 0xFF	; 255
 954:	3a f0       	brmi	.+14     	; 0x964 <__divsf3_pse+0x70>
 956:	9e 3f       	cpi	r25, 0xFE	; 254
 958:	51 05       	cpc	r21, r1
 95a:	78 f0       	brcs	.+30     	; 0x97a <__divsf3_pse+0x86>
 95c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 960:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 964:	5f 3f       	cpi	r21, 0xFF	; 255
 966:	e4 f3       	brlt	.-8      	; 0x960 <__divsf3_pse+0x6c>
 968:	98 3e       	cpi	r25, 0xE8	; 232
 96a:	d4 f3       	brlt	.-12     	; 0x960 <__divsf3_pse+0x6c>
 96c:	86 95       	lsr	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	b7 95       	ror	r27
 974:	f7 95       	ror	r31
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	c9 f7       	brne	.-14     	; 0x96c <__divsf3_pse+0x78>
 97a:	88 0f       	add	r24, r24
 97c:	91 1d       	adc	r25, r1
 97e:	96 95       	lsr	r25
 980:	87 95       	ror	r24
 982:	97 f9       	bld	r25, 7
 984:	08 95       	ret
 986:	e1 e0       	ldi	r30, 0x01	; 1
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	bb 1f       	adc	r27, r27
 990:	62 17       	cp	r22, r18
 992:	73 07       	cpc	r23, r19
 994:	84 07       	cpc	r24, r20
 996:	ba 07       	cpc	r27, r26
 998:	20 f0       	brcs	.+8      	; 0x9a2 <__divsf3_pse+0xae>
 99a:	62 1b       	sub	r22, r18
 99c:	73 0b       	sbc	r23, r19
 99e:	84 0b       	sbc	r24, r20
 9a0:	ba 0b       	sbc	r27, r26
 9a2:	ee 1f       	adc	r30, r30
 9a4:	88 f7       	brcc	.-30     	; 0x988 <__divsf3_pse+0x94>
 9a6:	e0 95       	com	r30
 9a8:	08 95       	ret

000009aa <__fixsfsi>:
 9aa:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fixunssfsi>
 9ae:	68 94       	set
 9b0:	b1 11       	cpse	r27, r1
 9b2:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 9b6:	08 95       	ret

000009b8 <__fixunssfsi>:
 9b8:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_splitA>
 9bc:	88 f0       	brcs	.+34     	; 0x9e0 <__fixunssfsi+0x28>
 9be:	9f 57       	subi	r25, 0x7F	; 127
 9c0:	98 f0       	brcs	.+38     	; 0x9e8 <__fixunssfsi+0x30>
 9c2:	b9 2f       	mov	r27, r25
 9c4:	99 27       	eor	r25, r25
 9c6:	b7 51       	subi	r27, 0x17	; 23
 9c8:	b0 f0       	brcs	.+44     	; 0x9f6 <__fixunssfsi+0x3e>
 9ca:	e1 f0       	breq	.+56     	; 0xa04 <__fixunssfsi+0x4c>
 9cc:	66 0f       	add	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	1a f0       	brmi	.+6      	; 0x9dc <__fixunssfsi+0x24>
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__fixunssfsi+0x14>
 9da:	14 c0       	rjmp	.+40     	; 0xa04 <__fixunssfsi+0x4c>
 9dc:	b1 30       	cpi	r27, 0x01	; 1
 9de:	91 f0       	breq	.+36     	; 0xa04 <__fixunssfsi+0x4c>
 9e0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_zero>
 9e4:	b1 e0       	ldi	r27, 0x01	; 1
 9e6:	08 95       	ret
 9e8:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_zero>
 9ec:	67 2f       	mov	r22, r23
 9ee:	78 2f       	mov	r23, r24
 9f0:	88 27       	eor	r24, r24
 9f2:	b8 5f       	subi	r27, 0xF8	; 248
 9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x4c>
 9f6:	b9 3f       	cpi	r27, 0xF9	; 249
 9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x34>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b3 95       	inc	r27
 a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x42>
 a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x5c>
 a06:	90 95       	com	r25
 a08:	80 95       	com	r24
 a0a:	70 95       	com	r23
 a0c:	61 95       	neg	r22
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	8f 4f       	sbci	r24, 0xFF	; 255
 a12:	9f 4f       	sbci	r25, 0xFF	; 255
 a14:	08 95       	ret

00000a16 <__floatunsisf>:
 a16:	e8 94       	clt
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
 a1e:	90 95       	com	r25
 a20:	80 95       	com	r24
 a22:	70 95       	com	r23
 a24:	61 95       	neg	r22
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	99 23       	and	r25, r25
 a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
 a30:	f9 2f       	mov	r31, r25
 a32:	96 e9       	ldi	r25, 0x96	; 150
 a34:	bb 27       	eor	r27, r27
 a36:	93 95       	inc	r25
 a38:	f6 95       	lsr	r31
 a3a:	87 95       	ror	r24
 a3c:	77 95       	ror	r23
 a3e:	67 95       	ror	r22
 a40:	b7 95       	ror	r27
 a42:	f1 11       	cpse	r31, r1
 a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
 a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
 a48:	bb 0f       	add	r27, r27
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
 a5a:	88 23       	and	r24, r24
 a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
 a5e:	96 e9       	ldi	r25, 0x96	; 150
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
 a62:	77 23       	and	r23, r23
 a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
 a66:	9e e8       	ldi	r25, 0x8E	; 142
 a68:	87 2f       	mov	r24, r23
 a6a:	76 2f       	mov	r23, r22
 a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
 a6e:	66 23       	and	r22, r22
 a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
 a72:	96 e8       	ldi	r25, 0x86	; 134
 a74:	86 2f       	mov	r24, r22
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
 a7c:	9a 95       	dec	r25
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
 a86:	88 0f       	add	r24, r24
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__fp_cmp>:
 a90:	99 0f       	add	r25, r25
 a92:	00 08       	sbc	r0, r0
 a94:	55 0f       	add	r21, r21
 a96:	aa 0b       	sbc	r26, r26
 a98:	e0 e8       	ldi	r30, 0x80	; 128
 a9a:	fe ef       	ldi	r31, 0xFE	; 254
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	e8 07       	cpc	r30, r24
 aa2:	f9 07       	cpc	r31, r25
 aa4:	c0 f0       	brcs	.+48     	; 0xad6 <__fp_cmp+0x46>
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	e4 07       	cpc	r30, r20
 aac:	f5 07       	cpc	r31, r21
 aae:	98 f0       	brcs	.+38     	; 0xad6 <__fp_cmp+0x46>
 ab0:	62 1b       	sub	r22, r18
 ab2:	73 0b       	sbc	r23, r19
 ab4:	84 0b       	sbc	r24, r20
 ab6:	95 0b       	sbc	r25, r21
 ab8:	39 f4       	brne	.+14     	; 0xac8 <__fp_cmp+0x38>
 aba:	0a 26       	eor	r0, r26
 abc:	61 f0       	breq	.+24     	; 0xad6 <__fp_cmp+0x46>
 abe:	23 2b       	or	r18, r19
 ac0:	24 2b       	or	r18, r20
 ac2:	25 2b       	or	r18, r21
 ac4:	21 f4       	brne	.+8      	; 0xace <__fp_cmp+0x3e>
 ac6:	08 95       	ret
 ac8:	0a 26       	eor	r0, r26
 aca:	09 f4       	brne	.+2      	; 0xace <__fp_cmp+0x3e>
 acc:	a1 40       	sbci	r26, 0x01	; 1
 ace:	a6 95       	lsr	r26
 ad0:	8f ef       	ldi	r24, 0xFF	; 255
 ad2:	81 1d       	adc	r24, r1
 ad4:	81 1d       	adc	r24, r1
 ad6:	08 95       	ret

00000ad8 <__fp_inf>:
 ad8:	97 f9       	bld	r25, 7
 ada:	9f 67       	ori	r25, 0x7F	; 127
 adc:	80 e8       	ldi	r24, 0x80	; 128
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	60 e0       	ldi	r22, 0x00	; 0
 ae2:	08 95       	ret

00000ae4 <__fp_nan>:
 ae4:	9f ef       	ldi	r25, 0xFF	; 255
 ae6:	80 ec       	ldi	r24, 0xC0	; 192
 ae8:	08 95       	ret

00000aea <__fp_pscA>:
 aea:	00 24       	eor	r0, r0
 aec:	0a 94       	dec	r0
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	09 06       	cpc	r0, r25
 af6:	08 95       	ret

00000af8 <__fp_pscB>:
 af8:	00 24       	eor	r0, r0
 afa:	0a 94       	dec	r0
 afc:	12 16       	cp	r1, r18
 afe:	13 06       	cpc	r1, r19
 b00:	14 06       	cpc	r1, r20
 b02:	05 06       	cpc	r0, r21
 b04:	08 95       	ret

00000b06 <__fp_round>:
 b06:	09 2e       	mov	r0, r25
 b08:	03 94       	inc	r0
 b0a:	00 0c       	add	r0, r0
 b0c:	11 f4       	brne	.+4      	; 0xb12 <__fp_round+0xc>
 b0e:	88 23       	and	r24, r24
 b10:	52 f0       	brmi	.+20     	; 0xb26 <__fp_round+0x20>
 b12:	bb 0f       	add	r27, r27
 b14:	40 f4       	brcc	.+16     	; 0xb26 <__fp_round+0x20>
 b16:	bf 2b       	or	r27, r31
 b18:	11 f4       	brne	.+4      	; 0xb1e <__fp_round+0x18>
 b1a:	60 ff       	sbrs	r22, 0
 b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__fp_round+0x20>
 b1e:	6f 5f       	subi	r22, 0xFF	; 255
 b20:	7f 4f       	sbci	r23, 0xFF	; 255
 b22:	8f 4f       	sbci	r24, 0xFF	; 255
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__fp_split3>:
 b28:	57 fd       	sbrc	r21, 7
 b2a:	90 58       	subi	r25, 0x80	; 128
 b2c:	44 0f       	add	r20, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	59 f0       	breq	.+22     	; 0xb48 <__fp_splitA+0x10>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	71 f0       	breq	.+28     	; 0xb52 <__fp_splitA+0x1a>
 b36:	47 95       	ror	r20

00000b38 <__fp_splitA>:
 b38:	88 0f       	add	r24, r24
 b3a:	97 fb       	bst	r25, 7
 b3c:	99 1f       	adc	r25, r25
 b3e:	61 f0       	breq	.+24     	; 0xb58 <__fp_splitA+0x20>
 b40:	9f 3f       	cpi	r25, 0xFF	; 255
 b42:	79 f0       	breq	.+30     	; 0xb62 <__fp_splitA+0x2a>
 b44:	87 95       	ror	r24
 b46:	08 95       	ret
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	14 06       	cpc	r1, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	f2 cf       	rjmp	.-28     	; 0xb36 <__fp_split3+0xe>
 b52:	46 95       	lsr	r20
 b54:	f1 df       	rcall	.-30     	; 0xb38 <__fp_splitA>
 b56:	08 c0       	rjmp	.+16     	; 0xb68 <__fp_splitA+0x30>
 b58:	16 16       	cp	r1, r22
 b5a:	17 06       	cpc	r1, r23
 b5c:	18 06       	cpc	r1, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	f1 cf       	rjmp	.-30     	; 0xb44 <__fp_splitA+0xc>
 b62:	86 95       	lsr	r24
 b64:	71 05       	cpc	r23, r1
 b66:	61 05       	cpc	r22, r1
 b68:	08 94       	sec
 b6a:	08 95       	ret

00000b6c <__fp_zero>:
 b6c:	e8 94       	clt

00000b6e <__fp_szero>:
 b6e:	bb 27       	eor	r27, r27
 b70:	66 27       	eor	r22, r22
 b72:	77 27       	eor	r23, r23
 b74:	cb 01       	movw	r24, r22
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__gesf2>:
 b7a:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_cmp>
 b7e:	08 f4       	brcc	.+2      	; 0xb82 <__gesf2+0x8>
 b80:	8f ef       	ldi	r24, 0xFF	; 255
 b82:	08 95       	ret

00000b84 <__mulsf3>:
 b84:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__mulsf3x>
 b88:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_round>
 b8c:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_pscA>
 b90:	38 f0       	brcs	.+14     	; 0xba0 <__mulsf3+0x1c>
 b92:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscB>
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__mulsf3+0x1c>
 b98:	95 23       	and	r25, r21
 b9a:	11 f0       	breq	.+4      	; 0xba0 <__mulsf3+0x1c>
 b9c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 ba0:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__fp_nan>
 ba4:	11 24       	eor	r1, r1
 ba6:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>

00000baa <__mulsf3x>:
 baa:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_split3>
 bae:	70 f3       	brcs	.-36     	; 0xb8c <__mulsf3+0x8>

00000bb0 <__mulsf3_pse>:
 bb0:	95 9f       	mul	r25, r21
 bb2:	c1 f3       	breq	.-16     	; 0xba4 <__mulsf3+0x20>
 bb4:	95 0f       	add	r25, r21
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	55 1f       	adc	r21, r21
 bba:	62 9f       	mul	r22, r18
 bbc:	f0 01       	movw	r30, r0
 bbe:	72 9f       	mul	r23, r18
 bc0:	bb 27       	eor	r27, r27
 bc2:	f0 0d       	add	r31, r0
 bc4:	b1 1d       	adc	r27, r1
 bc6:	63 9f       	mul	r22, r19
 bc8:	aa 27       	eor	r26, r26
 bca:	f0 0d       	add	r31, r0
 bcc:	b1 1d       	adc	r27, r1
 bce:	aa 1f       	adc	r26, r26
 bd0:	64 9f       	mul	r22, r20
 bd2:	66 27       	eor	r22, r22
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	66 1f       	adc	r22, r22
 bda:	82 9f       	mul	r24, r18
 bdc:	22 27       	eor	r18, r18
 bde:	b0 0d       	add	r27, r0
 be0:	a1 1d       	adc	r26, r1
 be2:	62 1f       	adc	r22, r18
 be4:	73 9f       	mul	r23, r19
 be6:	b0 0d       	add	r27, r0
 be8:	a1 1d       	adc	r26, r1
 bea:	62 1f       	adc	r22, r18
 bec:	83 9f       	mul	r24, r19
 bee:	a0 0d       	add	r26, r0
 bf0:	61 1d       	adc	r22, r1
 bf2:	22 1f       	adc	r18, r18
 bf4:	74 9f       	mul	r23, r20
 bf6:	33 27       	eor	r19, r19
 bf8:	a0 0d       	add	r26, r0
 bfa:	61 1d       	adc	r22, r1
 bfc:	23 1f       	adc	r18, r19
 bfe:	84 9f       	mul	r24, r20
 c00:	60 0d       	add	r22, r0
 c02:	21 1d       	adc	r18, r1
 c04:	82 2f       	mov	r24, r18
 c06:	76 2f       	mov	r23, r22
 c08:	6a 2f       	mov	r22, r26
 c0a:	11 24       	eor	r1, r1
 c0c:	9f 57       	subi	r25, 0x7F	; 127
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	9a f0       	brmi	.+38     	; 0xc38 <__mulsf3_pse+0x88>
 c12:	f1 f0       	breq	.+60     	; 0xc50 <__mulsf3_pse+0xa0>
 c14:	88 23       	and	r24, r24
 c16:	4a f0       	brmi	.+18     	; 0xc2a <__mulsf3_pse+0x7a>
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	bb 1f       	adc	r27, r27
 c1e:	66 1f       	adc	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	91 50       	subi	r25, 0x01	; 1
 c26:	50 40       	sbci	r21, 0x00	; 0
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__mulsf3_pse+0x64>
 c2a:	9e 3f       	cpi	r25, 0xFE	; 254
 c2c:	51 05       	cpc	r21, r1
 c2e:	80 f0       	brcs	.+32     	; 0xc50 <__mulsf3_pse+0xa0>
 c30:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_inf>
 c34:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_szero>
 c38:	5f 3f       	cpi	r21, 0xFF	; 255
 c3a:	e4 f3       	brlt	.-8      	; 0xc34 <__mulsf3_pse+0x84>
 c3c:	98 3e       	cpi	r25, 0xE8	; 232
 c3e:	d4 f3       	brlt	.-12     	; 0xc34 <__mulsf3_pse+0x84>
 c40:	86 95       	lsr	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	b7 95       	ror	r27
 c48:	f7 95       	ror	r31
 c4a:	e7 95       	ror	r30
 c4c:	9f 5f       	subi	r25, 0xFF	; 255
 c4e:	c1 f7       	brne	.-16     	; 0xc40 <__mulsf3_pse+0x90>
 c50:	fe 2b       	or	r31, r30
 c52:	88 0f       	add	r24, r24
 c54:	91 1d       	adc	r25, r1
 c56:	96 95       	lsr	r25
 c58:	87 95       	ror	r24
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <fdevopen>:
 c5e:	0f 93       	push	r16
 c60:	1f 93       	push	r17
 c62:	cf 93       	push	r28
 c64:	df 93       	push	r29
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	31 f4       	brne	.+12     	; 0xc76 <fdevopen+0x18>
 c6a:	61 15       	cp	r22, r1
 c6c:	71 05       	cpc	r23, r1
 c6e:	19 f4       	brne	.+6      	; 0xc76 <fdevopen+0x18>
 c70:	80 e0       	ldi	r24, 0x00	; 0
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	3a c0       	rjmp	.+116    	; 0xcea <fdevopen+0x8c>
 c76:	8b 01       	movw	r16, r22
 c78:	ec 01       	movw	r28, r24
 c7a:	6e e0       	ldi	r22, 0x0E	; 14
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <calloc>
 c86:	fc 01       	movw	r30, r24
 c88:	89 2b       	or	r24, r25
 c8a:	91 f3       	breq	.-28     	; 0xc70 <fdevopen+0x12>
 c8c:	80 e8       	ldi	r24, 0x80	; 128
 c8e:	83 83       	std	Z+3, r24	; 0x03
 c90:	01 15       	cp	r16, r1
 c92:	11 05       	cpc	r17, r1
 c94:	71 f0       	breq	.+28     	; 0xcb2 <fdevopen+0x54>
 c96:	02 87       	std	Z+10, r16	; 0x0a
 c98:	13 87       	std	Z+11, r17	; 0x0b
 c9a:	81 e8       	ldi	r24, 0x81	; 129
 c9c:	83 83       	std	Z+3, r24	; 0x03
 c9e:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <__iob>
 ca2:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <__iob+0x1>
 ca6:	89 2b       	or	r24, r25
 ca8:	21 f4       	brne	.+8      	; 0xcb2 <fdevopen+0x54>
 caa:	e0 93 38 20 	sts	0x2038, r30	; 0x802038 <__iob>
 cae:	f0 93 39 20 	sts	0x2039, r31	; 0x802039 <__iob+0x1>
 cb2:	20 97       	sbiw	r28, 0x00	; 0
 cb4:	c9 f0       	breq	.+50     	; 0xce8 <fdevopen+0x8a>
 cb6:	c0 87       	std	Z+8, r28	; 0x08
 cb8:	d1 87       	std	Z+9, r29	; 0x09
 cba:	83 81       	ldd	r24, Z+3	; 0x03
 cbc:	82 60       	ori	r24, 0x02	; 2
 cbe:	83 83       	std	Z+3, r24	; 0x03
 cc0:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <__iob+0x2>
 cc4:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <__iob+0x3>
 cc8:	89 2b       	or	r24, r25
 cca:	71 f4       	brne	.+28     	; 0xce8 <fdevopen+0x8a>
 ccc:	e0 93 3a 20 	sts	0x203A, r30	; 0x80203a <__iob+0x2>
 cd0:	f0 93 3b 20 	sts	0x203B, r31	; 0x80203b <__iob+0x3>
 cd4:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <__iob+0x4>
 cd8:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <__iob+0x5>
 cdc:	89 2b       	or	r24, r25
 cde:	21 f4       	brne	.+8      	; 0xce8 <fdevopen+0x8a>
 ce0:	e0 93 3c 20 	sts	0x203C, r30	; 0x80203c <__iob+0x4>
 ce4:	f0 93 3d 20 	sts	0x203D, r31	; 0x80203d <__iob+0x5>
 ce8:	cf 01       	movw	r24, r30
 cea:	df 91       	pop	r29
 cec:	cf 91       	pop	r28
 cee:	1f 91       	pop	r17
 cf0:	0f 91       	pop	r16
 cf2:	08 95       	ret

00000cf4 <calloc>:
 cf4:	0f 93       	push	r16
 cf6:	1f 93       	push	r17
 cf8:	cf 93       	push	r28
 cfa:	df 93       	push	r29
 cfc:	86 9f       	mul	r24, r22
 cfe:	80 01       	movw	r16, r0
 d00:	87 9f       	mul	r24, r23
 d02:	10 0d       	add	r17, r0
 d04:	96 9f       	mul	r25, r22
 d06:	10 0d       	add	r17, r0
 d08:	11 24       	eor	r1, r1
 d0a:	c8 01       	movw	r24, r16
 d0c:	0e 94 96 06 	call	0xd2c	; 0xd2c <malloc>
 d10:	ec 01       	movw	r28, r24
 d12:	00 97       	sbiw	r24, 0x00	; 0
 d14:	29 f0       	breq	.+10     	; 0xd20 <calloc+0x2c>
 d16:	a8 01       	movw	r20, r16
 d18:	60 e0       	ldi	r22, 0x00	; 0
 d1a:	70 e0       	ldi	r23, 0x00	; 0
 d1c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <memset>
 d20:	ce 01       	movw	r24, r28
 d22:	df 91       	pop	r29
 d24:	cf 91       	pop	r28
 d26:	1f 91       	pop	r17
 d28:	0f 91       	pop	r16
 d2a:	08 95       	ret

00000d2c <malloc>:
 d2c:	0f 93       	push	r16
 d2e:	1f 93       	push	r17
 d30:	cf 93       	push	r28
 d32:	df 93       	push	r29
 d34:	82 30       	cpi	r24, 0x02	; 2
 d36:	91 05       	cpc	r25, r1
 d38:	10 f4       	brcc	.+4      	; 0xd3e <malloc+0x12>
 d3a:	82 e0       	ldi	r24, 0x02	; 2
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <__flp>
 d42:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <__flp+0x1>
 d46:	20 e0       	ldi	r18, 0x00	; 0
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	a0 e0       	ldi	r26, 0x00	; 0
 d4c:	b0 e0       	ldi	r27, 0x00	; 0
 d4e:	30 97       	sbiw	r30, 0x00	; 0
 d50:	19 f1       	breq	.+70     	; 0xd98 <malloc+0x6c>
 d52:	40 81       	ld	r20, Z
 d54:	51 81       	ldd	r21, Z+1	; 0x01
 d56:	02 81       	ldd	r16, Z+2	; 0x02
 d58:	13 81       	ldd	r17, Z+3	; 0x03
 d5a:	48 17       	cp	r20, r24
 d5c:	59 07       	cpc	r21, r25
 d5e:	c8 f0       	brcs	.+50     	; 0xd92 <malloc+0x66>
 d60:	84 17       	cp	r24, r20
 d62:	95 07       	cpc	r25, r21
 d64:	69 f4       	brne	.+26     	; 0xd80 <malloc+0x54>
 d66:	10 97       	sbiw	r26, 0x00	; 0
 d68:	31 f0       	breq	.+12     	; 0xd76 <malloc+0x4a>
 d6a:	12 96       	adiw	r26, 0x02	; 2
 d6c:	0c 93       	st	X, r16
 d6e:	12 97       	sbiw	r26, 0x02	; 2
 d70:	13 96       	adiw	r26, 0x03	; 3
 d72:	1c 93       	st	X, r17
 d74:	27 c0       	rjmp	.+78     	; 0xdc4 <malloc+0x98>
 d76:	00 93 40 20 	sts	0x2040, r16	; 0x802040 <__flp>
 d7a:	10 93 41 20 	sts	0x2041, r17	; 0x802041 <__flp+0x1>
 d7e:	22 c0       	rjmp	.+68     	; 0xdc4 <malloc+0x98>
 d80:	21 15       	cp	r18, r1
 d82:	31 05       	cpc	r19, r1
 d84:	19 f0       	breq	.+6      	; 0xd8c <malloc+0x60>
 d86:	42 17       	cp	r20, r18
 d88:	53 07       	cpc	r21, r19
 d8a:	18 f4       	brcc	.+6      	; 0xd92 <malloc+0x66>
 d8c:	9a 01       	movw	r18, r20
 d8e:	bd 01       	movw	r22, r26
 d90:	ef 01       	movw	r28, r30
 d92:	df 01       	movw	r26, r30
 d94:	f8 01       	movw	r30, r16
 d96:	db cf       	rjmp	.-74     	; 0xd4e <malloc+0x22>
 d98:	21 15       	cp	r18, r1
 d9a:	31 05       	cpc	r19, r1
 d9c:	f9 f0       	breq	.+62     	; 0xddc <malloc+0xb0>
 d9e:	28 1b       	sub	r18, r24
 da0:	39 0b       	sbc	r19, r25
 da2:	24 30       	cpi	r18, 0x04	; 4
 da4:	31 05       	cpc	r19, r1
 da6:	80 f4       	brcc	.+32     	; 0xdc8 <malloc+0x9c>
 da8:	8a 81       	ldd	r24, Y+2	; 0x02
 daa:	9b 81       	ldd	r25, Y+3	; 0x03
 dac:	61 15       	cp	r22, r1
 dae:	71 05       	cpc	r23, r1
 db0:	21 f0       	breq	.+8      	; 0xdba <malloc+0x8e>
 db2:	fb 01       	movw	r30, r22
 db4:	82 83       	std	Z+2, r24	; 0x02
 db6:	93 83       	std	Z+3, r25	; 0x03
 db8:	04 c0       	rjmp	.+8      	; 0xdc2 <malloc+0x96>
 dba:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <__flp>
 dbe:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <__flp+0x1>
 dc2:	fe 01       	movw	r30, r28
 dc4:	32 96       	adiw	r30, 0x02	; 2
 dc6:	44 c0       	rjmp	.+136    	; 0xe50 <malloc+0x124>
 dc8:	fe 01       	movw	r30, r28
 dca:	e2 0f       	add	r30, r18
 dcc:	f3 1f       	adc	r31, r19
 dce:	81 93       	st	Z+, r24
 dd0:	91 93       	st	Z+, r25
 dd2:	22 50       	subi	r18, 0x02	; 2
 dd4:	31 09       	sbc	r19, r1
 dd6:	28 83       	st	Y, r18
 dd8:	39 83       	std	Y+1, r19	; 0x01
 dda:	3a c0       	rjmp	.+116    	; 0xe50 <malloc+0x124>
 ddc:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
 de0:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
 de4:	23 2b       	or	r18, r19
 de6:	41 f4       	brne	.+16     	; 0xdf8 <malloc+0xcc>
 de8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 dec:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 df0:	20 93 3e 20 	sts	0x203E, r18	; 0x80203e <__brkval>
 df4:	30 93 3f 20 	sts	0x203F, r19	; 0x80203f <__brkval+0x1>
 df8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 dfc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 e00:	21 15       	cp	r18, r1
 e02:	31 05       	cpc	r19, r1
 e04:	41 f4       	brne	.+16     	; 0xe16 <malloc+0xea>
 e06:	2d b7       	in	r18, 0x3d	; 61
 e08:	3e b7       	in	r19, 0x3e	; 62
 e0a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 e0e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 e12:	24 1b       	sub	r18, r20
 e14:	35 0b       	sbc	r19, r21
 e16:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <__brkval>
 e1a:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <__brkval+0x1>
 e1e:	e2 17       	cp	r30, r18
 e20:	f3 07       	cpc	r31, r19
 e22:	a0 f4       	brcc	.+40     	; 0xe4c <malloc+0x120>
 e24:	2e 1b       	sub	r18, r30
 e26:	3f 0b       	sbc	r19, r31
 e28:	28 17       	cp	r18, r24
 e2a:	39 07       	cpc	r19, r25
 e2c:	78 f0       	brcs	.+30     	; 0xe4c <malloc+0x120>
 e2e:	ac 01       	movw	r20, r24
 e30:	4e 5f       	subi	r20, 0xFE	; 254
 e32:	5f 4f       	sbci	r21, 0xFF	; 255
 e34:	24 17       	cp	r18, r20
 e36:	35 07       	cpc	r19, r21
 e38:	48 f0       	brcs	.+18     	; 0xe4c <malloc+0x120>
 e3a:	4e 0f       	add	r20, r30
 e3c:	5f 1f       	adc	r21, r31
 e3e:	40 93 3e 20 	sts	0x203E, r20	; 0x80203e <__brkval>
 e42:	50 93 3f 20 	sts	0x203F, r21	; 0x80203f <__brkval+0x1>
 e46:	81 93       	st	Z+, r24
 e48:	91 93       	st	Z+, r25
 e4a:	02 c0       	rjmp	.+4      	; 0xe50 <malloc+0x124>
 e4c:	e0 e0       	ldi	r30, 0x00	; 0
 e4e:	f0 e0       	ldi	r31, 0x00	; 0
 e50:	cf 01       	movw	r24, r30
 e52:	df 91       	pop	r29
 e54:	cf 91       	pop	r28
 e56:	1f 91       	pop	r17
 e58:	0f 91       	pop	r16
 e5a:	08 95       	ret

00000e5c <free>:
 e5c:	cf 93       	push	r28
 e5e:	df 93       	push	r29
 e60:	00 97       	sbiw	r24, 0x00	; 0
 e62:	09 f4       	brne	.+2      	; 0xe66 <free+0xa>
 e64:	81 c0       	rjmp	.+258    	; 0xf68 <free+0x10c>
 e66:	fc 01       	movw	r30, r24
 e68:	32 97       	sbiw	r30, 0x02	; 2
 e6a:	12 82       	std	Z+2, r1	; 0x02
 e6c:	13 82       	std	Z+3, r1	; 0x03
 e6e:	a0 91 40 20 	lds	r26, 0x2040	; 0x802040 <__flp>
 e72:	b0 91 41 20 	lds	r27, 0x2041	; 0x802041 <__flp+0x1>
 e76:	10 97       	sbiw	r26, 0x00	; 0
 e78:	81 f4       	brne	.+32     	; 0xe9a <free+0x3e>
 e7a:	20 81       	ld	r18, Z
 e7c:	31 81       	ldd	r19, Z+1	; 0x01
 e7e:	82 0f       	add	r24, r18
 e80:	93 1f       	adc	r25, r19
 e82:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
 e86:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
 e8a:	28 17       	cp	r18, r24
 e8c:	39 07       	cpc	r19, r25
 e8e:	51 f5       	brne	.+84     	; 0xee4 <free+0x88>
 e90:	e0 93 3e 20 	sts	0x203E, r30	; 0x80203e <__brkval>
 e94:	f0 93 3f 20 	sts	0x203F, r31	; 0x80203f <__brkval+0x1>
 e98:	67 c0       	rjmp	.+206    	; 0xf68 <free+0x10c>
 e9a:	ed 01       	movw	r28, r26
 e9c:	20 e0       	ldi	r18, 0x00	; 0
 e9e:	30 e0       	ldi	r19, 0x00	; 0
 ea0:	ce 17       	cp	r28, r30
 ea2:	df 07       	cpc	r29, r31
 ea4:	40 f4       	brcc	.+16     	; 0xeb6 <free+0x5a>
 ea6:	4a 81       	ldd	r20, Y+2	; 0x02
 ea8:	5b 81       	ldd	r21, Y+3	; 0x03
 eaa:	9e 01       	movw	r18, r28
 eac:	41 15       	cp	r20, r1
 eae:	51 05       	cpc	r21, r1
 eb0:	f1 f0       	breq	.+60     	; 0xeee <free+0x92>
 eb2:	ea 01       	movw	r28, r20
 eb4:	f5 cf       	rjmp	.-22     	; 0xea0 <free+0x44>
 eb6:	c2 83       	std	Z+2, r28	; 0x02
 eb8:	d3 83       	std	Z+3, r29	; 0x03
 eba:	40 81       	ld	r20, Z
 ebc:	51 81       	ldd	r21, Z+1	; 0x01
 ebe:	84 0f       	add	r24, r20
 ec0:	95 1f       	adc	r25, r21
 ec2:	c8 17       	cp	r28, r24
 ec4:	d9 07       	cpc	r29, r25
 ec6:	59 f4       	brne	.+22     	; 0xede <free+0x82>
 ec8:	88 81       	ld	r24, Y
 eca:	99 81       	ldd	r25, Y+1	; 0x01
 ecc:	84 0f       	add	r24, r20
 ece:	95 1f       	adc	r25, r21
 ed0:	02 96       	adiw	r24, 0x02	; 2
 ed2:	80 83       	st	Z, r24
 ed4:	91 83       	std	Z+1, r25	; 0x01
 ed6:	8a 81       	ldd	r24, Y+2	; 0x02
 ed8:	9b 81       	ldd	r25, Y+3	; 0x03
 eda:	82 83       	std	Z+2, r24	; 0x02
 edc:	93 83       	std	Z+3, r25	; 0x03
 ede:	21 15       	cp	r18, r1
 ee0:	31 05       	cpc	r19, r1
 ee2:	29 f4       	brne	.+10     	; 0xeee <free+0x92>
 ee4:	e0 93 40 20 	sts	0x2040, r30	; 0x802040 <__flp>
 ee8:	f0 93 41 20 	sts	0x2041, r31	; 0x802041 <__flp+0x1>
 eec:	3d c0       	rjmp	.+122    	; 0xf68 <free+0x10c>
 eee:	e9 01       	movw	r28, r18
 ef0:	ea 83       	std	Y+2, r30	; 0x02
 ef2:	fb 83       	std	Y+3, r31	; 0x03
 ef4:	49 91       	ld	r20, Y+
 ef6:	59 91       	ld	r21, Y+
 ef8:	c4 0f       	add	r28, r20
 efa:	d5 1f       	adc	r29, r21
 efc:	ec 17       	cp	r30, r28
 efe:	fd 07       	cpc	r31, r29
 f00:	61 f4       	brne	.+24     	; 0xf1a <free+0xbe>
 f02:	80 81       	ld	r24, Z
 f04:	91 81       	ldd	r25, Z+1	; 0x01
 f06:	84 0f       	add	r24, r20
 f08:	95 1f       	adc	r25, r21
 f0a:	02 96       	adiw	r24, 0x02	; 2
 f0c:	e9 01       	movw	r28, r18
 f0e:	88 83       	st	Y, r24
 f10:	99 83       	std	Y+1, r25	; 0x01
 f12:	82 81       	ldd	r24, Z+2	; 0x02
 f14:	93 81       	ldd	r25, Z+3	; 0x03
 f16:	8a 83       	std	Y+2, r24	; 0x02
 f18:	9b 83       	std	Y+3, r25	; 0x03
 f1a:	e0 e0       	ldi	r30, 0x00	; 0
 f1c:	f0 e0       	ldi	r31, 0x00	; 0
 f1e:	12 96       	adiw	r26, 0x02	; 2
 f20:	8d 91       	ld	r24, X+
 f22:	9c 91       	ld	r25, X
 f24:	13 97       	sbiw	r26, 0x03	; 3
 f26:	00 97       	sbiw	r24, 0x00	; 0
 f28:	19 f0       	breq	.+6      	; 0xf30 <free+0xd4>
 f2a:	fd 01       	movw	r30, r26
 f2c:	dc 01       	movw	r26, r24
 f2e:	f7 cf       	rjmp	.-18     	; 0xf1e <free+0xc2>
 f30:	8d 91       	ld	r24, X+
 f32:	9c 91       	ld	r25, X
 f34:	11 97       	sbiw	r26, 0x01	; 1
 f36:	9d 01       	movw	r18, r26
 f38:	2e 5f       	subi	r18, 0xFE	; 254
 f3a:	3f 4f       	sbci	r19, 0xFF	; 255
 f3c:	82 0f       	add	r24, r18
 f3e:	93 1f       	adc	r25, r19
 f40:	20 91 3e 20 	lds	r18, 0x203E	; 0x80203e <__brkval>
 f44:	30 91 3f 20 	lds	r19, 0x203F	; 0x80203f <__brkval+0x1>
 f48:	28 17       	cp	r18, r24
 f4a:	39 07       	cpc	r19, r25
 f4c:	69 f4       	brne	.+26     	; 0xf68 <free+0x10c>
 f4e:	30 97       	sbiw	r30, 0x00	; 0
 f50:	29 f4       	brne	.+10     	; 0xf5c <free+0x100>
 f52:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <__flp>
 f56:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <__flp+0x1>
 f5a:	02 c0       	rjmp	.+4      	; 0xf60 <free+0x104>
 f5c:	12 82       	std	Z+2, r1	; 0x02
 f5e:	13 82       	std	Z+3, r1	; 0x03
 f60:	a0 93 3e 20 	sts	0x203E, r26	; 0x80203e <__brkval>
 f64:	b0 93 3f 20 	sts	0x203F, r27	; 0x80203f <__brkval+0x1>
 f68:	df 91       	pop	r29
 f6a:	cf 91       	pop	r28
 f6c:	08 95       	ret

00000f6e <memset>:
 f6e:	dc 01       	movw	r26, r24
 f70:	01 c0       	rjmp	.+2      	; 0xf74 <memset+0x6>
 f72:	6d 93       	st	X+, r22
 f74:	41 50       	subi	r20, 0x01	; 1
 f76:	50 40       	sbci	r21, 0x00	; 0
 f78:	e0 f7       	brcc	.-8      	; 0xf72 <memset+0x4>
 f7a:	08 95       	ret

00000f7c <_exit>:
 f7c:	f8 94       	cli

00000f7e <__stop_program>:
 f7e:	ff cf       	rjmp	.-2      	; 0xf7e <__stop_program>
