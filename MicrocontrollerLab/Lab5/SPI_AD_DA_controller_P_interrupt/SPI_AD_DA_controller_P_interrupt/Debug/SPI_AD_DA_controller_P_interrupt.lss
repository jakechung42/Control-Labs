
SPI_AD_DA_controller_P_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010e  0080010e  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098f  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  000012d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	93 c0       	rjmp	.+294    	; 0x13e <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ef       	ldi	r30, 0xF4	; 244
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 33       	cpi	r26, 0x33	; 51
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	c3 c3       	rjmp	.+1926   	; 0x7f0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}

// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
float	Error;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	Vel_Set_v = -3.0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	a0 e4       	ldi	r26, 0x40	; 64
  9e:	b0 ec       	ldi	r27, 0xC0	; 192
  a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Vel_Set_v>
  a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Vel_Set_v+0x1>
  a8:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Vel_Set_v+0x2>
  ac:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Vel_Set_v+0x3>

	Max_Voltage = 5.0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a0 ea       	ldi	r26, 0xA0	; 160
  b6:	b0 e4       	ldi	r27, 0x40	; 64
  b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Max_Voltage>
  bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Max_Voltage+0x1>
  c0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <Max_Voltage+0x2>
  c4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <Max_Voltage+0x3>
	Kp          = 1.0; 	// Proportional control constant
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e8       	ldi	r26, 0x80	; 128
  ce:	bf e3       	ldi	r27, 0x3F	; 63
  d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Kp>
  d4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Kp+0x1>
  d8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <Kp+0x2>
  dc:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <Kp+0x3>
	// The incriment needs to be very small so the velocity change is obsevable
	
	// Note if you have print statments active this will slow the control loop dramatically

	//USART Setup
	UBRR0H = MYUBRR >> 8;
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__iob+0x3>
  f8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__iob+0x2>

	// AD initialization
	ADMUX  = 0b00000000; //Input on AD Channel 0
  fc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
 106:	8c e2       	ldi	r24, 0x2C	; 44
 108:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
 10a:	82 e8       	ldi	r24, 0x82	; 130
 10c:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
 10e:	82 e5       	ldi	r24, 0x52	; 82
 110:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
 112:	1d bc       	out	0x2d, r1	; 45

	//Interrupt counter set up
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 11e:	af e6       	ldi	r26, 0x6F	; 111
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	82 60       	ori	r24, 0x02	; 2
 126:	8c 93       	st	X, r24
	
	sei(); // Enable global interrupt
 128:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) - 1

	OCR1A = 15999;   //Set CTC compare value to 1kHz at 16MHz AVR clock, with a prescaler of 1
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	9e e3       	ldi	r25, 0x3E	; 62
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>

	//Prescaler Fcpu/1 to get 1kHz 
	TCCR1B = TCCR1B | (1 << CS10);
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0xa4>

0000013e <__vector_11>:

	}
}

ISR(TIMER1_COMPA_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 92       	push	r8
 14a:	9f 92       	push	r9
 14c:	af 92       	push	r10
 14e:	bf 92       	push	r11
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	Vel_Set_v += .005;									// The motor velocity voltage is cycled from -3 volts to +3 volts
 170:	2a e0       	ldi	r18, 0x0A	; 10
 172:	37 ed       	ldi	r19, 0xD7	; 215
 174:	43 ea       	ldi	r20, 0xA3	; 163
 176:	5b e3       	ldi	r21, 0x3B	; 59
 178:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Vel_Set_v>
 17c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Vel_Set_v+0x1>
 180:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Vel_Set_v+0x2>
 184:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Vel_Set_v+0x3>
 188:	cf d0       	rcall	.+414    	; 0x328 <__addsf3>
 18a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <Vel_Set_v>
 18e:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <Vel_Set_v+0x1>
 192:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Vel_Set_v+0x2>
 196:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Vel_Set_v+0x3>
	if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e4       	ldi	r20, 0x40	; 64
 1a0:	50 e4       	ldi	r21, 0x40	; 64
 1a2:	9b d2       	rcall	.+1334   	; 0x6da <__gesf2>
 1a4:	88 23       	and	r24, r24
 1a6:	64 f0       	brlt	.+24     	; 0x1c0 <__vector_11+0x82>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	a0 e4       	ldi	r26, 0x40	; 64
 1ae:	b0 ec       	ldi	r27, 0xC0	; 192
 1b0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Vel_Set_v>
 1b4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Vel_Set_v+0x1>
 1b8:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Vel_Set_v+0x2>
 1bc:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Vel_Set_v+0x3>

	ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 1c0:	ea e7       	ldi	r30, 0x7A	; 122
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 1ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 1ce:	86 fd       	sbrc	r24, 6
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <__vector_11+0x8c>

	adc_input = ADCW; 									// Read AD value
 1d2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 1d6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 1da:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <adc_input+0x1>
 1de:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <adc_input>
	adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	98 d1       	rcall	.+816    	; 0x518 <__floatunsisf>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 ea       	ldi	r20, 0xA0	; 160
 1ee:	5c e3       	ldi	r21, 0x3C	; 60
 1f0:	78 d2       	rcall	.+1264   	; 0x6e2 <__mulsf3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e2       	ldi	r20, 0x20	; 32
 1f8:	51 e4       	ldi	r21, 0x41	; 65
 1fa:	95 d0       	rcall	.+298    	; 0x326 <__subsf3>
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_input_v>
 204:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adc_input_v+0x1>
 208:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adc_input_v+0x2>
 20c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adc_input_v+0x3>
	// Note the input is bipolar +- 5 volts
	// Note that the (10./1024.) term needs the decimal point
	// or else it is interrupted as an integer and the result is zero
	// Control Equation

	Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 5 volts)
 210:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Vel_Set_v>
 214:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Vel_Set_v+0x1>
 218:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Vel_Set_v+0x2>
 21c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Vel_Set_v+0x3>
 220:	82 d0       	rcall	.+260    	; 0x326 <__subsf3>
 222:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <Error>
 226:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <Error+0x1>
 22a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Error+0x2>
 22e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Error+0x3>
	Control = Kp * Error;  						    // Control (units are voltage  +- 5 volts)
 232:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Kp>
 236:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <Kp+0x1>
 23a:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <Kp+0x2>
 23e:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <Kp+0x3>
 242:	4f d2       	rcall	.+1182   	; 0x6e2 <__mulsf3>
 244:	4b 01       	movw	r8, r22
 246:	5c 01       	movw	r10, r24
 248:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 24c:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 250:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
 254:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 258:	9f 77       	andi	r25, 0x7F	; 127
 25a:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <Max_Voltage>
 25e:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <Max_Voltage+0x1>
 262:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <Max_Voltage+0x2>
 266:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <Max_Voltage+0x3>
 26a:	a7 01       	movw	r20, r14
 26c:	96 01       	movw	r18, r12
 26e:	35 d2       	rcall	.+1130   	; 0x6da <__gesf2>
 270:	88 23       	and	r24, r24
 272:	54 f0       	brlt	.+20     	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 274:	b7 fa       	bst	r11, 7
 276:	f7 f8       	bld	r15, 7
	Control = copysign(Max_Voltage,Control);
 278:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <__data_end>
 27c:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <__data_end+0x1>
 280:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <__data_end+0x2>
 284:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <__data_end+0x3>

	adc_output = floor((Control + 10.)*4096./20.);  			// Convert control voltage to a digital number for output
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e2       	ldi	r20, 0x20	; 32
 28e:	51 e4       	ldi	r21, 0x41	; 65
 290:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 294:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 298:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 29c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 2a0:	43 d0       	rcall	.+134    	; 0x328 <__addsf3>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e8       	ldi	r20, 0x80	; 128
 2a8:	55 e4       	ldi	r21, 0x45	; 69
 2aa:	1b d2       	rcall	.+1078   	; 0x6e2 <__mulsf3>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 ea       	ldi	r20, 0xA0	; 160
 2b2:	51 e4       	ldi	r21, 0x41	; 65
 2b4:	9d d0       	rcall	.+314    	; 0x3f0 <__divsf3>
 2b6:	6d d1       	rcall	.+730    	; 0x592 <floor>
 2b8:	03 d1       	rcall	.+518    	; 0x4c0 <__fixunssfsi>
 2ba:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <adc_output+0x1>
 2be:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <adc_output>
		
	// printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
		
	// Output adc_output to DAC
	spi_data_0 = 0x00; 								// Zero spi_data_0
	spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 2c2:	9b 01       	movw	r18, r22
 2c4:	22 27       	eor	r18, r18
 2c6:	3f 70       	andi	r19, 0x0F	; 15
	// to the lower 4 bit positions and
	spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
 2c8:	20 e3       	ldi	r18, 0x30	; 48
 2ca:	23 0f       	add	r18, r19
 2cc:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <spi_data_0>
	spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
 2d0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <spi_data_1>
	// bits 0-7 to the lower 8 bit positions
	cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 2d4:	8b b1       	in	r24, 0x0b	; 11
 2d6:	8f 77       	andi	r24, 0x7F	; 127
 2d8:	8b b9       	out	0x0b, r24	; 11
	dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 2da:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <spi_data_0>
 2de:	d6 de       	rcall	.-596    	; 0x8c <spi_write_read>
 2e0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 2e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <spi_data_1>
 2e8:	d1 de       	rcall	.-606    	; 0x8c <spi_write_read>
 2ea:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	sbi(PORTD,7); 	
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	8b b9       	out	0x0b, r24	; 11
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	cf 90       	pop	r12
 314:	bf 90       	pop	r11
 316:	af 90       	pop	r10
 318:	9f 90       	pop	r9
 31a:	8f 90       	pop	r8
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__subsf3>:
 326:	50 58       	subi	r21, 0x80	; 128

00000328 <__addsf3>:
 328:	bb 27       	eor	r27, r27
 32a:	aa 27       	eor	r26, r26
 32c:	0e d0       	rcall	.+28     	; 0x34a <__addsf3x>
 32e:	84 c1       	rjmp	.+776    	; 0x638 <__fp_round>
 330:	75 d1       	rcall	.+746    	; 0x61c <__fp_pscA>
 332:	30 f0       	brcs	.+12     	; 0x340 <__addsf3+0x18>
 334:	7a d1       	rcall	.+756    	; 0x62a <__fp_pscB>
 336:	20 f0       	brcs	.+8      	; 0x340 <__addsf3+0x18>
 338:	31 f4       	brne	.+12     	; 0x346 <__addsf3+0x1e>
 33a:	9f 3f       	cpi	r25, 0xFF	; 255
 33c:	11 f4       	brne	.+4      	; 0x342 <__addsf3+0x1a>
 33e:	1e f4       	brtc	.+6      	; 0x346 <__addsf3+0x1e>
 340:	6a c1       	rjmp	.+724    	; 0x616 <__fp_nan>
 342:	0e f4       	brtc	.+2      	; 0x346 <__addsf3+0x1e>
 344:	e0 95       	com	r30
 346:	e7 fb       	bst	r30, 7
 348:	37 c1       	rjmp	.+622    	; 0x5b8 <__fp_inf>

0000034a <__addsf3x>:
 34a:	e9 2f       	mov	r30, r25
 34c:	86 d1       	rcall	.+780    	; 0x65a <__fp_split3>
 34e:	80 f3       	brcs	.-32     	; 0x330 <__addsf3+0x8>
 350:	ba 17       	cp	r27, r26
 352:	62 07       	cpc	r22, r18
 354:	73 07       	cpc	r23, r19
 356:	84 07       	cpc	r24, r20
 358:	95 07       	cpc	r25, r21
 35a:	18 f0       	brcs	.+6      	; 0x362 <__addsf3x+0x18>
 35c:	71 f4       	brne	.+28     	; 0x37a <__addsf3x+0x30>
 35e:	9e f5       	brtc	.+102    	; 0x3c6 <__addsf3x+0x7c>
 360:	b5 c1       	rjmp	.+874    	; 0x6cc <__fp_zero>
 362:	0e f4       	brtc	.+2      	; 0x366 <__addsf3x+0x1c>
 364:	e0 95       	com	r30
 366:	0b 2e       	mov	r0, r27
 368:	ba 2f       	mov	r27, r26
 36a:	a0 2d       	mov	r26, r0
 36c:	0b 01       	movw	r0, r22
 36e:	b9 01       	movw	r22, r18
 370:	90 01       	movw	r18, r0
 372:	0c 01       	movw	r0, r24
 374:	ca 01       	movw	r24, r20
 376:	a0 01       	movw	r20, r0
 378:	11 24       	eor	r1, r1
 37a:	ff 27       	eor	r31, r31
 37c:	59 1b       	sub	r21, r25
 37e:	99 f0       	breq	.+38     	; 0x3a6 <__addsf3x+0x5c>
 380:	59 3f       	cpi	r21, 0xF9	; 249
 382:	50 f4       	brcc	.+20     	; 0x398 <__addsf3x+0x4e>
 384:	50 3e       	cpi	r21, 0xE0	; 224
 386:	68 f1       	brcs	.+90     	; 0x3e2 <__addsf3x+0x98>
 388:	1a 16       	cp	r1, r26
 38a:	f0 40       	sbci	r31, 0x00	; 0
 38c:	a2 2f       	mov	r26, r18
 38e:	23 2f       	mov	r18, r19
 390:	34 2f       	mov	r19, r20
 392:	44 27       	eor	r20, r20
 394:	58 5f       	subi	r21, 0xF8	; 248
 396:	f3 cf       	rjmp	.-26     	; 0x37e <__addsf3x+0x34>
 398:	46 95       	lsr	r20
 39a:	37 95       	ror	r19
 39c:	27 95       	ror	r18
 39e:	a7 95       	ror	r26
 3a0:	f0 40       	sbci	r31, 0x00	; 0
 3a2:	53 95       	inc	r21
 3a4:	c9 f7       	brne	.-14     	; 0x398 <__addsf3x+0x4e>
 3a6:	7e f4       	brtc	.+30     	; 0x3c6 <__addsf3x+0x7c>
 3a8:	1f 16       	cp	r1, r31
 3aa:	ba 0b       	sbc	r27, r26
 3ac:	62 0b       	sbc	r22, r18
 3ae:	73 0b       	sbc	r23, r19
 3b0:	84 0b       	sbc	r24, r20
 3b2:	ba f0       	brmi	.+46     	; 0x3e2 <__addsf3x+0x98>
 3b4:	91 50       	subi	r25, 0x01	; 1
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <__addsf3x+0x96>
 3b8:	ff 0f       	add	r31, r31
 3ba:	bb 1f       	adc	r27, r27
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	88 1f       	adc	r24, r24
 3c2:	c2 f7       	brpl	.-16     	; 0x3b4 <__addsf3x+0x6a>
 3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <__addsf3x+0x98>
 3c6:	ba 0f       	add	r27, r26
 3c8:	62 1f       	adc	r22, r18
 3ca:	73 1f       	adc	r23, r19
 3cc:	84 1f       	adc	r24, r20
 3ce:	48 f4       	brcc	.+18     	; 0x3e2 <__addsf3x+0x98>
 3d0:	87 95       	ror	r24
 3d2:	77 95       	ror	r23
 3d4:	67 95       	ror	r22
 3d6:	b7 95       	ror	r27
 3d8:	f7 95       	ror	r31
 3da:	9e 3f       	cpi	r25, 0xFE	; 254
 3dc:	08 f0       	brcs	.+2      	; 0x3e0 <__addsf3x+0x96>
 3de:	b3 cf       	rjmp	.-154    	; 0x346 <__addsf3+0x1e>
 3e0:	93 95       	inc	r25
 3e2:	88 0f       	add	r24, r24
 3e4:	08 f0       	brcs	.+2      	; 0x3e8 <__addsf3x+0x9e>
 3e6:	99 27       	eor	r25, r25
 3e8:	ee 0f       	add	r30, r30
 3ea:	97 95       	ror	r25
 3ec:	87 95       	ror	r24
 3ee:	08 95       	ret

000003f0 <__divsf3>:
 3f0:	0c d0       	rcall	.+24     	; 0x40a <__divsf3x>
 3f2:	22 c1       	rjmp	.+580    	; 0x638 <__fp_round>
 3f4:	1a d1       	rcall	.+564    	; 0x62a <__fp_pscB>
 3f6:	40 f0       	brcs	.+16     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3f8:	11 d1       	rcall	.+546    	; 0x61c <__fp_pscA>
 3fa:	30 f0       	brcs	.+12     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3fc:	21 f4       	brne	.+8      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fe:	5f 3f       	cpi	r21, 0xFF	; 255
 400:	19 f0       	breq	.+6      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 402:	da c0       	rjmp	.+436    	; 0x5b8 <__fp_inf>
 404:	51 11       	cpse	r21, r1
 406:	63 c1       	rjmp	.+710    	; 0x6ce <__fp_szero>
 408:	06 c1       	rjmp	.+524    	; 0x616 <__fp_nan>

0000040a <__divsf3x>:
 40a:	27 d1       	rcall	.+590    	; 0x65a <__fp_split3>
 40c:	98 f3       	brcs	.-26     	; 0x3f4 <__divsf3+0x4>

0000040e <__divsf3_pse>:
 40e:	99 23       	and	r25, r25
 410:	c9 f3       	breq	.-14     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 412:	55 23       	and	r21, r21
 414:	b1 f3       	breq	.-20     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 416:	95 1b       	sub	r25, r21
 418:	55 0b       	sbc	r21, r21
 41a:	bb 27       	eor	r27, r27
 41c:	aa 27       	eor	r26, r26
 41e:	62 17       	cp	r22, r18
 420:	73 07       	cpc	r23, r19
 422:	84 07       	cpc	r24, r20
 424:	38 f0       	brcs	.+14     	; 0x434 <__divsf3_pse+0x26>
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	44 1f       	adc	r20, r20
 430:	aa 1f       	adc	r26, r26
 432:	a9 f3       	breq	.-22     	; 0x41e <__divsf3_pse+0x10>
 434:	33 d0       	rcall	.+102    	; 0x49c <__divsf3_pse+0x8e>
 436:	0e 2e       	mov	r0, r30
 438:	3a f0       	brmi	.+14     	; 0x448 <__divsf3_pse+0x3a>
 43a:	e0 e8       	ldi	r30, 0x80	; 128
 43c:	30 d0       	rcall	.+96     	; 0x49e <__divsf3_pse+0x90>
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	50 40       	sbci	r21, 0x00	; 0
 442:	e6 95       	lsr	r30
 444:	00 1c       	adc	r0, r0
 446:	ca f7       	brpl	.-14     	; 0x43a <__divsf3_pse+0x2c>
 448:	29 d0       	rcall	.+82     	; 0x49c <__divsf3_pse+0x8e>
 44a:	fe 2f       	mov	r31, r30
 44c:	27 d0       	rcall	.+78     	; 0x49c <__divsf3_pse+0x8e>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	bb 1f       	adc	r27, r27
 456:	26 17       	cp	r18, r22
 458:	37 07       	cpc	r19, r23
 45a:	48 07       	cpc	r20, r24
 45c:	ab 07       	cpc	r26, r27
 45e:	b0 e8       	ldi	r27, 0x80	; 128
 460:	09 f0       	breq	.+2      	; 0x464 <__divsf3_pse+0x56>
 462:	bb 0b       	sbc	r27, r27
 464:	80 2d       	mov	r24, r0
 466:	bf 01       	movw	r22, r30
 468:	ff 27       	eor	r31, r31
 46a:	93 58       	subi	r25, 0x83	; 131
 46c:	5f 4f       	sbci	r21, 0xFF	; 255
 46e:	2a f0       	brmi	.+10     	; 0x47a <__divsf3_pse+0x6c>
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	51 05       	cpc	r21, r1
 474:	68 f0       	brcs	.+26     	; 0x490 <__divsf3_pse+0x82>
 476:	a0 c0       	rjmp	.+320    	; 0x5b8 <__fp_inf>
 478:	2a c1       	rjmp	.+596    	; 0x6ce <__fp_szero>
 47a:	5f 3f       	cpi	r21, 0xFF	; 255
 47c:	ec f3       	brlt	.-6      	; 0x478 <__divsf3_pse+0x6a>
 47e:	98 3e       	cpi	r25, 0xE8	; 232
 480:	dc f3       	brlt	.-10     	; 0x478 <__divsf3_pse+0x6a>
 482:	86 95       	lsr	r24
 484:	77 95       	ror	r23
 486:	67 95       	ror	r22
 488:	b7 95       	ror	r27
 48a:	f7 95       	ror	r31
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	c9 f7       	brne	.-14     	; 0x482 <__divsf3_pse+0x74>
 490:	88 0f       	add	r24, r24
 492:	91 1d       	adc	r25, r1
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	97 f9       	bld	r25, 7
 49a:	08 95       	ret
 49c:	e1 e0       	ldi	r30, 0x01	; 1
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	bb 1f       	adc	r27, r27
 4a6:	62 17       	cp	r22, r18
 4a8:	73 07       	cpc	r23, r19
 4aa:	84 07       	cpc	r24, r20
 4ac:	ba 07       	cpc	r27, r26
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__divsf3_pse+0xaa>
 4b0:	62 1b       	sub	r22, r18
 4b2:	73 0b       	sbc	r23, r19
 4b4:	84 0b       	sbc	r24, r20
 4b6:	ba 0b       	sbc	r27, r26
 4b8:	ee 1f       	adc	r30, r30
 4ba:	88 f7       	brcc	.-30     	; 0x49e <__divsf3_pse+0x90>
 4bc:	e0 95       	com	r30
 4be:	08 95       	ret

000004c0 <__fixunssfsi>:
 4c0:	d4 d0       	rcall	.+424    	; 0x66a <__fp_splitA>
 4c2:	88 f0       	brcs	.+34     	; 0x4e6 <__fixunssfsi+0x26>
 4c4:	9f 57       	subi	r25, 0x7F	; 127
 4c6:	90 f0       	brcs	.+36     	; 0x4ec <__fixunssfsi+0x2c>
 4c8:	b9 2f       	mov	r27, r25
 4ca:	99 27       	eor	r25, r25
 4cc:	b7 51       	subi	r27, 0x17	; 23
 4ce:	a0 f0       	brcs	.+40     	; 0x4f8 <__fixunssfsi+0x38>
 4d0:	d1 f0       	breq	.+52     	; 0x506 <__stack+0x7>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a f0       	brmi	.+6      	; 0x4e2 <__fixunssfsi+0x22>
 4dc:	ba 95       	dec	r27
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__fixunssfsi+0x12>
 4e0:	12 c0       	rjmp	.+36     	; 0x506 <__stack+0x7>
 4e2:	b1 30       	cpi	r27, 0x01	; 1
 4e4:	81 f0       	breq	.+32     	; 0x506 <__stack+0x7>
 4e6:	f2 d0       	rcall	.+484    	; 0x6cc <__fp_zero>
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	08 95       	ret
 4ec:	ef c0       	rjmp	.+478    	; 0x6cc <__fp_zero>
 4ee:	67 2f       	mov	r22, r23
 4f0:	78 2f       	mov	r23, r24
 4f2:	88 27       	eor	r24, r24
 4f4:	b8 5f       	subi	r27, 0xF8	; 248
 4f6:	39 f0       	breq	.+14     	; 0x506 <__stack+0x7>
 4f8:	b9 3f       	cpi	r27, 0xF9	; 249
 4fa:	cc f3       	brlt	.-14     	; 0x4ee <__fixunssfsi+0x2e>
 4fc:	86 95       	lsr	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b3 95       	inc	r27
 504:	d9 f7       	brne	.-10     	; 0x4fc <__fixunssfsi+0x3c>
 506:	3e f4       	brtc	.+14     	; 0x516 <__stack+0x17>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <__floatunsisf>:
 518:	e8 94       	clt
 51a:	09 c0       	rjmp	.+18     	; 0x52e <__floatsisf+0x12>

0000051c <__floatsisf>:
 51c:	97 fb       	bst	r25, 7
 51e:	3e f4       	brtc	.+14     	; 0x52e <__floatsisf+0x12>
 520:	90 95       	com	r25
 522:	80 95       	com	r24
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	99 23       	and	r25, r25
 530:	a9 f0       	breq	.+42     	; 0x55c <__floatsisf+0x40>
 532:	f9 2f       	mov	r31, r25
 534:	96 e9       	ldi	r25, 0x96	; 150
 536:	bb 27       	eor	r27, r27
 538:	93 95       	inc	r25
 53a:	f6 95       	lsr	r31
 53c:	87 95       	ror	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f1 11       	cpse	r31, r1
 546:	f8 cf       	rjmp	.-16     	; 0x538 <__floatsisf+0x1c>
 548:	fa f4       	brpl	.+62     	; 0x588 <__floatsisf+0x6c>
 54a:	bb 0f       	add	r27, r27
 54c:	11 f4       	brne	.+4      	; 0x552 <__floatsisf+0x36>
 54e:	60 ff       	sbrs	r22, 0
 550:	1b c0       	rjmp	.+54     	; 0x588 <__floatsisf+0x6c>
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__floatsisf+0x6c>
 55c:	88 23       	and	r24, r24
 55e:	11 f0       	breq	.+4      	; 0x564 <__floatsisf+0x48>
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	11 c0       	rjmp	.+34     	; 0x586 <__floatsisf+0x6a>
 564:	77 23       	and	r23, r23
 566:	21 f0       	breq	.+8      	; 0x570 <__floatsisf+0x54>
 568:	9e e8       	ldi	r25, 0x8E	; 142
 56a:	87 2f       	mov	r24, r23
 56c:	76 2f       	mov	r23, r22
 56e:	05 c0       	rjmp	.+10     	; 0x57a <__floatsisf+0x5e>
 570:	66 23       	and	r22, r22
 572:	71 f0       	breq	.+28     	; 0x590 <__floatsisf+0x74>
 574:	96 e8       	ldi	r25, 0x86	; 134
 576:	86 2f       	mov	r24, r22
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	2a f0       	brmi	.+10     	; 0x588 <__floatsisf+0x6c>
 57e:	9a 95       	dec	r25
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	da f7       	brpl	.-10     	; 0x57e <__floatsisf+0x62>
 588:	88 0f       	add	r24, r24
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	97 f9       	bld	r25, 7
 590:	08 95       	ret

00000592 <floor>:
 592:	85 d0       	rcall	.+266    	; 0x69e <__fp_trunc>
 594:	80 f0       	brcs	.+32     	; 0x5b6 <floor+0x24>
 596:	9f 37       	cpi	r25, 0x7F	; 127
 598:	40 f4       	brcc	.+16     	; 0x5aa <floor+0x18>
 59a:	91 11       	cpse	r25, r1
 59c:	0e f0       	brts	.+2      	; 0x5a0 <floor+0xe>
 59e:	97 c0       	rjmp	.+302    	; 0x6ce <__fp_szero>
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	9f eb       	ldi	r25, 0xBF	; 191
 5a8:	08 95       	ret
 5aa:	26 f4       	brtc	.+8      	; 0x5b4 <floor+0x22>
 5ac:	1b 16       	cp	r1, r27
 5ae:	61 1d       	adc	r22, r1
 5b0:	71 1d       	adc	r23, r1
 5b2:	81 1d       	adc	r24, r1
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <__fp_mintl>
 5b6:	21 c0       	rjmp	.+66     	; 0x5fa <__fp_mpack>

000005b8 <__fp_inf>:
 5b8:	97 f9       	bld	r25, 7
 5ba:	9f 67       	ori	r25, 0x7F	; 127
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <__fp_mintl>:
 5c4:	88 23       	and	r24, r24
 5c6:	71 f4       	brne	.+28     	; 0x5e4 <__fp_mintl+0x20>
 5c8:	77 23       	and	r23, r23
 5ca:	21 f0       	breq	.+8      	; 0x5d4 <__fp_mintl+0x10>
 5cc:	98 50       	subi	r25, 0x08	; 8
 5ce:	87 2b       	or	r24, r23
 5d0:	76 2f       	mov	r23, r22
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__fp_mintl+0x1e>
 5d4:	66 23       	and	r22, r22
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_mintl+0x18>
 5d8:	99 27       	eor	r25, r25
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__fp_mintl+0x32>
 5dc:	90 51       	subi	r25, 0x10	; 16
 5de:	86 2b       	or	r24, r22
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	2a f0       	brmi	.+10     	; 0x5f0 <__fp_mintl+0x2c>
 5e6:	9a 95       	dec	r25
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	da f7       	brpl	.-10     	; 0x5e6 <__fp_mintl+0x22>
 5f0:	88 0f       	add	r24, r24
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_mpack>:
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	31 f0       	breq	.+12     	; 0x60a <__fp_mpack_finite+0xc>

000005fe <__fp_mpack_finite>:
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	20 f4       	brcc	.+8      	; 0x60a <__fp_mpack_finite+0xc>
 602:	87 95       	ror	r24
 604:	77 95       	ror	r23
 606:	67 95       	ror	r22
 608:	b7 95       	ror	r27
 60a:	88 0f       	add	r24, r24
 60c:	91 1d       	adc	r25, r1
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	97 f9       	bld	r25, 7
 614:	08 95       	ret

00000616 <__fp_nan>:
 616:	9f ef       	ldi	r25, 0xFF	; 255
 618:	80 ec       	ldi	r24, 0xC0	; 192
 61a:	08 95       	ret

0000061c <__fp_pscA>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	18 06       	cpc	r1, r24
 626:	09 06       	cpc	r0, r25
 628:	08 95       	ret

0000062a <__fp_pscB>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	05 06       	cpc	r0, r21
 636:	08 95       	ret

00000638 <__fp_round>:
 638:	09 2e       	mov	r0, r25
 63a:	03 94       	inc	r0
 63c:	00 0c       	add	r0, r0
 63e:	11 f4       	brne	.+4      	; 0x644 <__fp_round+0xc>
 640:	88 23       	and	r24, r24
 642:	52 f0       	brmi	.+20     	; 0x658 <__fp_round+0x20>
 644:	bb 0f       	add	r27, r27
 646:	40 f4       	brcc	.+16     	; 0x658 <__fp_round+0x20>
 648:	bf 2b       	or	r27, r31
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0x18>
 64c:	60 ff       	sbrs	r22, 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__fp_round+0x20>
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	8f 4f       	sbci	r24, 0xFF	; 255
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__fp_split3>:
 65a:	57 fd       	sbrc	r21, 7
 65c:	90 58       	subi	r25, 0x80	; 128
 65e:	44 0f       	add	r20, r20
 660:	55 1f       	adc	r21, r21
 662:	59 f0       	breq	.+22     	; 0x67a <__fp_splitA+0x10>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	71 f0       	breq	.+28     	; 0x684 <__fp_splitA+0x1a>
 668:	47 95       	ror	r20

0000066a <__fp_splitA>:
 66a:	88 0f       	add	r24, r24
 66c:	97 fb       	bst	r25, 7
 66e:	99 1f       	adc	r25, r25
 670:	61 f0       	breq	.+24     	; 0x68a <__fp_splitA+0x20>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	79 f0       	breq	.+30     	; 0x694 <__fp_splitA+0x2a>
 676:	87 95       	ror	r24
 678:	08 95       	ret
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	55 1f       	adc	r21, r21
 682:	f2 cf       	rjmp	.-28     	; 0x668 <__fp_split3+0xe>
 684:	46 95       	lsr	r20
 686:	f1 df       	rcall	.-30     	; 0x66a <__fp_splitA>
 688:	08 c0       	rjmp	.+16     	; 0x69a <__fp_splitA+0x30>
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	99 1f       	adc	r25, r25
 692:	f1 cf       	rjmp	.-30     	; 0x676 <__fp_splitA+0xc>
 694:	86 95       	lsr	r24
 696:	71 05       	cpc	r23, r1
 698:	61 05       	cpc	r22, r1
 69a:	08 94       	sec
 69c:	08 95       	ret

0000069e <__fp_trunc>:
 69e:	e5 df       	rcall	.-54     	; 0x66a <__fp_splitA>
 6a0:	a0 f0       	brcs	.+40     	; 0x6ca <__fp_trunc+0x2c>
 6a2:	be e7       	ldi	r27, 0x7E	; 126
 6a4:	b9 17       	cp	r27, r25
 6a6:	88 f4       	brcc	.+34     	; 0x6ca <__fp_trunc+0x2c>
 6a8:	bb 27       	eor	r27, r27
 6aa:	9f 38       	cpi	r25, 0x8F	; 143
 6ac:	60 f4       	brcc	.+24     	; 0x6c6 <__fp_trunc+0x28>
 6ae:	16 16       	cp	r1, r22
 6b0:	b1 1d       	adc	r27, r1
 6b2:	67 2f       	mov	r22, r23
 6b4:	78 2f       	mov	r23, r24
 6b6:	88 27       	eor	r24, r24
 6b8:	98 5f       	subi	r25, 0xF8	; 248
 6ba:	f7 cf       	rjmp	.-18     	; 0x6aa <__fp_trunc+0xc>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b1 1d       	adc	r27, r1
 6c4:	93 95       	inc	r25
 6c6:	96 39       	cpi	r25, 0x96	; 150
 6c8:	c8 f3       	brcs	.-14     	; 0x6bc <__fp_trunc+0x1e>
 6ca:	08 95       	ret

000006cc <__fp_zero>:
 6cc:	e8 94       	clt

000006ce <__fp_szero>:
 6ce:	bb 27       	eor	r27, r27
 6d0:	66 27       	eor	r22, r22
 6d2:	77 27       	eor	r23, r23
 6d4:	cb 01       	movw	r24, r22
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__gesf2>:
 6da:	66 d0       	rcall	.+204    	; 0x7a8 <__fp_cmp>
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <__gesf2+0x6>
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__mulsf3>:
 6e2:	0b d0       	rcall	.+22     	; 0x6fa <__mulsf3x>
 6e4:	a9 cf       	rjmp	.-174    	; 0x638 <__fp_round>
 6e6:	9a df       	rcall	.-204    	; 0x61c <__fp_pscA>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <__mulsf3+0x12>
 6ea:	9f df       	rcall	.-194    	; 0x62a <__fp_pscB>
 6ec:	18 f0       	brcs	.+6      	; 0x6f4 <__mulsf3+0x12>
 6ee:	95 23       	and	r25, r21
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__mulsf3+0x12>
 6f2:	62 cf       	rjmp	.-316    	; 0x5b8 <__fp_inf>
 6f4:	90 cf       	rjmp	.-224    	; 0x616 <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	ea cf       	rjmp	.-44     	; 0x6ce <__fp_szero>

000006fa <__mulsf3x>:
 6fa:	af df       	rcall	.-162    	; 0x65a <__fp_split3>
 6fc:	a0 f3       	brcs	.-24     	; 0x6e6 <__mulsf3+0x4>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	d1 f3       	breq	.-12     	; 0x6f6 <__mulsf3+0x14>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	8a f0       	brmi	.+34     	; 0x782 <__mulsf3_pse+0x84>
 760:	e1 f0       	breq	.+56     	; 0x79a <__mulsf3_pse+0x9c>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	70 f0       	brcs	.+28     	; 0x79a <__mulsf3_pse+0x9c>
 77e:	1c cf       	rjmp	.-456    	; 0x5b8 <__fp_inf>
 780:	a6 cf       	rjmp	.-180    	; 0x6ce <__fp_szero>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	ec f3       	brlt	.-6      	; 0x780 <__mulsf3_pse+0x82>
 786:	98 3e       	cpi	r25, 0xE8	; 232
 788:	dc f3       	brlt	.-10     	; 0x780 <__mulsf3_pse+0x82>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f7 95       	ror	r31
 794:	e7 95       	ror	r30
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c1 f7       	brne	.-16     	; 0x78a <__mulsf3_pse+0x8c>
 79a:	fe 2b       	or	r31, r30
 79c:	88 0f       	add	r24, r24
 79e:	91 1d       	adc	r25, r1
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <__fp_cmp>:
 7a8:	99 0f       	add	r25, r25
 7aa:	00 08       	sbc	r0, r0
 7ac:	55 0f       	add	r21, r21
 7ae:	aa 0b       	sbc	r26, r26
 7b0:	e0 e8       	ldi	r30, 0x80	; 128
 7b2:	fe ef       	ldi	r31, 0xFE	; 254
 7b4:	16 16       	cp	r1, r22
 7b6:	17 06       	cpc	r1, r23
 7b8:	e8 07       	cpc	r30, r24
 7ba:	f9 07       	cpc	r31, r25
 7bc:	c0 f0       	brcs	.+48     	; 0x7ee <__fp_cmp+0x46>
 7be:	12 16       	cp	r1, r18
 7c0:	13 06       	cpc	r1, r19
 7c2:	e4 07       	cpc	r30, r20
 7c4:	f5 07       	cpc	r31, r21
 7c6:	98 f0       	brcs	.+38     	; 0x7ee <__fp_cmp+0x46>
 7c8:	62 1b       	sub	r22, r18
 7ca:	73 0b       	sbc	r23, r19
 7cc:	84 0b       	sbc	r24, r20
 7ce:	95 0b       	sbc	r25, r21
 7d0:	39 f4       	brne	.+14     	; 0x7e0 <__fp_cmp+0x38>
 7d2:	0a 26       	eor	r0, r26
 7d4:	61 f0       	breq	.+24     	; 0x7ee <__fp_cmp+0x46>
 7d6:	23 2b       	or	r18, r19
 7d8:	24 2b       	or	r18, r20
 7da:	25 2b       	or	r18, r21
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <__fp_cmp+0x3e>
 7de:	08 95       	ret
 7e0:	0a 26       	eor	r0, r26
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <__fp_cmp+0x3e>
 7e4:	a1 40       	sbci	r26, 0x01	; 1
 7e6:	a6 95       	lsr	r26
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	81 1d       	adc	r24, r1
 7ec:	81 1d       	adc	r24, r1
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
