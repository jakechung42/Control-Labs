
SPI_AD_DA_controller_P_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000008e2  00000976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  0080010e  0080010e  00000984  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ee  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a3  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00002519  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	bd c0       	rjmp	.+378    	; 0x192 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 ee       	ldi	r30, 0xE2	; 226
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 34       	cpi	r26, 0x47	; 71
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	3a c4       	rjmp	.+2164   	; 0x8de <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}

// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
float	Sawtooth, StepInput, Sawtooth_Amplitude, Step_Amplitude, Input_Increment;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	Vel_Set_v = -3.0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	a0 e4       	ldi	r26, 0x40	; 64
  9e:	b0 ec       	ldi	r27, 0xC0	; 192
  a0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Vel_Set_v>
  a4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Vel_Set_v+0x1>
  a8:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <Vel_Set_v+0x2>
  ac:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <Vel_Set_v+0x3>

	Max_Voltage = 6.0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a0 ec       	ldi	r26, 0xC0	; 192
  b6:	b0 e4       	ldi	r27, 0x40	; 64
  b8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Max_Voltage>
  bc:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <Max_Voltage+0x1>
  c0:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <Max_Voltage+0x2>
  c4:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <Max_Voltage+0x3>
	Kp          = 1.0; 	// Proportional control constant
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	60 e8       	ldi	r22, 0x80	; 128
  ce:	7f e3       	ldi	r23, 0x3F	; 63
  d0:	40 93 3c 01 	sts	0x013C, r20	; 0x80013c <Kp>
  d4:	50 93 3d 01 	sts	0x013D, r21	; 0x80013d <Kp+0x1>
  d8:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <Kp+0x2>
  dc:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <Kp+0x3>
	// The incriment needs to be very small so the velocity change is obsevable
	
	// Note if you have print statments active this will slow the control loop dramatically

	//USART Setup
	UBRR0H = (MYUBRR >> 8);
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <__iob+0x3>
  f8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__iob+0x2>

	// AD initialization
	ADMUX  = 0b00000010; //Input on ADC2
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
 108:	8c e2       	ldi	r24, 0x2C	; 44
 10a:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
 10c:	82 e8       	ldi	r24, 0x82	; 130
 10e:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
 114:	1d bc       	out	0x2d, r1	; 45

	//Interrupt counter set up
	// Configure timer 1 for CTC mode, clk/8
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); 
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8a 60       	ori	r24, 0x0A	; 10
 11e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 120:	ef e6       	ldi	r30, 0x6F	; 111
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupt
 12a:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) - 1

	OCR1A = 999;   //Set CTC compare value to 1k Hz at 16MHz AVR clock, with a prescaler of 8
 12c:	87 ee       	ldi	r24, 0xE7	; 231
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 134:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>

	Sawtooth           = -1.0;			// Initial value
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	a0 e8       	ldi	r26, 0x80	; 128
 13e:	bf eb       	ldi	r27, 0xBF	; 191
 140:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Sawtooth>
 144:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Sawtooth+0x1>
 148:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <Sawtooth+0x2>
 14c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <Sawtooth+0x3>
	Sawtooth_Amplitude = 1.0;			// 5 volts maximum
 150:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <__data_end>
 154:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <__data_end+0x1>
 158:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end+0x2>
 15c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x3>
	Step_Amplitude     = 5.0;			// 5 volts maximum
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 ea       	ldi	r26, 0xA0	; 160
 166:	b0 e4       	ldi	r27, 0x40	; 64
 168:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Step_Amplitude>
 16c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Step_Amplitude+0x1>
 170:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <Step_Amplitude+0x2>
 174:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <Step_Amplitude+0x3>
	Input_Increment    = 0.005;		    // This variable is used to specify the desired frequency
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	97 ed       	ldi	r25, 0xD7	; 215
 17c:	a3 ea       	ldi	r26, 0xA3	; 163
 17e:	bb e3       	ldi	r27, 0x3B	; 59
 180:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <Input_Increment>
 184:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <Input_Increment+0x1>
 188:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <Input_Increment+0x2>
 18c:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <Input_Increment+0x3>
 190:	ff cf       	rjmp	.-2      	; 0x190 <main+0xf8>

00000192 <__vector_11>:
		// wait for interrupt
	}
}

ISR(TIMER1_COMPA_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 92       	push	r8
 19e:	9f 92       	push	r9
 1a0:	af 92       	push	r10
 1a2:	bf 92       	push	r11
 1a4:	cf 92       	push	r12
 1a6:	df 92       	push	r13
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	// Begin sampling for control system
	ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 1ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 1d2:	86 fd       	sbrc	r24, 6
 1d4:	fc cf       	rjmp	.-8      	; 0x1ce <__vector_11+0x3c>

	// Digitally generated Input wave form
	Sawtooth += Input_Increment;						// Input_Increment
 1d6:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <Input_Increment>
 1da:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <Input_Increment+0x1>
 1de:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <Input_Increment+0x2>
 1e2:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <Input_Increment+0x3>
 1e6:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Sawtooth>
 1ea:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Sawtooth+0x1>
 1ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Sawtooth+0x2>
 1f2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Sawtooth+0x3>
 1f6:	0b d1       	rcall	.+534    	; 0x40e <__addsf3>
 1f8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <Sawtooth>
 1fc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <Sawtooth+0x1>
 200:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Sawtooth+0x2>
 204:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Sawtooth+0x3>
	if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e8       	ldi	r20, 0x80	; 128
 20e:	5f e3       	ldi	r21, 0x3F	; 63
 210:	ff d2       	rcall	.+1534   	; 0x810 <__gesf2>
 212:	88 23       	and	r24, r24
 214:	64 f0       	brlt	.+24     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	a0 e8       	ldi	r26, 0x80	; 128
 21c:	bf eb       	ldi	r27, 0xBF	; 191
 21e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Sawtooth>
 222:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Sawtooth+0x1>
 226:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <Sawtooth+0x2>
 22a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <Sawtooth+0x3>
	if(Sawtooth <= 0.0) StepInput = 0.0;                  // Step Input Value     (0 to 1)
 22e:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <Sawtooth>
 232:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <Sawtooth+0x1>
 236:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <Sawtooth+0x2>
 23a:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <Sawtooth+0x3>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	a9 01       	movw	r20, r18
 244:	c7 01       	movw	r24, r14
 246:	b6 01       	movw	r22, r12
 248:	46 d1       	rcall	.+652    	; 0x4d6 <__cmpsf2>
 24a:	18 16       	cp	r1, r24
 24c:	44 f0       	brlt	.+16     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 24e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <StepInput>
 252:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <StepInput+0x1>
 256:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <StepInput+0x2>
 25a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <StepInput+0x3>
	if(Sawtooth > 0.0)  StepInput = 1.0;                  // Step Input Value		(0 to 1)
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	a9 01       	movw	r20, r18
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	d3 d2       	rcall	.+1446   	; 0x810 <__gesf2>
 26a:	18 16       	cp	r1, r24
 26c:	64 f4       	brge	.+24     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a0 e8       	ldi	r26, 0x80	; 128
 274:	bf e3       	ldi	r27, 0x3F	; 63
 276:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <StepInput>
 27a:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <StepInput+0x1>
 27e:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <StepInput+0x2>
 282:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <StepInput+0x3>
				
	// Vel_Set_v = Sawtooth*Sawtooth_Amplitude;            	// Set Velocity Set Point to either Sawtooth or Step Input Value
	Vel_Set_v = StepInput * Step_Amplitude;					// Set Velocity Set Point to either Sawtooth or Step Input Value
 286:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <Step_Amplitude>
 28a:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <Step_Amplitude+0x1>
 28e:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <Step_Amplitude+0x2>
 292:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <Step_Amplitude+0x3>
 296:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <StepInput>
 29a:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <StepInput+0x1>
 29e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <StepInput+0x2>
 2a2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <StepInput+0x3>
 2a6:	b8 d2       	rcall	.+1392   	; 0x818 <__mulsf3>
 2a8:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <Vel_Set_v>
 2ac:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <Vel_Set_v+0x1>
 2b0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <Vel_Set_v+0x2>
 2b4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <Vel_Set_v+0x3>
																	// Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)
	// Vel_Set_v += 0.0005;
	// if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
	// printf("Print value: %d\n", Vel_Set_v*1000);

	adc_input = ADCW; 									// Read AD value
 2b8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 2bc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 2c0:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <adc_input+0x1>
 2c4:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <adc_input>
	adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9c d1       	rcall	.+824    	; 0x606 <__floatunsisf>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 ea       	ldi	r20, 0xA0	; 160
 2d4:	5c e3       	ldi	r21, 0x3C	; 60
 2d6:	a0 d2       	rcall	.+1344   	; 0x818 <__mulsf3>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e2       	ldi	r20, 0x20	; 32
 2de:	51 e4       	ldi	r21, 0x41	; 65
 2e0:	95 d0       	rcall	.+298    	; 0x40c <__subsf3>
 2e2:	9b 01       	movw	r18, r22
 2e4:	ac 01       	movw	r20, r24
 2e6:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <adc_input_v>
 2ea:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <adc_input_v+0x1>
 2ee:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <adc_input_v+0x2>
 2f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <adc_input_v+0x3>
	// Note the input is bipolar +- 10 volts
	// Note that the (10./1024.) term needs the decimal point
	// or else it is interrupted as an integer and the result is zero
	// Control Equation

	Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 5 volts)
 2f6:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <Vel_Set_v>
 2fa:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <Vel_Set_v+0x1>
 2fe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Vel_Set_v+0x2>
 302:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Vel_Set_v+0x3>
 306:	82 d0       	rcall	.+260    	; 0x40c <__subsf3>
 308:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <Error>
 30c:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <Error+0x1>
 310:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Error+0x2>
 314:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <Error+0x3>
	Control = Kp * Error;  						    // Control (units are voltage  +- 5 volts)
 318:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <Kp>
 31c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <Kp+0x1>
 320:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <Kp+0x2>
 324:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <Kp+0x3>
 328:	77 d2       	rcall	.+1262   	; 0x818 <__mulsf3>
 32a:	4b 01       	movw	r8, r22
 32c:	5c 01       	movw	r10, r24
 32e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Control>
 332:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Control+0x1>
 336:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Control+0x2>
 33a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Control+0x3>

	// printf("Print set vel voltage: %d\n", Vel_Set_v*1000);  // Remember to comment out!

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 33e:	9f 77       	andi	r25, 0x7F	; 127
 340:	c0 90 34 01 	lds	r12, 0x0134	; 0x800134 <Max_Voltage>
 344:	d0 90 35 01 	lds	r13, 0x0135	; 0x800135 <Max_Voltage+0x1>
 348:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <Max_Voltage+0x2>
 34c:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <Max_Voltage+0x3>
 350:	a7 01       	movw	r20, r14
 352:	96 01       	movw	r18, r12
 354:	5d d2       	rcall	.+1210   	; 0x810 <__gesf2>
 356:	88 23       	and	r24, r24
 358:	54 f0       	brlt	.+20     	; 0x36e <__EEPROM_REGION_LENGTH__+0x16e>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 35a:	b7 fa       	bst	r11, 7
 35c:	f7 f8       	bld	r15, 7
	Control = copysign(Max_Voltage,Control);
 35e:	c0 92 12 01 	sts	0x0112, r12	; 0x800112 <Control>
 362:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <Control+0x1>
 366:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <Control+0x2>
 36a:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <Control+0x3>

	adc_output = floor(Control*4096./10.+2048.0);  			// Convert control voltage to a digital number for output
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	40 e8       	ldi	r20, 0x80	; 128
 374:	55 e4       	ldi	r21, 0x45	; 69
 376:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Control>
 37a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Control+0x1>
 37e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Control+0x2>
 382:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Control+0x3>
 386:	48 d2       	rcall	.+1168   	; 0x818 <__mulsf3>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e2       	ldi	r20, 0x20	; 32
 38e:	51 e4       	ldi	r21, 0x41	; 65
 390:	a6 d0       	rcall	.+332    	; 0x4de <__divsf3>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	55 e4       	ldi	r21, 0x45	; 69
 39a:	39 d0       	rcall	.+114    	; 0x40e <__addsf3>
 39c:	71 d1       	rcall	.+738    	; 0x680 <floor>
 39e:	07 d1       	rcall	.+526    	; 0x5ae <__fixunssfsi>
 3a0:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <adc_output+0x1>
 3a4:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <adc_output>
		
	// printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
		
	// Output adc_output to DAC
	spi_data_0 = 0x00; 								// Zero spi_data_0
	spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 3a8:	9b 01       	movw	r18, r22
 3aa:	22 27       	eor	r18, r18
 3ac:	3f 70       	andi	r19, 0x0F	; 15
	// to the lower 4 bit positions and
	spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
 3ae:	20 e3       	ldi	r18, 0x30	; 48
 3b0:	23 0f       	add	r18, r19
 3b2:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <spi_data_0>
	spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
 3b6:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <spi_data_1>
	// bits 0-7 to the lower 8 bit positions
	cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 3ba:	8b b1       	in	r24, 0x0b	; 11
 3bc:	8f 77       	andi	r24, 0x7F	; 127
 3be:	8b b9       	out	0x0b, r24	; 11
	dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 3c0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <spi_data_0>
 3c4:	63 de       	rcall	.-826    	; 0x8c <spi_write_read>
 3c6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dummy_read>
	dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 3ca:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <spi_data_1>
 3ce:	5e de       	rcall	.-836    	; 0x8c <spi_write_read>
 3d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dummy_read>
	sbi(PORTD,7); 	
 3d4:	8b b1       	in	r24, 0x0b	; 11
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	8b b9       	out	0x0b, r24	; 11
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	bf 90       	pop	r11
 3fc:	af 90       	pop	r10
 3fe:	9f 90       	pop	r9
 400:	8f 90       	pop	r8
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__subsf3>:
 40c:	50 58       	subi	r21, 0x80	; 128

0000040e <__addsf3>:
 40e:	bb 27       	eor	r27, r27
 410:	aa 27       	eor	r26, r26
 412:	0e d0       	rcall	.+28     	; 0x430 <__addsf3x>
 414:	ac c1       	rjmp	.+856    	; 0x76e <__fp_round>
 416:	9d d1       	rcall	.+826    	; 0x752 <__fp_pscA>
 418:	30 f0       	brcs	.+12     	; 0x426 <__addsf3+0x18>
 41a:	a2 d1       	rcall	.+836    	; 0x760 <__fp_pscB>
 41c:	20 f0       	brcs	.+8      	; 0x426 <__addsf3+0x18>
 41e:	31 f4       	brne	.+12     	; 0x42c <__addsf3+0x1e>
 420:	9f 3f       	cpi	r25, 0xFF	; 255
 422:	11 f4       	brne	.+4      	; 0x428 <__addsf3+0x1a>
 424:	1e f4       	brtc	.+6      	; 0x42c <__addsf3+0x1e>
 426:	92 c1       	rjmp	.+804    	; 0x74c <__fp_nan>
 428:	0e f4       	brtc	.+2      	; 0x42c <__addsf3+0x1e>
 42a:	e0 95       	com	r30
 42c:	e7 fb       	bst	r30, 7
 42e:	5f c1       	rjmp	.+702    	; 0x6ee <__fp_inf>

00000430 <__addsf3x>:
 430:	e9 2f       	mov	r30, r25
 432:	ae d1       	rcall	.+860    	; 0x790 <__fp_split3>
 434:	80 f3       	brcs	.-32     	; 0x416 <__addsf3+0x8>
 436:	ba 17       	cp	r27, r26
 438:	62 07       	cpc	r22, r18
 43a:	73 07       	cpc	r23, r19
 43c:	84 07       	cpc	r24, r20
 43e:	95 07       	cpc	r25, r21
 440:	18 f0       	brcs	.+6      	; 0x448 <__addsf3x+0x18>
 442:	71 f4       	brne	.+28     	; 0x460 <__addsf3x+0x30>
 444:	9e f5       	brtc	.+102    	; 0x4ac <__addsf3x+0x7c>
 446:	dd c1       	rjmp	.+954    	; 0x802 <__fp_zero>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x1c>
 44a:	e0 95       	com	r30
 44c:	0b 2e       	mov	r0, r27
 44e:	ba 2f       	mov	r27, r26
 450:	a0 2d       	mov	r26, r0
 452:	0b 01       	movw	r0, r22
 454:	b9 01       	movw	r22, r18
 456:	90 01       	movw	r18, r0
 458:	0c 01       	movw	r0, r24
 45a:	ca 01       	movw	r24, r20
 45c:	a0 01       	movw	r20, r0
 45e:	11 24       	eor	r1, r1
 460:	ff 27       	eor	r31, r31
 462:	59 1b       	sub	r21, r25
 464:	99 f0       	breq	.+38     	; 0x48c <__addsf3x+0x5c>
 466:	59 3f       	cpi	r21, 0xF9	; 249
 468:	50 f4       	brcc	.+20     	; 0x47e <__addsf3x+0x4e>
 46a:	50 3e       	cpi	r21, 0xE0	; 224
 46c:	68 f1       	brcs	.+90     	; 0x4c8 <__addsf3x+0x98>
 46e:	1a 16       	cp	r1, r26
 470:	f0 40       	sbci	r31, 0x00	; 0
 472:	a2 2f       	mov	r26, r18
 474:	23 2f       	mov	r18, r19
 476:	34 2f       	mov	r19, r20
 478:	44 27       	eor	r20, r20
 47a:	58 5f       	subi	r21, 0xF8	; 248
 47c:	f3 cf       	rjmp	.-26     	; 0x464 <__addsf3x+0x34>
 47e:	46 95       	lsr	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
 484:	a7 95       	ror	r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	53 95       	inc	r21
 48a:	c9 f7       	brne	.-14     	; 0x47e <__addsf3x+0x4e>
 48c:	7e f4       	brtc	.+30     	; 0x4ac <__addsf3x+0x7c>
 48e:	1f 16       	cp	r1, r31
 490:	ba 0b       	sbc	r27, r26
 492:	62 0b       	sbc	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba f0       	brmi	.+46     	; 0x4c8 <__addsf3x+0x98>
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__addsf3x+0x96>
 49e:	ff 0f       	add	r31, r31
 4a0:	bb 1f       	adc	r27, r27
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	c2 f7       	brpl	.-16     	; 0x49a <__addsf3x+0x6a>
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__addsf3x+0x98>
 4ac:	ba 0f       	add	r27, r26
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 1f       	adc	r23, r19
 4b2:	84 1f       	adc	r24, r20
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <__addsf3x+0x98>
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__addsf3x+0x96>
 4c4:	b3 cf       	rjmp	.-154    	; 0x42c <__addsf3+0x1e>
 4c6:	93 95       	inc	r25
 4c8:	88 0f       	add	r24, r24
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0x9e>
 4cc:	99 27       	eor	r25, r25
 4ce:	ee 0f       	add	r30, r30
 4d0:	97 95       	ror	r25
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret

000004d6 <__cmpsf2>:
 4d6:	e7 d0       	rcall	.+462    	; 0x6a6 <__fp_cmp>
 4d8:	08 f4       	brcc	.+2      	; 0x4dc <__cmpsf2+0x6>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	08 95       	ret

000004de <__divsf3>:
 4de:	0c d0       	rcall	.+24     	; 0x4f8 <__divsf3x>
 4e0:	46 c1       	rjmp	.+652    	; 0x76e <__fp_round>
 4e2:	3e d1       	rcall	.+636    	; 0x760 <__fp_pscB>
 4e4:	40 f0       	brcs	.+16     	; 0x4f6 <__divsf3+0x18>
 4e6:	35 d1       	rcall	.+618    	; 0x752 <__fp_pscA>
 4e8:	30 f0       	brcs	.+12     	; 0x4f6 <__divsf3+0x18>
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__divsf3+0x16>
 4ec:	5f 3f       	cpi	r21, 0xFF	; 255
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <__divsf3+0x18>
 4f0:	fe c0       	rjmp	.+508    	; 0x6ee <__fp_inf>
 4f2:	51 11       	cpse	r21, r1
 4f4:	87 c1       	rjmp	.+782    	; 0x804 <__fp_szero>
 4f6:	2a c1       	rjmp	.+596    	; 0x74c <__fp_nan>

000004f8 <__divsf3x>:
 4f8:	4b d1       	rcall	.+662    	; 0x790 <__fp_split3>
 4fa:	98 f3       	brcs	.-26     	; 0x4e2 <__divsf3+0x4>

000004fc <__divsf3_pse>:
 4fc:	99 23       	and	r25, r25
 4fe:	c9 f3       	breq	.-14     	; 0x4f2 <__divsf3+0x14>
 500:	55 23       	and	r21, r21
 502:	b1 f3       	breq	.-20     	; 0x4f0 <__divsf3+0x12>
 504:	95 1b       	sub	r25, r21
 506:	55 0b       	sbc	r21, r21
 508:	bb 27       	eor	r27, r27
 50a:	aa 27       	eor	r26, r26
 50c:	62 17       	cp	r22, r18
 50e:	73 07       	cpc	r23, r19
 510:	84 07       	cpc	r24, r20
 512:	38 f0       	brcs	.+14     	; 0x522 <__stack+0x23>
 514:	9f 5f       	subi	r25, 0xFF	; 255
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	44 1f       	adc	r20, r20
 51e:	aa 1f       	adc	r26, r26
 520:	a9 f3       	breq	.-22     	; 0x50c <__stack+0xd>
 522:	33 d0       	rcall	.+102    	; 0x58a <__stack+0x8b>
 524:	0e 2e       	mov	r0, r30
 526:	3a f0       	brmi	.+14     	; 0x536 <__stack+0x37>
 528:	e0 e8       	ldi	r30, 0x80	; 128
 52a:	30 d0       	rcall	.+96     	; 0x58c <__stack+0x8d>
 52c:	91 50       	subi	r25, 0x01	; 1
 52e:	50 40       	sbci	r21, 0x00	; 0
 530:	e6 95       	lsr	r30
 532:	00 1c       	adc	r0, r0
 534:	ca f7       	brpl	.-14     	; 0x528 <__stack+0x29>
 536:	29 d0       	rcall	.+82     	; 0x58a <__stack+0x8b>
 538:	fe 2f       	mov	r31, r30
 53a:	27 d0       	rcall	.+78     	; 0x58a <__stack+0x8b>
 53c:	66 0f       	add	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	bb 1f       	adc	r27, r27
 544:	26 17       	cp	r18, r22
 546:	37 07       	cpc	r19, r23
 548:	48 07       	cpc	r20, r24
 54a:	ab 07       	cpc	r26, r27
 54c:	b0 e8       	ldi	r27, 0x80	; 128
 54e:	09 f0       	breq	.+2      	; 0x552 <__stack+0x53>
 550:	bb 0b       	sbc	r27, r27
 552:	80 2d       	mov	r24, r0
 554:	bf 01       	movw	r22, r30
 556:	ff 27       	eor	r31, r31
 558:	93 58       	subi	r25, 0x83	; 131
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	2a f0       	brmi	.+10     	; 0x568 <__stack+0x69>
 55e:	9e 3f       	cpi	r25, 0xFE	; 254
 560:	51 05       	cpc	r21, r1
 562:	68 f0       	brcs	.+26     	; 0x57e <__stack+0x7f>
 564:	c4 c0       	rjmp	.+392    	; 0x6ee <__fp_inf>
 566:	4e c1       	rjmp	.+668    	; 0x804 <__fp_szero>
 568:	5f 3f       	cpi	r21, 0xFF	; 255
 56a:	ec f3       	brlt	.-6      	; 0x566 <__stack+0x67>
 56c:	98 3e       	cpi	r25, 0xE8	; 232
 56e:	dc f3       	brlt	.-10     	; 0x566 <__stack+0x67>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f7 95       	ror	r31
 57a:	9f 5f       	subi	r25, 0xFF	; 255
 57c:	c9 f7       	brne	.-14     	; 0x570 <__stack+0x71>
 57e:	88 0f       	add	r24, r24
 580:	91 1d       	adc	r25, r1
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	97 f9       	bld	r25, 7
 588:	08 95       	ret
 58a:	e1 e0       	ldi	r30, 0x01	; 1
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	bb 1f       	adc	r27, r27
 594:	62 17       	cp	r22, r18
 596:	73 07       	cpc	r23, r19
 598:	84 07       	cpc	r24, r20
 59a:	ba 07       	cpc	r27, r26
 59c:	20 f0       	brcs	.+8      	; 0x5a6 <__stack+0xa7>
 59e:	62 1b       	sub	r22, r18
 5a0:	73 0b       	sbc	r23, r19
 5a2:	84 0b       	sbc	r24, r20
 5a4:	ba 0b       	sbc	r27, r26
 5a6:	ee 1f       	adc	r30, r30
 5a8:	88 f7       	brcc	.-30     	; 0x58c <__stack+0x8d>
 5aa:	e0 95       	com	r30
 5ac:	08 95       	ret

000005ae <__fixunssfsi>:
 5ae:	f8 d0       	rcall	.+496    	; 0x7a0 <__fp_splitA>
 5b0:	88 f0       	brcs	.+34     	; 0x5d4 <__fixunssfsi+0x26>
 5b2:	9f 57       	subi	r25, 0x7F	; 127
 5b4:	90 f0       	brcs	.+36     	; 0x5da <__fixunssfsi+0x2c>
 5b6:	b9 2f       	mov	r27, r25
 5b8:	99 27       	eor	r25, r25
 5ba:	b7 51       	subi	r27, 0x17	; 23
 5bc:	a0 f0       	brcs	.+40     	; 0x5e6 <__fixunssfsi+0x38>
 5be:	d1 f0       	breq	.+52     	; 0x5f4 <__fixunssfsi+0x46>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	1a f0       	brmi	.+6      	; 0x5d0 <__fixunssfsi+0x22>
 5ca:	ba 95       	dec	r27
 5cc:	c9 f7       	brne	.-14     	; 0x5c0 <__fixunssfsi+0x12>
 5ce:	12 c0       	rjmp	.+36     	; 0x5f4 <__fixunssfsi+0x46>
 5d0:	b1 30       	cpi	r27, 0x01	; 1
 5d2:	81 f0       	breq	.+32     	; 0x5f4 <__fixunssfsi+0x46>
 5d4:	16 d1       	rcall	.+556    	; 0x802 <__fp_zero>
 5d6:	b1 e0       	ldi	r27, 0x01	; 1
 5d8:	08 95       	ret
 5da:	13 c1       	rjmp	.+550    	; 0x802 <__fp_zero>
 5dc:	67 2f       	mov	r22, r23
 5de:	78 2f       	mov	r23, r24
 5e0:	88 27       	eor	r24, r24
 5e2:	b8 5f       	subi	r27, 0xF8	; 248
 5e4:	39 f0       	breq	.+14     	; 0x5f4 <__fixunssfsi+0x46>
 5e6:	b9 3f       	cpi	r27, 0xF9	; 249
 5e8:	cc f3       	brlt	.-14     	; 0x5dc <__fixunssfsi+0x2e>
 5ea:	86 95       	lsr	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b3 95       	inc	r27
 5f2:	d9 f7       	brne	.-10     	; 0x5ea <__fixunssfsi+0x3c>
 5f4:	3e f4       	brtc	.+14     	; 0x604 <__fixunssfsi+0x56>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	08 95       	ret

00000606 <__floatunsisf>:
 606:	e8 94       	clt
 608:	09 c0       	rjmp	.+18     	; 0x61c <__floatsisf+0x12>

0000060a <__floatsisf>:
 60a:	97 fb       	bst	r25, 7
 60c:	3e f4       	brtc	.+14     	; 0x61c <__floatsisf+0x12>
 60e:	90 95       	com	r25
 610:	80 95       	com	r24
 612:	70 95       	com	r23
 614:	61 95       	neg	r22
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	99 23       	and	r25, r25
 61e:	a9 f0       	breq	.+42     	; 0x64a <__floatsisf+0x40>
 620:	f9 2f       	mov	r31, r25
 622:	96 e9       	ldi	r25, 0x96	; 150
 624:	bb 27       	eor	r27, r27
 626:	93 95       	inc	r25
 628:	f6 95       	lsr	r31
 62a:	87 95       	ror	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	f1 11       	cpse	r31, r1
 634:	f8 cf       	rjmp	.-16     	; 0x626 <__floatsisf+0x1c>
 636:	fa f4       	brpl	.+62     	; 0x676 <__floatsisf+0x6c>
 638:	bb 0f       	add	r27, r27
 63a:	11 f4       	brne	.+4      	; 0x640 <__floatsisf+0x36>
 63c:	60 ff       	sbrs	r22, 0
 63e:	1b c0       	rjmp	.+54     	; 0x676 <__floatsisf+0x6c>
 640:	6f 5f       	subi	r22, 0xFF	; 255
 642:	7f 4f       	sbci	r23, 0xFF	; 255
 644:	8f 4f       	sbci	r24, 0xFF	; 255
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	16 c0       	rjmp	.+44     	; 0x676 <__floatsisf+0x6c>
 64a:	88 23       	and	r24, r24
 64c:	11 f0       	breq	.+4      	; 0x652 <__floatsisf+0x48>
 64e:	96 e9       	ldi	r25, 0x96	; 150
 650:	11 c0       	rjmp	.+34     	; 0x674 <__floatsisf+0x6a>
 652:	77 23       	and	r23, r23
 654:	21 f0       	breq	.+8      	; 0x65e <__floatsisf+0x54>
 656:	9e e8       	ldi	r25, 0x8E	; 142
 658:	87 2f       	mov	r24, r23
 65a:	76 2f       	mov	r23, r22
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__floatsisf+0x5e>
 65e:	66 23       	and	r22, r22
 660:	71 f0       	breq	.+28     	; 0x67e <__floatsisf+0x74>
 662:	96 e8       	ldi	r25, 0x86	; 134
 664:	86 2f       	mov	r24, r22
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	2a f0       	brmi	.+10     	; 0x676 <__floatsisf+0x6c>
 66c:	9a 95       	dec	r25
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	da f7       	brpl	.-10     	; 0x66c <__floatsisf+0x62>
 676:	88 0f       	add	r24, r24
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <floor>:
 680:	a9 d0       	rcall	.+338    	; 0x7d4 <__fp_trunc>
 682:	80 f0       	brcs	.+32     	; 0x6a4 <floor+0x24>
 684:	9f 37       	cpi	r25, 0x7F	; 127
 686:	40 f4       	brcc	.+16     	; 0x698 <floor+0x18>
 688:	91 11       	cpse	r25, r1
 68a:	0e f0       	brts	.+2      	; 0x68e <floor+0xe>
 68c:	bb c0       	rjmp	.+374    	; 0x804 <__fp_szero>
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	80 e8       	ldi	r24, 0x80	; 128
 694:	9f eb       	ldi	r25, 0xBF	; 191
 696:	08 95       	ret
 698:	26 f4       	brtc	.+8      	; 0x6a2 <floor+0x22>
 69a:	1b 16       	cp	r1, r27
 69c:	61 1d       	adc	r22, r1
 69e:	71 1d       	adc	r23, r1
 6a0:	81 1d       	adc	r24, r1
 6a2:	2b c0       	rjmp	.+86     	; 0x6fa <__fp_mintl>
 6a4:	45 c0       	rjmp	.+138    	; 0x730 <__fp_mpack>

000006a6 <__fp_cmp>:
 6a6:	99 0f       	add	r25, r25
 6a8:	00 08       	sbc	r0, r0
 6aa:	55 0f       	add	r21, r21
 6ac:	aa 0b       	sbc	r26, r26
 6ae:	e0 e8       	ldi	r30, 0x80	; 128
 6b0:	fe ef       	ldi	r31, 0xFE	; 254
 6b2:	16 16       	cp	r1, r22
 6b4:	17 06       	cpc	r1, r23
 6b6:	e8 07       	cpc	r30, r24
 6b8:	f9 07       	cpc	r31, r25
 6ba:	c0 f0       	brcs	.+48     	; 0x6ec <__fp_cmp+0x46>
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	e4 07       	cpc	r30, r20
 6c2:	f5 07       	cpc	r31, r21
 6c4:	98 f0       	brcs	.+38     	; 0x6ec <__fp_cmp+0x46>
 6c6:	62 1b       	sub	r22, r18
 6c8:	73 0b       	sbc	r23, r19
 6ca:	84 0b       	sbc	r24, r20
 6cc:	95 0b       	sbc	r25, r21
 6ce:	39 f4       	brne	.+14     	; 0x6de <__fp_cmp+0x38>
 6d0:	0a 26       	eor	r0, r26
 6d2:	61 f0       	breq	.+24     	; 0x6ec <__fp_cmp+0x46>
 6d4:	23 2b       	or	r18, r19
 6d6:	24 2b       	or	r18, r20
 6d8:	25 2b       	or	r18, r21
 6da:	21 f4       	brne	.+8      	; 0x6e4 <__fp_cmp+0x3e>
 6dc:	08 95       	ret
 6de:	0a 26       	eor	r0, r26
 6e0:	09 f4       	brne	.+2      	; 0x6e4 <__fp_cmp+0x3e>
 6e2:	a1 40       	sbci	r26, 0x01	; 1
 6e4:	a6 95       	lsr	r26
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	81 1d       	adc	r24, r1
 6ea:	81 1d       	adc	r24, r1
 6ec:	08 95       	ret

000006ee <__fp_inf>:
 6ee:	97 f9       	bld	r25, 7
 6f0:	9f 67       	ori	r25, 0x7F	; 127
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	08 95       	ret

000006fa <__fp_mintl>:
 6fa:	88 23       	and	r24, r24
 6fc:	71 f4       	brne	.+28     	; 0x71a <__fp_mintl+0x20>
 6fe:	77 23       	and	r23, r23
 700:	21 f0       	breq	.+8      	; 0x70a <__fp_mintl+0x10>
 702:	98 50       	subi	r25, 0x08	; 8
 704:	87 2b       	or	r24, r23
 706:	76 2f       	mov	r23, r22
 708:	07 c0       	rjmp	.+14     	; 0x718 <__fp_mintl+0x1e>
 70a:	66 23       	and	r22, r22
 70c:	11 f4       	brne	.+4      	; 0x712 <__fp_mintl+0x18>
 70e:	99 27       	eor	r25, r25
 710:	0d c0       	rjmp	.+26     	; 0x72c <__fp_mintl+0x32>
 712:	90 51       	subi	r25, 0x10	; 16
 714:	86 2b       	or	r24, r22
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	2a f0       	brmi	.+10     	; 0x726 <__fp_mintl+0x2c>
 71c:	9a 95       	dec	r25
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	da f7       	brpl	.-10     	; 0x71c <__fp_mintl+0x22>
 726:	88 0f       	add	r24, r24
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__fp_mpack>:
 730:	9f 3f       	cpi	r25, 0xFF	; 255
 732:	31 f0       	breq	.+12     	; 0x740 <__fp_mpack_finite+0xc>

00000734 <__fp_mpack_finite>:
 734:	91 50       	subi	r25, 0x01	; 1
 736:	20 f4       	brcc	.+8      	; 0x740 <__fp_mpack_finite+0xc>
 738:	87 95       	ror	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	88 0f       	add	r24, r24
 742:	91 1d       	adc	r25, r1
 744:	96 95       	lsr	r25
 746:	87 95       	ror	r24
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__fp_nan>:
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	80 ec       	ldi	r24, 0xC0	; 192
 750:	08 95       	ret

00000752 <__fp_pscA>:
 752:	00 24       	eor	r0, r0
 754:	0a 94       	dec	r0
 756:	16 16       	cp	r1, r22
 758:	17 06       	cpc	r1, r23
 75a:	18 06       	cpc	r1, r24
 75c:	09 06       	cpc	r0, r25
 75e:	08 95       	ret

00000760 <__fp_pscB>:
 760:	00 24       	eor	r0, r0
 762:	0a 94       	dec	r0
 764:	12 16       	cp	r1, r18
 766:	13 06       	cpc	r1, r19
 768:	14 06       	cpc	r1, r20
 76a:	05 06       	cpc	r0, r21
 76c:	08 95       	ret

0000076e <__fp_round>:
 76e:	09 2e       	mov	r0, r25
 770:	03 94       	inc	r0
 772:	00 0c       	add	r0, r0
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_round+0xc>
 776:	88 23       	and	r24, r24
 778:	52 f0       	brmi	.+20     	; 0x78e <__fp_round+0x20>
 77a:	bb 0f       	add	r27, r27
 77c:	40 f4       	brcc	.+16     	; 0x78e <__fp_round+0x20>
 77e:	bf 2b       	or	r27, r31
 780:	11 f4       	brne	.+4      	; 0x786 <__fp_round+0x18>
 782:	60 ff       	sbrs	r22, 0
 784:	04 c0       	rjmp	.+8      	; 0x78e <__fp_round+0x20>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	08 95       	ret

00000790 <__fp_split3>:
 790:	57 fd       	sbrc	r21, 7
 792:	90 58       	subi	r25, 0x80	; 128
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	59 f0       	breq	.+22     	; 0x7b0 <__fp_splitA+0x10>
 79a:	5f 3f       	cpi	r21, 0xFF	; 255
 79c:	71 f0       	breq	.+28     	; 0x7ba <__fp_splitA+0x1a>
 79e:	47 95       	ror	r20

000007a0 <__fp_splitA>:
 7a0:	88 0f       	add	r24, r24
 7a2:	97 fb       	bst	r25, 7
 7a4:	99 1f       	adc	r25, r25
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_splitA+0x20>
 7a8:	9f 3f       	cpi	r25, 0xFF	; 255
 7aa:	79 f0       	breq	.+30     	; 0x7ca <__fp_splitA+0x2a>
 7ac:	87 95       	ror	r24
 7ae:	08 95       	ret
 7b0:	12 16       	cp	r1, r18
 7b2:	13 06       	cpc	r1, r19
 7b4:	14 06       	cpc	r1, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	f2 cf       	rjmp	.-28     	; 0x79e <__fp_split3+0xe>
 7ba:	46 95       	lsr	r20
 7bc:	f1 df       	rcall	.-30     	; 0x7a0 <__fp_splitA>
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <__fp_splitA+0x30>
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	f1 cf       	rjmp	.-30     	; 0x7ac <__fp_splitA+0xc>
 7ca:	86 95       	lsr	r24
 7cc:	71 05       	cpc	r23, r1
 7ce:	61 05       	cpc	r22, r1
 7d0:	08 94       	sec
 7d2:	08 95       	ret

000007d4 <__fp_trunc>:
 7d4:	e5 df       	rcall	.-54     	; 0x7a0 <__fp_splitA>
 7d6:	a0 f0       	brcs	.+40     	; 0x800 <__fp_trunc+0x2c>
 7d8:	be e7       	ldi	r27, 0x7E	; 126
 7da:	b9 17       	cp	r27, r25
 7dc:	88 f4       	brcc	.+34     	; 0x800 <__fp_trunc+0x2c>
 7de:	bb 27       	eor	r27, r27
 7e0:	9f 38       	cpi	r25, 0x8F	; 143
 7e2:	60 f4       	brcc	.+24     	; 0x7fc <__fp_trunc+0x28>
 7e4:	16 16       	cp	r1, r22
 7e6:	b1 1d       	adc	r27, r1
 7e8:	67 2f       	mov	r22, r23
 7ea:	78 2f       	mov	r23, r24
 7ec:	88 27       	eor	r24, r24
 7ee:	98 5f       	subi	r25, 0xF8	; 248
 7f0:	f7 cf       	rjmp	.-18     	; 0x7e0 <__fp_trunc+0xc>
 7f2:	86 95       	lsr	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b1 1d       	adc	r27, r1
 7fa:	93 95       	inc	r25
 7fc:	96 39       	cpi	r25, 0x96	; 150
 7fe:	c8 f3       	brcs	.-14     	; 0x7f2 <__fp_trunc+0x1e>
 800:	08 95       	ret

00000802 <__fp_zero>:
 802:	e8 94       	clt

00000804 <__fp_szero>:
 804:	bb 27       	eor	r27, r27
 806:	66 27       	eor	r22, r22
 808:	77 27       	eor	r23, r23
 80a:	cb 01       	movw	r24, r22
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__gesf2>:
 810:	4a df       	rcall	.-364    	; 0x6a6 <__fp_cmp>
 812:	08 f4       	brcc	.+2      	; 0x816 <__gesf2+0x6>
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	08 95       	ret

00000818 <__mulsf3>:
 818:	0b d0       	rcall	.+22     	; 0x830 <__mulsf3x>
 81a:	a9 cf       	rjmp	.-174    	; 0x76e <__fp_round>
 81c:	9a df       	rcall	.-204    	; 0x752 <__fp_pscA>
 81e:	28 f0       	brcs	.+10     	; 0x82a <__mulsf3+0x12>
 820:	9f df       	rcall	.-194    	; 0x760 <__fp_pscB>
 822:	18 f0       	brcs	.+6      	; 0x82a <__mulsf3+0x12>
 824:	95 23       	and	r25, r21
 826:	09 f0       	breq	.+2      	; 0x82a <__mulsf3+0x12>
 828:	62 cf       	rjmp	.-316    	; 0x6ee <__fp_inf>
 82a:	90 cf       	rjmp	.-224    	; 0x74c <__fp_nan>
 82c:	11 24       	eor	r1, r1
 82e:	ea cf       	rjmp	.-44     	; 0x804 <__fp_szero>

00000830 <__mulsf3x>:
 830:	af df       	rcall	.-162    	; 0x790 <__fp_split3>
 832:	a0 f3       	brcs	.-24     	; 0x81c <__mulsf3+0x4>

00000834 <__mulsf3_pse>:
 834:	95 9f       	mul	r25, r21
 836:	d1 f3       	breq	.-12     	; 0x82c <__mulsf3+0x14>
 838:	95 0f       	add	r25, r21
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	55 1f       	adc	r21, r21
 83e:	62 9f       	mul	r22, r18
 840:	f0 01       	movw	r30, r0
 842:	72 9f       	mul	r23, r18
 844:	bb 27       	eor	r27, r27
 846:	f0 0d       	add	r31, r0
 848:	b1 1d       	adc	r27, r1
 84a:	63 9f       	mul	r22, r19
 84c:	aa 27       	eor	r26, r26
 84e:	f0 0d       	add	r31, r0
 850:	b1 1d       	adc	r27, r1
 852:	aa 1f       	adc	r26, r26
 854:	64 9f       	mul	r22, r20
 856:	66 27       	eor	r22, r22
 858:	b0 0d       	add	r27, r0
 85a:	a1 1d       	adc	r26, r1
 85c:	66 1f       	adc	r22, r22
 85e:	82 9f       	mul	r24, r18
 860:	22 27       	eor	r18, r18
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	62 1f       	adc	r22, r18
 868:	73 9f       	mul	r23, r19
 86a:	b0 0d       	add	r27, r0
 86c:	a1 1d       	adc	r26, r1
 86e:	62 1f       	adc	r22, r18
 870:	83 9f       	mul	r24, r19
 872:	a0 0d       	add	r26, r0
 874:	61 1d       	adc	r22, r1
 876:	22 1f       	adc	r18, r18
 878:	74 9f       	mul	r23, r20
 87a:	33 27       	eor	r19, r19
 87c:	a0 0d       	add	r26, r0
 87e:	61 1d       	adc	r22, r1
 880:	23 1f       	adc	r18, r19
 882:	84 9f       	mul	r24, r20
 884:	60 0d       	add	r22, r0
 886:	21 1d       	adc	r18, r1
 888:	82 2f       	mov	r24, r18
 88a:	76 2f       	mov	r23, r22
 88c:	6a 2f       	mov	r22, r26
 88e:	11 24       	eor	r1, r1
 890:	9f 57       	subi	r25, 0x7F	; 127
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	8a f0       	brmi	.+34     	; 0x8b8 <__mulsf3_pse+0x84>
 896:	e1 f0       	breq	.+56     	; 0x8d0 <__mulsf3_pse+0x9c>
 898:	88 23       	and	r24, r24
 89a:	4a f0       	brmi	.+18     	; 0x8ae <__mulsf3_pse+0x7a>
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	91 50       	subi	r25, 0x01	; 1
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	a9 f7       	brne	.-22     	; 0x898 <__mulsf3_pse+0x64>
 8ae:	9e 3f       	cpi	r25, 0xFE	; 254
 8b0:	51 05       	cpc	r21, r1
 8b2:	70 f0       	brcs	.+28     	; 0x8d0 <__mulsf3_pse+0x9c>
 8b4:	1c cf       	rjmp	.-456    	; 0x6ee <__fp_inf>
 8b6:	a6 cf       	rjmp	.-180    	; 0x804 <__fp_szero>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	ec f3       	brlt	.-6      	; 0x8b6 <__mulsf3_pse+0x82>
 8bc:	98 3e       	cpi	r25, 0xE8	; 232
 8be:	dc f3       	brlt	.-10     	; 0x8b6 <__mulsf3_pse+0x82>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f7 95       	ror	r31
 8ca:	e7 95       	ror	r30
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	c1 f7       	brne	.-16     	; 0x8c0 <__mulsf3_pse+0x8c>
 8d0:	fe 2b       	or	r31, r30
 8d2:	88 0f       	add	r24, r24
 8d4:	91 1d       	adc	r25, r1
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <_exit>:
 8de:	f8 94       	cli

000008e0 <__stop_program>:
 8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <__stop_program>
