
SPI_AD_DA_controller_P_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000081e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010e  0080010e  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009eb  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022e  00000000  00000000  00002435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	cc c0       	rjmp	.+408    	; 0x1b0 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e1       	ldi	r30, 0x1E	; 30
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 33       	cpi	r26, 0x33	; 51
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	d8 c3       	rjmp	.+1968   	; 0x81a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}

// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
float	Error;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	float	Sawtooth, StepInput, Sawtooth_Amplitude, Step_Amplitude, Input_Increment;

	Vel_Set_v = -3.0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	a0 e4       	ldi	r26, 0x40	; 64
  9e:	b0 ec       	ldi	r27, 0xC0	; 192
  a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Vel_Set_v>
  a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Vel_Set_v+0x1>
  a8:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Vel_Set_v+0x2>
  ac:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Vel_Set_v+0x3>

	Max_Voltage = 6.0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a0 ec       	ldi	r26, 0xC0	; 192
  b6:	b0 e4       	ldi	r27, 0x40	; 64
  b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Max_Voltage>
  bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Max_Voltage+0x1>
  c0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <Max_Voltage+0x2>
  c4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <Max_Voltage+0x3>
	Kp          = 1.0; 	// Proportional control constant
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e8       	ldi	r26, 0x80	; 128
  ce:	bf e3       	ldi	r27, 0x3F	; 63
  d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Kp>
  d4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Kp+0x1>
  d8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <Kp+0x2>
  dc:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <Kp+0x3>
	// The incriment needs to be very small so the velocity change is obsevable
	
	// Note if you have print statments active this will slow the control loop dramatically

	//USART Setup
	UBRR0H = (MYUBRR >> 8);
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__iob+0x3>
  f8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__iob+0x2>

	// AD initialization
	ADMUX  = 0b00000010; //Input on ADC2
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
 102:	87 e8       	ldi	r24, 0x87	; 135
 104:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
 108:	8c e2       	ldi	r24, 0x2C	; 44
 10a:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
 10c:	82 e8       	ldi	r24, 0x82	; 130
 10e:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
 114:	1d bc       	out	0x2d, r1	; 45

	//Interrupt counter set up
	// Configure timer 1 for CTC mode, clk/8
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); 
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8a 60       	ori	r24, 0x0A	; 10
 11e:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 120:	ef e6       	ldi	r30, 0x6F	; 111
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupt
 12a:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) - 1

	OCR1A = 3999;   //Set CTC compare value to 200Hz at 16MHz AVR clock, with a prescaler of 8
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 134:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>

	Sawtooth           = -1.0;			// Initial value
 138:	0f 2e       	mov	r0, r31
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
 13e:	f0 e8       	ldi	r31, 0x80	; 128
 140:	ef 2e       	mov	r14, r31
 142:	ff eb       	ldi	r31, 0xBF	; 191
 144:	ff 2e       	mov	r15, r31
 146:	f0 2d       	mov	r31, r0
	// SampleTime is the physical time for one cycle

	while(1)
	{
		// Digitally generated Input wave form
		Sawtooth += Input_Increment;						// Input_Increment
 148:	2a e0       	ldi	r18, 0x0A	; 10
 14a:	37 ed       	ldi	r19, 0xD7	; 215
 14c:	43 ea       	ldi	r20, 0xA3	; 163
 14e:	5c e3       	ldi	r21, 0x3C	; 60
 150:	c7 01       	movw	r24, r14
 152:	b6 01       	movw	r22, r12
 154:	fa d0       	rcall	.+500    	; 0x34a <__addsf3>
 156:	6b 01       	movw	r12, r22
 158:	7c 01       	movw	r14, r24
		if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	5f e3       	ldi	r21, 0x3F	; 63
 162:	f4 d2       	rcall	.+1512   	; 0x74c <__gesf2>
 164:	88 23       	and	r24, r24
 166:	44 f0       	brlt	.+16     	; 0x178 <main+0xe0>
 168:	0f 2e       	mov	r0, r31
 16a:	c1 2c       	mov	r12, r1
 16c:	d1 2c       	mov	r13, r1
 16e:	f0 e8       	ldi	r31, 0x80	; 128
 170:	ef 2e       	mov	r14, r31
 172:	ff eb       	ldi	r31, 0xBF	; 191
 174:	ff 2e       	mov	r15, r31
 176:	f0 2d       	mov	r31, r0
		if(Sawtooth <= 0.0) StepInput = 0.0;                  // Step Input Value     (0 to 1)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	a9 01       	movw	r20, r18
 17e:	c7 01       	movw	r24, r14
 180:	b6 01       	movw	r22, r12
 182:	47 d1       	rcall	.+654    	; 0x412 <__cmpsf2>
 184:	18 16       	cp	r1, r24
 186:	1c f0       	brlt	.+6      	; 0x18e <main+0xf6>
 188:	81 2c       	mov	r8, r1
 18a:	91 2c       	mov	r9, r1
 18c:	54 01       	movw	r10, r8
		if(Sawtooth > 0.0)  StepInput = 1.0;                  // Step Input Value		(0 to 1)
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	a9 01       	movw	r20, r18
 194:	c7 01       	movw	r24, r14
 196:	b6 01       	movw	r22, r12
 198:	d9 d2       	rcall	.+1458   	; 0x74c <__gesf2>
 19a:	18 16       	cp	r1, r24
 19c:	44 f4       	brge	.+16     	; 0x1ae <main+0x116>
 19e:	0f 2e       	mov	r0, r31
 1a0:	81 2c       	mov	r8, r1
 1a2:	91 2c       	mov	r9, r1
 1a4:	f0 e8       	ldi	r31, 0x80	; 128
 1a6:	af 2e       	mov	r10, r31
 1a8:	ff e3       	ldi	r31, 0x3F	; 63
 1aa:	bf 2e       	mov	r11, r31
 1ac:	f0 2d       	mov	r31, r0
		Vel_Set_v = StepInput * Step_Amplitude;					// Set Velocity Set Point to either Sawtooth or Step Input Value
																	// Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)
		// Vel_Set_v += 0.0005;
		// if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
		//printf("Print value: %d\n", StepInput);
	}
 1ae:	cc cf       	rjmp	.-104    	; 0x148 <main+0xb0>

000001b0 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 92       	push	r8
 1bc:	9f 92       	push	r9
 1be:	af 92       	push	r10
 1c0:	bf 92       	push	r11
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	// Begin sampling for control system
	ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 1ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 1f0:	86 fd       	sbrc	r24, 6
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <__vector_11+0x3c>

	adc_input = ADCW; 									// Read AD value
 1f4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 1f8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 1fc:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <adc_input+0x1>
 200:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <adc_input>
	adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	9c d1       	rcall	.+824    	; 0x542 <__floatunsisf>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 ea       	ldi	r20, 0xA0	; 160
 210:	5c e3       	ldi	r21, 0x3C	; 60
 212:	a0 d2       	rcall	.+1344   	; 0x754 <__mulsf3>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e2       	ldi	r20, 0x20	; 32
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	95 d0       	rcall	.+298    	; 0x348 <__subsf3>
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_input_v>
 226:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adc_input_v+0x1>
 22a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adc_input_v+0x2>
 22e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adc_input_v+0x3>
	// Note the input is bipolar +- 10 volts
	// Note that the (10./1024.) term needs the decimal point
	// or else it is interrupted as an integer and the result is zero
	// Control Equation

	Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 5 volts)
 232:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Vel_Set_v>
 236:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Vel_Set_v+0x1>
 23a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Vel_Set_v+0x2>
 23e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Vel_Set_v+0x3>
 242:	82 d0       	rcall	.+260    	; 0x348 <__subsf3>
 244:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <Error>
 248:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <Error+0x1>
 24c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Error+0x2>
 250:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Error+0x3>
	Control = Kp * Error;  						    // Control (units are voltage  +- 5 volts)
 254:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Kp>
 258:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <Kp+0x1>
 25c:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <Kp+0x2>
 260:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <Kp+0x3>
 264:	77 d2       	rcall	.+1262   	; 0x754 <__mulsf3>
 266:	4b 01       	movw	r8, r22
 268:	5c 01       	movw	r10, r24
 26a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 26e:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 272:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
 276:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 27a:	9f 77       	andi	r25, 0x7F	; 127
 27c:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <Max_Voltage>
 280:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <Max_Voltage+0x1>
 284:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <Max_Voltage+0x2>
 288:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <Max_Voltage+0x3>
 28c:	a7 01       	movw	r20, r14
 28e:	96 01       	movw	r18, r12
 290:	5d d2       	rcall	.+1210   	; 0x74c <__gesf2>
 292:	88 23       	and	r24, r24
 294:	54 f0       	brlt	.+20     	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 296:	b7 fa       	bst	r11, 7
 298:	f7 f8       	bld	r15, 7
	Control = copysign(Max_Voltage,Control);
 29a:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <__data_end>
 29e:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <__data_end+0x1>
 2a2:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <__data_end+0x2>
 2a6:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <__data_end+0x3>

	adc_output = floor((Control + 10.)*4096./20.);  			// Convert control voltage to a digital number for output
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e2       	ldi	r20, 0x20	; 32
 2b0:	51 e4       	ldi	r21, 0x41	; 65
 2b2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 2b6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 2ba:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 2be:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 2c2:	43 d0       	rcall	.+134    	; 0x34a <__addsf3>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e8       	ldi	r20, 0x80	; 128
 2ca:	55 e4       	ldi	r21, 0x45	; 69
 2cc:	43 d2       	rcall	.+1158   	; 0x754 <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 ea       	ldi	r20, 0xA0	; 160
 2d4:	51 e4       	ldi	r21, 0x41	; 65
 2d6:	a1 d0       	rcall	.+322    	; 0x41a <__divsf3>
 2d8:	71 d1       	rcall	.+738    	; 0x5bc <floor>
 2da:	07 d1       	rcall	.+526    	; 0x4ea <__fixunssfsi>
 2dc:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <adc_output+0x1>
 2e0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <adc_output>
		
	// printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
		
	// Output adc_output to DAC
	spi_data_0 = 0x00; 								// Zero spi_data_0
	spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 2e4:	9b 01       	movw	r18, r22
 2e6:	22 27       	eor	r18, r18
 2e8:	3f 70       	andi	r19, 0x0F	; 15
	// to the lower 4 bit positions and
	spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
 2ea:	20 e3       	ldi	r18, 0x30	; 48
 2ec:	23 0f       	add	r18, r19
 2ee:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <spi_data_0>
	spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
 2f2:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <spi_data_1>
	// bits 0-7 to the lower 8 bit positions
	cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	8b b9       	out	0x0b, r24	; 11
	dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 2fc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <spi_data_0>
 300:	c5 de       	rcall	.-630    	; 0x8c <spi_write_read>
 302:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 306:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <spi_data_1>
 30a:	c0 de       	rcall	.-640    	; 0x8c <spi_write_read>
 30c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	sbi(PORTD,7); 	
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	80 68       	ori	r24, 0x80	; 128
 314:	8b b9       	out	0x0b, r24	; 11
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__subsf3>:
 348:	50 58       	subi	r21, 0x80	; 128

0000034a <__addsf3>:
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	0e d0       	rcall	.+28     	; 0x36c <__addsf3x>
 350:	ac c1       	rjmp	.+856    	; 0x6aa <__fp_round>
 352:	9d d1       	rcall	.+826    	; 0x68e <__fp_pscA>
 354:	30 f0       	brcs	.+12     	; 0x362 <__addsf3+0x18>
 356:	a2 d1       	rcall	.+836    	; 0x69c <__fp_pscB>
 358:	20 f0       	brcs	.+8      	; 0x362 <__addsf3+0x18>
 35a:	31 f4       	brne	.+12     	; 0x368 <__addsf3+0x1e>
 35c:	9f 3f       	cpi	r25, 0xFF	; 255
 35e:	11 f4       	brne	.+4      	; 0x364 <__addsf3+0x1a>
 360:	1e f4       	brtc	.+6      	; 0x368 <__addsf3+0x1e>
 362:	92 c1       	rjmp	.+804    	; 0x688 <__fp_nan>
 364:	0e f4       	brtc	.+2      	; 0x368 <__addsf3+0x1e>
 366:	e0 95       	com	r30
 368:	e7 fb       	bst	r30, 7
 36a:	5f c1       	rjmp	.+702    	; 0x62a <__fp_inf>

0000036c <__addsf3x>:
 36c:	e9 2f       	mov	r30, r25
 36e:	ae d1       	rcall	.+860    	; 0x6cc <__fp_split3>
 370:	80 f3       	brcs	.-32     	; 0x352 <__addsf3+0x8>
 372:	ba 17       	cp	r27, r26
 374:	62 07       	cpc	r22, r18
 376:	73 07       	cpc	r23, r19
 378:	84 07       	cpc	r24, r20
 37a:	95 07       	cpc	r25, r21
 37c:	18 f0       	brcs	.+6      	; 0x384 <__addsf3x+0x18>
 37e:	71 f4       	brne	.+28     	; 0x39c <__addsf3x+0x30>
 380:	9e f5       	brtc	.+102    	; 0x3e8 <__addsf3x+0x7c>
 382:	dd c1       	rjmp	.+954    	; 0x73e <__fp_zero>
 384:	0e f4       	brtc	.+2      	; 0x388 <__addsf3x+0x1c>
 386:	e0 95       	com	r30
 388:	0b 2e       	mov	r0, r27
 38a:	ba 2f       	mov	r27, r26
 38c:	a0 2d       	mov	r26, r0
 38e:	0b 01       	movw	r0, r22
 390:	b9 01       	movw	r22, r18
 392:	90 01       	movw	r18, r0
 394:	0c 01       	movw	r0, r24
 396:	ca 01       	movw	r24, r20
 398:	a0 01       	movw	r20, r0
 39a:	11 24       	eor	r1, r1
 39c:	ff 27       	eor	r31, r31
 39e:	59 1b       	sub	r21, r25
 3a0:	99 f0       	breq	.+38     	; 0x3c8 <__addsf3x+0x5c>
 3a2:	59 3f       	cpi	r21, 0xF9	; 249
 3a4:	50 f4       	brcc	.+20     	; 0x3ba <__addsf3x+0x4e>
 3a6:	50 3e       	cpi	r21, 0xE0	; 224
 3a8:	68 f1       	brcs	.+90     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3aa:	1a 16       	cp	r1, r26
 3ac:	f0 40       	sbci	r31, 0x00	; 0
 3ae:	a2 2f       	mov	r26, r18
 3b0:	23 2f       	mov	r18, r19
 3b2:	34 2f       	mov	r19, r20
 3b4:	44 27       	eor	r20, r20
 3b6:	58 5f       	subi	r21, 0xF8	; 248
 3b8:	f3 cf       	rjmp	.-26     	; 0x3a0 <__addsf3x+0x34>
 3ba:	46 95       	lsr	r20
 3bc:	37 95       	ror	r19
 3be:	27 95       	ror	r18
 3c0:	a7 95       	ror	r26
 3c2:	f0 40       	sbci	r31, 0x00	; 0
 3c4:	53 95       	inc	r21
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__addsf3x+0x4e>
 3c8:	7e f4       	brtc	.+30     	; 0x3e8 <__addsf3x+0x7c>
 3ca:	1f 16       	cp	r1, r31
 3cc:	ba 0b       	sbc	r27, r26
 3ce:	62 0b       	sbc	r22, r18
 3d0:	73 0b       	sbc	r23, r19
 3d2:	84 0b       	sbc	r24, r20
 3d4:	ba f0       	brmi	.+46     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	a1 f0       	breq	.+40     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3da:	ff 0f       	add	r31, r31
 3dc:	bb 1f       	adc	r27, r27
 3de:	66 1f       	adc	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	c2 f7       	brpl	.-16     	; 0x3d6 <__addsf3x+0x6a>
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3e8:	ba 0f       	add	r27, r26
 3ea:	62 1f       	adc	r22, r18
 3ec:	73 1f       	adc	r23, r19
 3ee:	84 1f       	adc	r24, r20
 3f0:	48 f4       	brcc	.+18     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3f2:	87 95       	ror	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b7 95       	ror	r27
 3fa:	f7 95       	ror	r31
 3fc:	9e 3f       	cpi	r25, 0xFE	; 254
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 400:	b3 cf       	rjmp	.-154    	; 0x368 <__addsf3+0x1e>
 402:	93 95       	inc	r25
 404:	88 0f       	add	r24, r24
 406:	08 f0       	brcs	.+2      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 408:	99 27       	eor	r25, r25
 40a:	ee 0f       	add	r30, r30
 40c:	97 95       	ror	r25
 40e:	87 95       	ror	r24
 410:	08 95       	ret

00000412 <__cmpsf2>:
 412:	e7 d0       	rcall	.+462    	; 0x5e2 <__fp_cmp>
 414:	08 f4       	brcc	.+2      	; 0x418 <__cmpsf2+0x6>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret

0000041a <__divsf3>:
 41a:	0c d0       	rcall	.+24     	; 0x434 <__divsf3x>
 41c:	46 c1       	rjmp	.+652    	; 0x6aa <__fp_round>
 41e:	3e d1       	rcall	.+636    	; 0x69c <__fp_pscB>
 420:	40 f0       	brcs	.+16     	; 0x432 <__divsf3+0x18>
 422:	35 d1       	rcall	.+618    	; 0x68e <__fp_pscA>
 424:	30 f0       	brcs	.+12     	; 0x432 <__divsf3+0x18>
 426:	21 f4       	brne	.+8      	; 0x430 <__divsf3+0x16>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	19 f0       	breq	.+6      	; 0x432 <__divsf3+0x18>
 42c:	fe c0       	rjmp	.+508    	; 0x62a <__fp_inf>
 42e:	51 11       	cpse	r21, r1
 430:	87 c1       	rjmp	.+782    	; 0x740 <__fp_szero>
 432:	2a c1       	rjmp	.+596    	; 0x688 <__fp_nan>

00000434 <__divsf3x>:
 434:	4b d1       	rcall	.+662    	; 0x6cc <__fp_split3>
 436:	98 f3       	brcs	.-26     	; 0x41e <__divsf3+0x4>

00000438 <__divsf3_pse>:
 438:	99 23       	and	r25, r25
 43a:	c9 f3       	breq	.-14     	; 0x42e <__divsf3+0x14>
 43c:	55 23       	and	r21, r21
 43e:	b1 f3       	breq	.-20     	; 0x42c <__divsf3+0x12>
 440:	95 1b       	sub	r25, r21
 442:	55 0b       	sbc	r21, r21
 444:	bb 27       	eor	r27, r27
 446:	aa 27       	eor	r26, r26
 448:	62 17       	cp	r22, r18
 44a:	73 07       	cpc	r23, r19
 44c:	84 07       	cpc	r24, r20
 44e:	38 f0       	brcs	.+14     	; 0x45e <__divsf3_pse+0x26>
 450:	9f 5f       	subi	r25, 0xFF	; 255
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	22 0f       	add	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	44 1f       	adc	r20, r20
 45a:	aa 1f       	adc	r26, r26
 45c:	a9 f3       	breq	.-22     	; 0x448 <__divsf3_pse+0x10>
 45e:	33 d0       	rcall	.+102    	; 0x4c6 <__divsf3_pse+0x8e>
 460:	0e 2e       	mov	r0, r30
 462:	3a f0       	brmi	.+14     	; 0x472 <__divsf3_pse+0x3a>
 464:	e0 e8       	ldi	r30, 0x80	; 128
 466:	30 d0       	rcall	.+96     	; 0x4c8 <__divsf3_pse+0x90>
 468:	91 50       	subi	r25, 0x01	; 1
 46a:	50 40       	sbci	r21, 0x00	; 0
 46c:	e6 95       	lsr	r30
 46e:	00 1c       	adc	r0, r0
 470:	ca f7       	brpl	.-14     	; 0x464 <__divsf3_pse+0x2c>
 472:	29 d0       	rcall	.+82     	; 0x4c6 <__divsf3_pse+0x8e>
 474:	fe 2f       	mov	r31, r30
 476:	27 d0       	rcall	.+78     	; 0x4c6 <__divsf3_pse+0x8e>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	bb 1f       	adc	r27, r27
 480:	26 17       	cp	r18, r22
 482:	37 07       	cpc	r19, r23
 484:	48 07       	cpc	r20, r24
 486:	ab 07       	cpc	r26, r27
 488:	b0 e8       	ldi	r27, 0x80	; 128
 48a:	09 f0       	breq	.+2      	; 0x48e <__divsf3_pse+0x56>
 48c:	bb 0b       	sbc	r27, r27
 48e:	80 2d       	mov	r24, r0
 490:	bf 01       	movw	r22, r30
 492:	ff 27       	eor	r31, r31
 494:	93 58       	subi	r25, 0x83	; 131
 496:	5f 4f       	sbci	r21, 0xFF	; 255
 498:	2a f0       	brmi	.+10     	; 0x4a4 <__divsf3_pse+0x6c>
 49a:	9e 3f       	cpi	r25, 0xFE	; 254
 49c:	51 05       	cpc	r21, r1
 49e:	68 f0       	brcs	.+26     	; 0x4ba <__divsf3_pse+0x82>
 4a0:	c4 c0       	rjmp	.+392    	; 0x62a <__fp_inf>
 4a2:	4e c1       	rjmp	.+668    	; 0x740 <__fp_szero>
 4a4:	5f 3f       	cpi	r21, 0xFF	; 255
 4a6:	ec f3       	brlt	.-6      	; 0x4a2 <__divsf3_pse+0x6a>
 4a8:	98 3e       	cpi	r25, 0xE8	; 232
 4aa:	dc f3       	brlt	.-10     	; 0x4a2 <__divsf3_pse+0x6a>
 4ac:	86 95       	lsr	r24
 4ae:	77 95       	ror	r23
 4b0:	67 95       	ror	r22
 4b2:	b7 95       	ror	r27
 4b4:	f7 95       	ror	r31
 4b6:	9f 5f       	subi	r25, 0xFF	; 255
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__divsf3_pse+0x74>
 4ba:	88 0f       	add	r24, r24
 4bc:	91 1d       	adc	r25, r1
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	97 f9       	bld	r25, 7
 4c4:	08 95       	ret
 4c6:	e1 e0       	ldi	r30, 0x01	; 1
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	bb 1f       	adc	r27, r27
 4d0:	62 17       	cp	r22, r18
 4d2:	73 07       	cpc	r23, r19
 4d4:	84 07       	cpc	r24, r20
 4d6:	ba 07       	cpc	r27, r26
 4d8:	20 f0       	brcs	.+8      	; 0x4e2 <__divsf3_pse+0xaa>
 4da:	62 1b       	sub	r22, r18
 4dc:	73 0b       	sbc	r23, r19
 4de:	84 0b       	sbc	r24, r20
 4e0:	ba 0b       	sbc	r27, r26
 4e2:	ee 1f       	adc	r30, r30
 4e4:	88 f7       	brcc	.-30     	; 0x4c8 <__divsf3_pse+0x90>
 4e6:	e0 95       	com	r30
 4e8:	08 95       	ret

000004ea <__fixunssfsi>:
 4ea:	f8 d0       	rcall	.+496    	; 0x6dc <__fp_splitA>
 4ec:	88 f0       	brcs	.+34     	; 0x510 <__stack+0x11>
 4ee:	9f 57       	subi	r25, 0x7F	; 127
 4f0:	90 f0       	brcs	.+36     	; 0x516 <__stack+0x17>
 4f2:	b9 2f       	mov	r27, r25
 4f4:	99 27       	eor	r25, r25
 4f6:	b7 51       	subi	r27, 0x17	; 23
 4f8:	a0 f0       	brcs	.+40     	; 0x522 <__stack+0x23>
 4fa:	d1 f0       	breq	.+52     	; 0x530 <__stack+0x31>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	1a f0       	brmi	.+6      	; 0x50c <__stack+0xd>
 506:	ba 95       	dec	r27
 508:	c9 f7       	brne	.-14     	; 0x4fc <__fixunssfsi+0x12>
 50a:	12 c0       	rjmp	.+36     	; 0x530 <__stack+0x31>
 50c:	b1 30       	cpi	r27, 0x01	; 1
 50e:	81 f0       	breq	.+32     	; 0x530 <__stack+0x31>
 510:	16 d1       	rcall	.+556    	; 0x73e <__fp_zero>
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	08 95       	ret
 516:	13 c1       	rjmp	.+550    	; 0x73e <__fp_zero>
 518:	67 2f       	mov	r22, r23
 51a:	78 2f       	mov	r23, r24
 51c:	88 27       	eor	r24, r24
 51e:	b8 5f       	subi	r27, 0xF8	; 248
 520:	39 f0       	breq	.+14     	; 0x530 <__stack+0x31>
 522:	b9 3f       	cpi	r27, 0xF9	; 249
 524:	cc f3       	brlt	.-14     	; 0x518 <__stack+0x19>
 526:	86 95       	lsr	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b3 95       	inc	r27
 52e:	d9 f7       	brne	.-10     	; 0x526 <__stack+0x27>
 530:	3e f4       	brtc	.+14     	; 0x540 <__stack+0x41>
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__floatunsisf>:
 542:	e8 94       	clt
 544:	09 c0       	rjmp	.+18     	; 0x558 <__floatsisf+0x12>

00000546 <__floatsisf>:
 546:	97 fb       	bst	r25, 7
 548:	3e f4       	brtc	.+14     	; 0x558 <__floatsisf+0x12>
 54a:	90 95       	com	r25
 54c:	80 95       	com	r24
 54e:	70 95       	com	r23
 550:	61 95       	neg	r22
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	99 23       	and	r25, r25
 55a:	a9 f0       	breq	.+42     	; 0x586 <__floatsisf+0x40>
 55c:	f9 2f       	mov	r31, r25
 55e:	96 e9       	ldi	r25, 0x96	; 150
 560:	bb 27       	eor	r27, r27
 562:	93 95       	inc	r25
 564:	f6 95       	lsr	r31
 566:	87 95       	ror	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b7 95       	ror	r27
 56e:	f1 11       	cpse	r31, r1
 570:	f8 cf       	rjmp	.-16     	; 0x562 <__floatsisf+0x1c>
 572:	fa f4       	brpl	.+62     	; 0x5b2 <__floatsisf+0x6c>
 574:	bb 0f       	add	r27, r27
 576:	11 f4       	brne	.+4      	; 0x57c <__floatsisf+0x36>
 578:	60 ff       	sbrs	r22, 0
 57a:	1b c0       	rjmp	.+54     	; 0x5b2 <__floatsisf+0x6c>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	16 c0       	rjmp	.+44     	; 0x5b2 <__floatsisf+0x6c>
 586:	88 23       	and	r24, r24
 588:	11 f0       	breq	.+4      	; 0x58e <__floatsisf+0x48>
 58a:	96 e9       	ldi	r25, 0x96	; 150
 58c:	11 c0       	rjmp	.+34     	; 0x5b0 <__floatsisf+0x6a>
 58e:	77 23       	and	r23, r23
 590:	21 f0       	breq	.+8      	; 0x59a <__floatsisf+0x54>
 592:	9e e8       	ldi	r25, 0x8E	; 142
 594:	87 2f       	mov	r24, r23
 596:	76 2f       	mov	r23, r22
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__floatsisf+0x5e>
 59a:	66 23       	and	r22, r22
 59c:	71 f0       	breq	.+28     	; 0x5ba <__floatsisf+0x74>
 59e:	96 e8       	ldi	r25, 0x86	; 134
 5a0:	86 2f       	mov	r24, r22
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	2a f0       	brmi	.+10     	; 0x5b2 <__floatsisf+0x6c>
 5a8:	9a 95       	dec	r25
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	da f7       	brpl	.-10     	; 0x5a8 <__floatsisf+0x62>
 5b2:	88 0f       	add	r24, r24
 5b4:	96 95       	lsr	r25
 5b6:	87 95       	ror	r24
 5b8:	97 f9       	bld	r25, 7
 5ba:	08 95       	ret

000005bc <floor>:
 5bc:	a9 d0       	rcall	.+338    	; 0x710 <__fp_trunc>
 5be:	80 f0       	brcs	.+32     	; 0x5e0 <floor+0x24>
 5c0:	9f 37       	cpi	r25, 0x7F	; 127
 5c2:	40 f4       	brcc	.+16     	; 0x5d4 <floor+0x18>
 5c4:	91 11       	cpse	r25, r1
 5c6:	0e f0       	brts	.+2      	; 0x5ca <floor+0xe>
 5c8:	bb c0       	rjmp	.+374    	; 0x740 <__fp_szero>
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e8       	ldi	r24, 0x80	; 128
 5d0:	9f eb       	ldi	r25, 0xBF	; 191
 5d2:	08 95       	ret
 5d4:	26 f4       	brtc	.+8      	; 0x5de <floor+0x22>
 5d6:	1b 16       	cp	r1, r27
 5d8:	61 1d       	adc	r22, r1
 5da:	71 1d       	adc	r23, r1
 5dc:	81 1d       	adc	r24, r1
 5de:	2b c0       	rjmp	.+86     	; 0x636 <__fp_mintl>
 5e0:	45 c0       	rjmp	.+138    	; 0x66c <__fp_mpack>

000005e2 <__fp_cmp>:
 5e2:	99 0f       	add	r25, r25
 5e4:	00 08       	sbc	r0, r0
 5e6:	55 0f       	add	r21, r21
 5e8:	aa 0b       	sbc	r26, r26
 5ea:	e0 e8       	ldi	r30, 0x80	; 128
 5ec:	fe ef       	ldi	r31, 0xFE	; 254
 5ee:	16 16       	cp	r1, r22
 5f0:	17 06       	cpc	r1, r23
 5f2:	e8 07       	cpc	r30, r24
 5f4:	f9 07       	cpc	r31, r25
 5f6:	c0 f0       	brcs	.+48     	; 0x628 <__fp_cmp+0x46>
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	e4 07       	cpc	r30, r20
 5fe:	f5 07       	cpc	r31, r21
 600:	98 f0       	brcs	.+38     	; 0x628 <__fp_cmp+0x46>
 602:	62 1b       	sub	r22, r18
 604:	73 0b       	sbc	r23, r19
 606:	84 0b       	sbc	r24, r20
 608:	95 0b       	sbc	r25, r21
 60a:	39 f4       	brne	.+14     	; 0x61a <__fp_cmp+0x38>
 60c:	0a 26       	eor	r0, r26
 60e:	61 f0       	breq	.+24     	; 0x628 <__fp_cmp+0x46>
 610:	23 2b       	or	r18, r19
 612:	24 2b       	or	r18, r20
 614:	25 2b       	or	r18, r21
 616:	21 f4       	brne	.+8      	; 0x620 <__fp_cmp+0x3e>
 618:	08 95       	ret
 61a:	0a 26       	eor	r0, r26
 61c:	09 f4       	brne	.+2      	; 0x620 <__fp_cmp+0x3e>
 61e:	a1 40       	sbci	r26, 0x01	; 1
 620:	a6 95       	lsr	r26
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	81 1d       	adc	r24, r1
 626:	81 1d       	adc	r24, r1
 628:	08 95       	ret

0000062a <__fp_inf>:
 62a:	97 f9       	bld	r25, 7
 62c:	9f 67       	ori	r25, 0x7F	; 127
 62e:	80 e8       	ldi	r24, 0x80	; 128
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	08 95       	ret

00000636 <__fp_mintl>:
 636:	88 23       	and	r24, r24
 638:	71 f4       	brne	.+28     	; 0x656 <__fp_mintl+0x20>
 63a:	77 23       	and	r23, r23
 63c:	21 f0       	breq	.+8      	; 0x646 <__fp_mintl+0x10>
 63e:	98 50       	subi	r25, 0x08	; 8
 640:	87 2b       	or	r24, r23
 642:	76 2f       	mov	r23, r22
 644:	07 c0       	rjmp	.+14     	; 0x654 <__fp_mintl+0x1e>
 646:	66 23       	and	r22, r22
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_mintl+0x18>
 64a:	99 27       	eor	r25, r25
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__fp_mintl+0x32>
 64e:	90 51       	subi	r25, 0x10	; 16
 650:	86 2b       	or	r24, r22
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	2a f0       	brmi	.+10     	; 0x662 <__fp_mintl+0x2c>
 658:	9a 95       	dec	r25
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	da f7       	brpl	.-10     	; 0x658 <__fp_mintl+0x22>
 662:	88 0f       	add	r24, r24
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__fp_mpack>:
 66c:	9f 3f       	cpi	r25, 0xFF	; 255
 66e:	31 f0       	breq	.+12     	; 0x67c <__fp_mpack_finite+0xc>

00000670 <__fp_mpack_finite>:
 670:	91 50       	subi	r25, 0x01	; 1
 672:	20 f4       	brcc	.+8      	; 0x67c <__fp_mpack_finite+0xc>
 674:	87 95       	ror	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	88 0f       	add	r24, r24
 67e:	91 1d       	adc	r25, r1
 680:	96 95       	lsr	r25
 682:	87 95       	ror	r24
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret

00000688 <__fp_nan>:
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	08 95       	ret

0000068e <__fp_pscA>:
 68e:	00 24       	eor	r0, r0
 690:	0a 94       	dec	r0
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	09 06       	cpc	r0, r25
 69a:	08 95       	ret

0000069c <__fp_pscB>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	05 06       	cpc	r0, r21
 6a8:	08 95       	ret

000006aa <__fp_round>:
 6aa:	09 2e       	mov	r0, r25
 6ac:	03 94       	inc	r0
 6ae:	00 0c       	add	r0, r0
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0xc>
 6b2:	88 23       	and	r24, r24
 6b4:	52 f0       	brmi	.+20     	; 0x6ca <__fp_round+0x20>
 6b6:	bb 0f       	add	r27, r27
 6b8:	40 f4       	brcc	.+16     	; 0x6ca <__fp_round+0x20>
 6ba:	bf 2b       	or	r27, r31
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0x18>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__fp_round+0x20>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__fp_split3>:
 6cc:	57 fd       	sbrc	r21, 7
 6ce:	90 58       	subi	r25, 0x80	; 128
 6d0:	44 0f       	add	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	59 f0       	breq	.+22     	; 0x6ec <__fp_splitA+0x10>
 6d6:	5f 3f       	cpi	r21, 0xFF	; 255
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <__fp_splitA+0x1a>
 6da:	47 95       	ror	r20

000006dc <__fp_splitA>:
 6dc:	88 0f       	add	r24, r24
 6de:	97 fb       	bst	r25, 7
 6e0:	99 1f       	adc	r25, r25
 6e2:	61 f0       	breq	.+24     	; 0x6fc <__fp_splitA+0x20>
 6e4:	9f 3f       	cpi	r25, 0xFF	; 255
 6e6:	79 f0       	breq	.+30     	; 0x706 <__fp_splitA+0x2a>
 6e8:	87 95       	ror	r24
 6ea:	08 95       	ret
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	f2 cf       	rjmp	.-28     	; 0x6da <__fp_split3+0xe>
 6f6:	46 95       	lsr	r20
 6f8:	f1 df       	rcall	.-30     	; 0x6dc <__fp_splitA>
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <__fp_splitA+0x30>
 6fc:	16 16       	cp	r1, r22
 6fe:	17 06       	cpc	r1, r23
 700:	18 06       	cpc	r1, r24
 702:	99 1f       	adc	r25, r25
 704:	f1 cf       	rjmp	.-30     	; 0x6e8 <__fp_splitA+0xc>
 706:	86 95       	lsr	r24
 708:	71 05       	cpc	r23, r1
 70a:	61 05       	cpc	r22, r1
 70c:	08 94       	sec
 70e:	08 95       	ret

00000710 <__fp_trunc>:
 710:	e5 df       	rcall	.-54     	; 0x6dc <__fp_splitA>
 712:	a0 f0       	brcs	.+40     	; 0x73c <__fp_trunc+0x2c>
 714:	be e7       	ldi	r27, 0x7E	; 126
 716:	b9 17       	cp	r27, r25
 718:	88 f4       	brcc	.+34     	; 0x73c <__fp_trunc+0x2c>
 71a:	bb 27       	eor	r27, r27
 71c:	9f 38       	cpi	r25, 0x8F	; 143
 71e:	60 f4       	brcc	.+24     	; 0x738 <__fp_trunc+0x28>
 720:	16 16       	cp	r1, r22
 722:	b1 1d       	adc	r27, r1
 724:	67 2f       	mov	r22, r23
 726:	78 2f       	mov	r23, r24
 728:	88 27       	eor	r24, r24
 72a:	98 5f       	subi	r25, 0xF8	; 248
 72c:	f7 cf       	rjmp	.-18     	; 0x71c <__fp_trunc+0xc>
 72e:	86 95       	lsr	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	b1 1d       	adc	r27, r1
 736:	93 95       	inc	r25
 738:	96 39       	cpi	r25, 0x96	; 150
 73a:	c8 f3       	brcs	.-14     	; 0x72e <__fp_trunc+0x1e>
 73c:	08 95       	ret

0000073e <__fp_zero>:
 73e:	e8 94       	clt

00000740 <__fp_szero>:
 740:	bb 27       	eor	r27, r27
 742:	66 27       	eor	r22, r22
 744:	77 27       	eor	r23, r23
 746:	cb 01       	movw	r24, r22
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__gesf2>:
 74c:	4a df       	rcall	.-364    	; 0x5e2 <__fp_cmp>
 74e:	08 f4       	brcc	.+2      	; 0x752 <__gesf2+0x6>
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	08 95       	ret

00000754 <__mulsf3>:
 754:	0b d0       	rcall	.+22     	; 0x76c <__mulsf3x>
 756:	a9 cf       	rjmp	.-174    	; 0x6aa <__fp_round>
 758:	9a df       	rcall	.-204    	; 0x68e <__fp_pscA>
 75a:	28 f0       	brcs	.+10     	; 0x766 <__mulsf3+0x12>
 75c:	9f df       	rcall	.-194    	; 0x69c <__fp_pscB>
 75e:	18 f0       	brcs	.+6      	; 0x766 <__mulsf3+0x12>
 760:	95 23       	and	r25, r21
 762:	09 f0       	breq	.+2      	; 0x766 <__mulsf3+0x12>
 764:	62 cf       	rjmp	.-316    	; 0x62a <__fp_inf>
 766:	90 cf       	rjmp	.-224    	; 0x688 <__fp_nan>
 768:	11 24       	eor	r1, r1
 76a:	ea cf       	rjmp	.-44     	; 0x740 <__fp_szero>

0000076c <__mulsf3x>:
 76c:	af df       	rcall	.-162    	; 0x6cc <__fp_split3>
 76e:	a0 f3       	brcs	.-24     	; 0x758 <__mulsf3+0x4>

00000770 <__mulsf3_pse>:
 770:	95 9f       	mul	r25, r21
 772:	d1 f3       	breq	.-12     	; 0x768 <__mulsf3+0x14>
 774:	95 0f       	add	r25, r21
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	55 1f       	adc	r21, r21
 77a:	62 9f       	mul	r22, r18
 77c:	f0 01       	movw	r30, r0
 77e:	72 9f       	mul	r23, r18
 780:	bb 27       	eor	r27, r27
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	63 9f       	mul	r22, r19
 788:	aa 27       	eor	r26, r26
 78a:	f0 0d       	add	r31, r0
 78c:	b1 1d       	adc	r27, r1
 78e:	aa 1f       	adc	r26, r26
 790:	64 9f       	mul	r22, r20
 792:	66 27       	eor	r22, r22
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	66 1f       	adc	r22, r22
 79a:	82 9f       	mul	r24, r18
 79c:	22 27       	eor	r18, r18
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	73 9f       	mul	r23, r19
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	62 1f       	adc	r22, r18
 7ac:	83 9f       	mul	r24, r19
 7ae:	a0 0d       	add	r26, r0
 7b0:	61 1d       	adc	r22, r1
 7b2:	22 1f       	adc	r18, r18
 7b4:	74 9f       	mul	r23, r20
 7b6:	33 27       	eor	r19, r19
 7b8:	a0 0d       	add	r26, r0
 7ba:	61 1d       	adc	r22, r1
 7bc:	23 1f       	adc	r18, r19
 7be:	84 9f       	mul	r24, r20
 7c0:	60 0d       	add	r22, r0
 7c2:	21 1d       	adc	r18, r1
 7c4:	82 2f       	mov	r24, r18
 7c6:	76 2f       	mov	r23, r22
 7c8:	6a 2f       	mov	r22, r26
 7ca:	11 24       	eor	r1, r1
 7cc:	9f 57       	subi	r25, 0x7F	; 127
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	8a f0       	brmi	.+34     	; 0x7f4 <__mulsf3_pse+0x84>
 7d2:	e1 f0       	breq	.+56     	; 0x80c <__mulsf3_pse+0x9c>
 7d4:	88 23       	and	r24, r24
 7d6:	4a f0       	brmi	.+18     	; 0x7ea <__mulsf3_pse+0x7a>
 7d8:	ee 0f       	add	r30, r30
 7da:	ff 1f       	adc	r31, r31
 7dc:	bb 1f       	adc	r27, r27
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	91 50       	subi	r25, 0x01	; 1
 7e6:	50 40       	sbci	r21, 0x00	; 0
 7e8:	a9 f7       	brne	.-22     	; 0x7d4 <__mulsf3_pse+0x64>
 7ea:	9e 3f       	cpi	r25, 0xFE	; 254
 7ec:	51 05       	cpc	r21, r1
 7ee:	70 f0       	brcs	.+28     	; 0x80c <__mulsf3_pse+0x9c>
 7f0:	1c cf       	rjmp	.-456    	; 0x62a <__fp_inf>
 7f2:	a6 cf       	rjmp	.-180    	; 0x740 <__fp_szero>
 7f4:	5f 3f       	cpi	r21, 0xFF	; 255
 7f6:	ec f3       	brlt	.-6      	; 0x7f2 <__mulsf3_pse+0x82>
 7f8:	98 3e       	cpi	r25, 0xE8	; 232
 7fa:	dc f3       	brlt	.-10     	; 0x7f2 <__mulsf3_pse+0x82>
 7fc:	86 95       	lsr	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	b7 95       	ror	r27
 804:	f7 95       	ror	r31
 806:	e7 95       	ror	r30
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	c1 f7       	brne	.-16     	; 0x7fc <__mulsf3_pse+0x8c>
 80c:	fe 2b       	or	r31, r30
 80e:	88 0f       	add	r24, r24
 810:	91 1d       	adc	r25, r1
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	97 f9       	bld	r25, 7
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
