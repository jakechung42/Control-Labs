
SPI_AD_DA_controller_P_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007ee  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080010e  0080010e  00000890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098f  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000360  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	b8 c0       	rjmp	.+368    	; 0x188 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ee       	ldi	r30, 0xEE	; 238
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 33       	cpi	r26, 0x33	; 51
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	c0 c3       	rjmp	.+1920   	; 0x7ea <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}

// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
float	Error;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	Vel_Set_v = -3.0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	a0 e4       	ldi	r26, 0x40	; 64
  9e:	b0 ec       	ldi	r27, 0xC0	; 192
  a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Vel_Set_v>
  a4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Vel_Set_v+0x1>
  a8:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Vel_Set_v+0x2>
  ac:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Vel_Set_v+0x3>

	Max_Voltage = 5.0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a0 ea       	ldi	r26, 0xA0	; 160
  b6:	b0 e4       	ldi	r27, 0x40	; 64
  b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Max_Voltage>
  bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Max_Voltage+0x1>
  c0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <Max_Voltage+0x2>
  c4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <Max_Voltage+0x3>
	Kp          = 1.0; 	// Proportional control constant
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a0 e8       	ldi	r26, 0x80	; 128
  ce:	bf e3       	ldi	r27, 0x3F	; 63
  d0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Kp>
  d4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Kp+0x1>
  d8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <Kp+0x2>
  dc:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <Kp+0x3>
	// The incriment needs to be very small so the velocity change is obsevable
	
	// Note if you have print statments active this will slow the control loop dramatically

	//USART Setup
	UBRR0H = MYUBRR >> 8;
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <__iob+0x3>
  f8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__iob+0x2>

	// AD initialization
	ADMUX  = 0b00000000; //Input on AD Channel 0
  fc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
 106:	8c e2       	ldi	r24, 0x2C	; 44
 108:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
 10a:	82 e8       	ldi	r24, 0x82	; 130
 10c:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
 10e:	82 e5       	ldi	r24, 0x52	; 82
 110:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
 112:	1d bc       	out	0x2d, r1	; 45

	//Interrupt counter set up
	// Configure timer 1 for CTC mode, clk/8
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10); 
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	89 60       	ori	r24, 0x09	; 9
 11c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 11e:	ef e6       	ldi	r30, 0x6F	; 111
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupt
 128:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) - 1

	OCR1A = 3999;   //Set CTC compare value to 1kHz at 16MHz AVR clock, with a prescaler of 8
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>

	while(1)
	{
		Vel_Set_v += .0005;									// The motor velocity voltage is cycled from -3 volts to +3 volts
 136:	2f e6       	ldi	r18, 0x6F	; 111
 138:	32 e1       	ldi	r19, 0x12	; 18
 13a:	43 e0       	ldi	r20, 0x03	; 3
 13c:	5a e3       	ldi	r21, 0x3A	; 58
 13e:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Vel_Set_v>
 142:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Vel_Set_v+0x1>
 146:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Vel_Set_v+0x2>
 14a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Vel_Set_v+0x3>
 14e:	e9 d0       	rcall	.+466    	; 0x322 <__addsf3>
 150:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <Vel_Set_v>
 154:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <Vel_Set_v+0x1>
 158:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Vel_Set_v+0x2>
 15c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Vel_Set_v+0x3>
		if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e4       	ldi	r20, 0x40	; 64
 166:	50 e4       	ldi	r21, 0x40	; 64
 168:	b5 d2       	rcall	.+1386   	; 0x6d4 <__gesf2>
 16a:	88 23       	and	r24, r24
 16c:	24 f3       	brlt	.-56     	; 0x136 <main+0x9e>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	a0 e4       	ldi	r26, 0x40	; 64
 174:	b0 ec       	ldi	r27, 0xC0	; 192
 176:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Vel_Set_v>
 17a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Vel_Set_v+0x1>
 17e:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Vel_Set_v+0x2>
 182:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Vel_Set_v+0x3>
 186:	d7 cf       	rjmp	.-82     	; 0x136 <main+0x9e>

00000188 <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	// Begin sampling for control system
	ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 1c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 1c8:	86 fd       	sbrc	r24, 6
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <__vector_11+0x3c>

	adc_input = ADCW; 									// Read AD value
 1cc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 1d0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 1d4:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <adc_input+0x1>
 1d8:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <adc_input>
	adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	98 d1       	rcall	.+816    	; 0x512 <__floatunsisf>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 ea       	ldi	r20, 0xA0	; 160
 1e8:	5c e3       	ldi	r21, 0x3C	; 60
 1ea:	78 d2       	rcall	.+1264   	; 0x6dc <__mulsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e2       	ldi	r20, 0x20	; 32
 1f2:	51 e4       	ldi	r21, 0x41	; 65
 1f4:	95 d0       	rcall	.+298    	; 0x320 <__subsf3>
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <adc_input_v>
 1fe:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <adc_input_v+0x1>
 202:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adc_input_v+0x2>
 206:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adc_input_v+0x3>
	// Note the input is bipolar +- 10 volts
	// Note that the (10./1024.) term needs the decimal point
	// or else it is interrupted as an integer and the result is zero
	// Control Equation

	Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 5 volts)
 20a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Vel_Set_v>
 20e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <Vel_Set_v+0x1>
 212:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Vel_Set_v+0x2>
 216:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Vel_Set_v+0x3>
 21a:	82 d0       	rcall	.+260    	; 0x320 <__subsf3>
 21c:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <Error>
 220:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <Error+0x1>
 224:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Error+0x2>
 228:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Error+0x3>
	Control = Kp * Error;  						    // Control (units are voltage  +- 5 volts)
 22c:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Kp>
 230:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <Kp+0x1>
 234:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <Kp+0x2>
 238:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <Kp+0x3>
 23c:	4f d2       	rcall	.+1182   	; 0x6dc <__mulsf3>
 23e:	4b 01       	movw	r8, r22
 240:	5c 01       	movw	r10, r24
 242:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 246:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 24a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
 24e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 252:	9f 77       	andi	r25, 0x7F	; 127
 254:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <Max_Voltage>
 258:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <Max_Voltage+0x1>
 25c:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <Max_Voltage+0x2>
 260:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <Max_Voltage+0x3>
 264:	a7 01       	movw	r20, r14
 266:	96 01       	movw	r18, r12
 268:	35 d2       	rcall	.+1130   	; 0x6d4 <__gesf2>
 26a:	88 23       	and	r24, r24
 26c:	54 f0       	brlt	.+20     	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 26e:	b7 fa       	bst	r11, 7
 270:	f7 f8       	bld	r15, 7
	Control = copysign(Max_Voltage,Control);
 272:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <__data_end>
 276:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <__data_end+0x1>
 27a:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <__data_end+0x2>
 27e:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <__data_end+0x3>

	adc_output = floor((Control + 10.)*4096./20.);  			// Convert control voltage to a digital number for output
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e2       	ldi	r20, 0x20	; 32
 288:	51 e4       	ldi	r21, 0x41	; 65
 28a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 28e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 292:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 296:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 29a:	43 d0       	rcall	.+134    	; 0x322 <__addsf3>
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 e8       	ldi	r20, 0x80	; 128
 2a2:	55 e4       	ldi	r21, 0x45	; 69
 2a4:	1b d2       	rcall	.+1078   	; 0x6dc <__mulsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 ea       	ldi	r20, 0xA0	; 160
 2ac:	51 e4       	ldi	r21, 0x41	; 65
 2ae:	9d d0       	rcall	.+314    	; 0x3ea <__divsf3>
 2b0:	6d d1       	rcall	.+730    	; 0x58c <floor>
 2b2:	03 d1       	rcall	.+518    	; 0x4ba <__fixunssfsi>
 2b4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <adc_output+0x1>
 2b8:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <adc_output>
		
	// printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
		
	// Output adc_output to DAC
	spi_data_0 = 0x00; 								// Zero spi_data_0
	spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 2bc:	9b 01       	movw	r18, r22
 2be:	22 27       	eor	r18, r18
 2c0:	3f 70       	andi	r19, 0x0F	; 15
	// to the lower 4 bit positions and
	spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
 2c2:	20 e3       	ldi	r18, 0x30	; 48
 2c4:	23 0f       	add	r18, r19
 2c6:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <spi_data_0>
	spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
 2ca:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <spi_data_1>
	// bits 0-7 to the lower 8 bit positions
	cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8f 77       	andi	r24, 0x7F	; 127
 2d2:	8b b9       	out	0x0b, r24	; 11
	dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 2d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <spi_data_0>
 2d8:	d9 de       	rcall	.-590    	; 0x8c <spi_write_read>
 2da:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 2de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <spi_data_1>
 2e2:	d4 de       	rcall	.-600    	; 0x8c <spi_write_read>
 2e4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy_read>
	sbi(PORTD,7); 	
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	8b b9       	out	0x0b, r24	; 11
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__subsf3>:
 320:	50 58       	subi	r21, 0x80	; 128

00000322 <__addsf3>:
 322:	bb 27       	eor	r27, r27
 324:	aa 27       	eor	r26, r26
 326:	0e d0       	rcall	.+28     	; 0x344 <__addsf3x>
 328:	84 c1       	rjmp	.+776    	; 0x632 <__fp_round>
 32a:	75 d1       	rcall	.+746    	; 0x616 <__fp_pscA>
 32c:	30 f0       	brcs	.+12     	; 0x33a <__addsf3+0x18>
 32e:	7a d1       	rcall	.+756    	; 0x624 <__fp_pscB>
 330:	20 f0       	brcs	.+8      	; 0x33a <__addsf3+0x18>
 332:	31 f4       	brne	.+12     	; 0x340 <__addsf3+0x1e>
 334:	9f 3f       	cpi	r25, 0xFF	; 255
 336:	11 f4       	brne	.+4      	; 0x33c <__addsf3+0x1a>
 338:	1e f4       	brtc	.+6      	; 0x340 <__addsf3+0x1e>
 33a:	6a c1       	rjmp	.+724    	; 0x610 <__fp_nan>
 33c:	0e f4       	brtc	.+2      	; 0x340 <__addsf3+0x1e>
 33e:	e0 95       	com	r30
 340:	e7 fb       	bst	r30, 7
 342:	37 c1       	rjmp	.+622    	; 0x5b2 <__fp_inf>

00000344 <__addsf3x>:
 344:	e9 2f       	mov	r30, r25
 346:	86 d1       	rcall	.+780    	; 0x654 <__fp_split3>
 348:	80 f3       	brcs	.-32     	; 0x32a <__addsf3+0x8>
 34a:	ba 17       	cp	r27, r26
 34c:	62 07       	cpc	r22, r18
 34e:	73 07       	cpc	r23, r19
 350:	84 07       	cpc	r24, r20
 352:	95 07       	cpc	r25, r21
 354:	18 f0       	brcs	.+6      	; 0x35c <__addsf3x+0x18>
 356:	71 f4       	brne	.+28     	; 0x374 <__addsf3x+0x30>
 358:	9e f5       	brtc	.+102    	; 0x3c0 <__addsf3x+0x7c>
 35a:	b5 c1       	rjmp	.+874    	; 0x6c6 <__fp_zero>
 35c:	0e f4       	brtc	.+2      	; 0x360 <__addsf3x+0x1c>
 35e:	e0 95       	com	r30
 360:	0b 2e       	mov	r0, r27
 362:	ba 2f       	mov	r27, r26
 364:	a0 2d       	mov	r26, r0
 366:	0b 01       	movw	r0, r22
 368:	b9 01       	movw	r22, r18
 36a:	90 01       	movw	r18, r0
 36c:	0c 01       	movw	r0, r24
 36e:	ca 01       	movw	r24, r20
 370:	a0 01       	movw	r20, r0
 372:	11 24       	eor	r1, r1
 374:	ff 27       	eor	r31, r31
 376:	59 1b       	sub	r21, r25
 378:	99 f0       	breq	.+38     	; 0x3a0 <__addsf3x+0x5c>
 37a:	59 3f       	cpi	r21, 0xF9	; 249
 37c:	50 f4       	brcc	.+20     	; 0x392 <__addsf3x+0x4e>
 37e:	50 3e       	cpi	r21, 0xE0	; 224
 380:	68 f1       	brcs	.+90     	; 0x3dc <__addsf3x+0x98>
 382:	1a 16       	cp	r1, r26
 384:	f0 40       	sbci	r31, 0x00	; 0
 386:	a2 2f       	mov	r26, r18
 388:	23 2f       	mov	r18, r19
 38a:	34 2f       	mov	r19, r20
 38c:	44 27       	eor	r20, r20
 38e:	58 5f       	subi	r21, 0xF8	; 248
 390:	f3 cf       	rjmp	.-26     	; 0x378 <__addsf3x+0x34>
 392:	46 95       	lsr	r20
 394:	37 95       	ror	r19
 396:	27 95       	ror	r18
 398:	a7 95       	ror	r26
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	53 95       	inc	r21
 39e:	c9 f7       	brne	.-14     	; 0x392 <__addsf3x+0x4e>
 3a0:	7e f4       	brtc	.+30     	; 0x3c0 <__addsf3x+0x7c>
 3a2:	1f 16       	cp	r1, r31
 3a4:	ba 0b       	sbc	r27, r26
 3a6:	62 0b       	sbc	r22, r18
 3a8:	73 0b       	sbc	r23, r19
 3aa:	84 0b       	sbc	r24, r20
 3ac:	ba f0       	brmi	.+46     	; 0x3dc <__addsf3x+0x98>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	a1 f0       	breq	.+40     	; 0x3da <__addsf3x+0x96>
 3b2:	ff 0f       	add	r31, r31
 3b4:	bb 1f       	adc	r27, r27
 3b6:	66 1f       	adc	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	c2 f7       	brpl	.-16     	; 0x3ae <__addsf3x+0x6a>
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <__addsf3x+0x98>
 3c0:	ba 0f       	add	r27, r26
 3c2:	62 1f       	adc	r22, r18
 3c4:	73 1f       	adc	r23, r19
 3c6:	84 1f       	adc	r24, r20
 3c8:	48 f4       	brcc	.+18     	; 0x3dc <__addsf3x+0x98>
 3ca:	87 95       	ror	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	9e 3f       	cpi	r25, 0xFE	; 254
 3d6:	08 f0       	brcs	.+2      	; 0x3da <__addsf3x+0x96>
 3d8:	b3 cf       	rjmp	.-154    	; 0x340 <__addsf3+0x1e>
 3da:	93 95       	inc	r25
 3dc:	88 0f       	add	r24, r24
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <__addsf3x+0x9e>
 3e0:	99 27       	eor	r25, r25
 3e2:	ee 0f       	add	r30, r30
 3e4:	97 95       	ror	r25
 3e6:	87 95       	ror	r24
 3e8:	08 95       	ret

000003ea <__divsf3>:
 3ea:	0c d0       	rcall	.+24     	; 0x404 <__divsf3x>
 3ec:	22 c1       	rjmp	.+580    	; 0x632 <__fp_round>
 3ee:	1a d1       	rcall	.+564    	; 0x624 <__fp_pscB>
 3f0:	40 f0       	brcs	.+16     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3f2:	11 d1       	rcall	.+546    	; 0x616 <__fp_pscA>
 3f4:	30 f0       	brcs	.+12     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3f6:	21 f4       	brne	.+8      	; 0x400 <__DATA_REGION_LENGTH__>
 3f8:	5f 3f       	cpi	r21, 0xFF	; 255
 3fa:	19 f0       	breq	.+6      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fc:	da c0       	rjmp	.+436    	; 0x5b2 <__fp_inf>
 3fe:	51 11       	cpse	r21, r1
 400:	63 c1       	rjmp	.+710    	; 0x6c8 <__fp_szero>
 402:	06 c1       	rjmp	.+524    	; 0x610 <__fp_nan>

00000404 <__divsf3x>:
 404:	27 d1       	rcall	.+590    	; 0x654 <__fp_split3>
 406:	98 f3       	brcs	.-26     	; 0x3ee <__divsf3+0x4>

00000408 <__divsf3_pse>:
 408:	99 23       	and	r25, r25
 40a:	c9 f3       	breq	.-14     	; 0x3fe <__divsf3+0x14>
 40c:	55 23       	and	r21, r21
 40e:	b1 f3       	breq	.-20     	; 0x3fc <__divsf3+0x12>
 410:	95 1b       	sub	r25, r21
 412:	55 0b       	sbc	r21, r21
 414:	bb 27       	eor	r27, r27
 416:	aa 27       	eor	r26, r26
 418:	62 17       	cp	r22, r18
 41a:	73 07       	cpc	r23, r19
 41c:	84 07       	cpc	r24, r20
 41e:	38 f0       	brcs	.+14     	; 0x42e <__divsf3_pse+0x26>
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	44 1f       	adc	r20, r20
 42a:	aa 1f       	adc	r26, r26
 42c:	a9 f3       	breq	.-22     	; 0x418 <__divsf3_pse+0x10>
 42e:	33 d0       	rcall	.+102    	; 0x496 <__divsf3_pse+0x8e>
 430:	0e 2e       	mov	r0, r30
 432:	3a f0       	brmi	.+14     	; 0x442 <__divsf3_pse+0x3a>
 434:	e0 e8       	ldi	r30, 0x80	; 128
 436:	30 d0       	rcall	.+96     	; 0x498 <__divsf3_pse+0x90>
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	50 40       	sbci	r21, 0x00	; 0
 43c:	e6 95       	lsr	r30
 43e:	00 1c       	adc	r0, r0
 440:	ca f7       	brpl	.-14     	; 0x434 <__divsf3_pse+0x2c>
 442:	29 d0       	rcall	.+82     	; 0x496 <__divsf3_pse+0x8e>
 444:	fe 2f       	mov	r31, r30
 446:	27 d0       	rcall	.+78     	; 0x496 <__divsf3_pse+0x8e>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	bb 1f       	adc	r27, r27
 450:	26 17       	cp	r18, r22
 452:	37 07       	cpc	r19, r23
 454:	48 07       	cpc	r20, r24
 456:	ab 07       	cpc	r26, r27
 458:	b0 e8       	ldi	r27, 0x80	; 128
 45a:	09 f0       	breq	.+2      	; 0x45e <__divsf3_pse+0x56>
 45c:	bb 0b       	sbc	r27, r27
 45e:	80 2d       	mov	r24, r0
 460:	bf 01       	movw	r22, r30
 462:	ff 27       	eor	r31, r31
 464:	93 58       	subi	r25, 0x83	; 131
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	2a f0       	brmi	.+10     	; 0x474 <__divsf3_pse+0x6c>
 46a:	9e 3f       	cpi	r25, 0xFE	; 254
 46c:	51 05       	cpc	r21, r1
 46e:	68 f0       	brcs	.+26     	; 0x48a <__divsf3_pse+0x82>
 470:	a0 c0       	rjmp	.+320    	; 0x5b2 <__fp_inf>
 472:	2a c1       	rjmp	.+596    	; 0x6c8 <__fp_szero>
 474:	5f 3f       	cpi	r21, 0xFF	; 255
 476:	ec f3       	brlt	.-6      	; 0x472 <__divsf3_pse+0x6a>
 478:	98 3e       	cpi	r25, 0xE8	; 232
 47a:	dc f3       	brlt	.-10     	; 0x472 <__divsf3_pse+0x6a>
 47c:	86 95       	lsr	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b7 95       	ror	r27
 484:	f7 95       	ror	r31
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	c9 f7       	brne	.-14     	; 0x47c <__divsf3_pse+0x74>
 48a:	88 0f       	add	r24, r24
 48c:	91 1d       	adc	r25, r1
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret
 496:	e1 e0       	ldi	r30, 0x01	; 1
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	bb 1f       	adc	r27, r27
 4a0:	62 17       	cp	r22, r18
 4a2:	73 07       	cpc	r23, r19
 4a4:	84 07       	cpc	r24, r20
 4a6:	ba 07       	cpc	r27, r26
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__divsf3_pse+0xaa>
 4aa:	62 1b       	sub	r22, r18
 4ac:	73 0b       	sbc	r23, r19
 4ae:	84 0b       	sbc	r24, r20
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	ee 1f       	adc	r30, r30
 4b4:	88 f7       	brcc	.-30     	; 0x498 <__divsf3_pse+0x90>
 4b6:	e0 95       	com	r30
 4b8:	08 95       	ret

000004ba <__fixunssfsi>:
 4ba:	d4 d0       	rcall	.+424    	; 0x664 <__fp_splitA>
 4bc:	88 f0       	brcs	.+34     	; 0x4e0 <__fixunssfsi+0x26>
 4be:	9f 57       	subi	r25, 0x7F	; 127
 4c0:	90 f0       	brcs	.+36     	; 0x4e6 <__fixunssfsi+0x2c>
 4c2:	b9 2f       	mov	r27, r25
 4c4:	99 27       	eor	r25, r25
 4c6:	b7 51       	subi	r27, 0x17	; 23
 4c8:	a0 f0       	brcs	.+40     	; 0x4f2 <__fixunssfsi+0x38>
 4ca:	d1 f0       	breq	.+52     	; 0x500 <__stack+0x1>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	1a f0       	brmi	.+6      	; 0x4dc <__fixunssfsi+0x22>
 4d6:	ba 95       	dec	r27
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__fixunssfsi+0x12>
 4da:	12 c0       	rjmp	.+36     	; 0x500 <__stack+0x1>
 4dc:	b1 30       	cpi	r27, 0x01	; 1
 4de:	81 f0       	breq	.+32     	; 0x500 <__stack+0x1>
 4e0:	f2 d0       	rcall	.+484    	; 0x6c6 <__fp_zero>
 4e2:	b1 e0       	ldi	r27, 0x01	; 1
 4e4:	08 95       	ret
 4e6:	ef c0       	rjmp	.+478    	; 0x6c6 <__fp_zero>
 4e8:	67 2f       	mov	r22, r23
 4ea:	78 2f       	mov	r23, r24
 4ec:	88 27       	eor	r24, r24
 4ee:	b8 5f       	subi	r27, 0xF8	; 248
 4f0:	39 f0       	breq	.+14     	; 0x500 <__stack+0x1>
 4f2:	b9 3f       	cpi	r27, 0xF9	; 249
 4f4:	cc f3       	brlt	.-14     	; 0x4e8 <__fixunssfsi+0x2e>
 4f6:	86 95       	lsr	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	b3 95       	inc	r27
 4fe:	d9 f7       	brne	.-10     	; 0x4f6 <__fixunssfsi+0x3c>
 500:	3e f4       	brtc	.+14     	; 0x510 <__stack+0x11>
 502:	90 95       	com	r25
 504:	80 95       	com	r24
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <__floatunsisf>:
 512:	e8 94       	clt
 514:	09 c0       	rjmp	.+18     	; 0x528 <__floatsisf+0x12>

00000516 <__floatsisf>:
 516:	97 fb       	bst	r25, 7
 518:	3e f4       	brtc	.+14     	; 0x528 <__floatsisf+0x12>
 51a:	90 95       	com	r25
 51c:	80 95       	com	r24
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	99 23       	and	r25, r25
 52a:	a9 f0       	breq	.+42     	; 0x556 <__floatsisf+0x40>
 52c:	f9 2f       	mov	r31, r25
 52e:	96 e9       	ldi	r25, 0x96	; 150
 530:	bb 27       	eor	r27, r27
 532:	93 95       	inc	r25
 534:	f6 95       	lsr	r31
 536:	87 95       	ror	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f1 11       	cpse	r31, r1
 540:	f8 cf       	rjmp	.-16     	; 0x532 <__floatsisf+0x1c>
 542:	fa f4       	brpl	.+62     	; 0x582 <__floatsisf+0x6c>
 544:	bb 0f       	add	r27, r27
 546:	11 f4       	brne	.+4      	; 0x54c <__floatsisf+0x36>
 548:	60 ff       	sbrs	r22, 0
 54a:	1b c0       	rjmp	.+54     	; 0x582 <__floatsisf+0x6c>
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	16 c0       	rjmp	.+44     	; 0x582 <__floatsisf+0x6c>
 556:	88 23       	and	r24, r24
 558:	11 f0       	breq	.+4      	; 0x55e <__floatsisf+0x48>
 55a:	96 e9       	ldi	r25, 0x96	; 150
 55c:	11 c0       	rjmp	.+34     	; 0x580 <__floatsisf+0x6a>
 55e:	77 23       	and	r23, r23
 560:	21 f0       	breq	.+8      	; 0x56a <__floatsisf+0x54>
 562:	9e e8       	ldi	r25, 0x8E	; 142
 564:	87 2f       	mov	r24, r23
 566:	76 2f       	mov	r23, r22
 568:	05 c0       	rjmp	.+10     	; 0x574 <__floatsisf+0x5e>
 56a:	66 23       	and	r22, r22
 56c:	71 f0       	breq	.+28     	; 0x58a <__floatsisf+0x74>
 56e:	96 e8       	ldi	r25, 0x86	; 134
 570:	86 2f       	mov	r24, r22
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	2a f0       	brmi	.+10     	; 0x582 <__floatsisf+0x6c>
 578:	9a 95       	dec	r25
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	da f7       	brpl	.-10     	; 0x578 <__floatsisf+0x62>
 582:	88 0f       	add	r24, r24
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	97 f9       	bld	r25, 7
 58a:	08 95       	ret

0000058c <floor>:
 58c:	85 d0       	rcall	.+266    	; 0x698 <__fp_trunc>
 58e:	80 f0       	brcs	.+32     	; 0x5b0 <floor+0x24>
 590:	9f 37       	cpi	r25, 0x7F	; 127
 592:	40 f4       	brcc	.+16     	; 0x5a4 <floor+0x18>
 594:	91 11       	cpse	r25, r1
 596:	0e f0       	brts	.+2      	; 0x59a <floor+0xe>
 598:	97 c0       	rjmp	.+302    	; 0x6c8 <__fp_szero>
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	9f eb       	ldi	r25, 0xBF	; 191
 5a2:	08 95       	ret
 5a4:	26 f4       	brtc	.+8      	; 0x5ae <floor+0x22>
 5a6:	1b 16       	cp	r1, r27
 5a8:	61 1d       	adc	r22, r1
 5aa:	71 1d       	adc	r23, r1
 5ac:	81 1d       	adc	r24, r1
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <__fp_mintl>
 5b0:	21 c0       	rjmp	.+66     	; 0x5f4 <__fp_mpack>

000005b2 <__fp_inf>:
 5b2:	97 f9       	bld	r25, 7
 5b4:	9f 67       	ori	r25, 0x7F	; 127
 5b6:	80 e8       	ldi	r24, 0x80	; 128
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	08 95       	ret

000005be <__fp_mintl>:
 5be:	88 23       	and	r24, r24
 5c0:	71 f4       	brne	.+28     	; 0x5de <__fp_mintl+0x20>
 5c2:	77 23       	and	r23, r23
 5c4:	21 f0       	breq	.+8      	; 0x5ce <__fp_mintl+0x10>
 5c6:	98 50       	subi	r25, 0x08	; 8
 5c8:	87 2b       	or	r24, r23
 5ca:	76 2f       	mov	r23, r22
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__fp_mintl+0x1e>
 5ce:	66 23       	and	r22, r22
 5d0:	11 f4       	brne	.+4      	; 0x5d6 <__fp_mintl+0x18>
 5d2:	99 27       	eor	r25, r25
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <__fp_mintl+0x32>
 5d6:	90 51       	subi	r25, 0x10	; 16
 5d8:	86 2b       	or	r24, r22
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	2a f0       	brmi	.+10     	; 0x5ea <__fp_mintl+0x2c>
 5e0:	9a 95       	dec	r25
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	da f7       	brpl	.-10     	; 0x5e0 <__fp_mintl+0x22>
 5ea:	88 0f       	add	r24, r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret

000005f4 <__fp_mpack>:
 5f4:	9f 3f       	cpi	r25, 0xFF	; 255
 5f6:	31 f0       	breq	.+12     	; 0x604 <__fp_mpack_finite+0xc>

000005f8 <__fp_mpack_finite>:
 5f8:	91 50       	subi	r25, 0x01	; 1
 5fa:	20 f4       	brcc	.+8      	; 0x604 <__fp_mpack_finite+0xc>
 5fc:	87 95       	ror	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	88 0f       	add	r24, r24
 606:	91 1d       	adc	r25, r1
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__fp_nan>:
 610:	9f ef       	ldi	r25, 0xFF	; 255
 612:	80 ec       	ldi	r24, 0xC0	; 192
 614:	08 95       	ret

00000616 <__fp_pscA>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	09 06       	cpc	r0, r25
 622:	08 95       	ret

00000624 <__fp_pscB>:
 624:	00 24       	eor	r0, r0
 626:	0a 94       	dec	r0
 628:	12 16       	cp	r1, r18
 62a:	13 06       	cpc	r1, r19
 62c:	14 06       	cpc	r1, r20
 62e:	05 06       	cpc	r0, r21
 630:	08 95       	ret

00000632 <__fp_round>:
 632:	09 2e       	mov	r0, r25
 634:	03 94       	inc	r0
 636:	00 0c       	add	r0, r0
 638:	11 f4       	brne	.+4      	; 0x63e <__fp_round+0xc>
 63a:	88 23       	and	r24, r24
 63c:	52 f0       	brmi	.+20     	; 0x652 <__fp_round+0x20>
 63e:	bb 0f       	add	r27, r27
 640:	40 f4       	brcc	.+16     	; 0x652 <__fp_round+0x20>
 642:	bf 2b       	or	r27, r31
 644:	11 f4       	brne	.+4      	; 0x64a <__fp_round+0x18>
 646:	60 ff       	sbrs	r22, 0
 648:	04 c0       	rjmp	.+8      	; 0x652 <__fp_round+0x20>
 64a:	6f 5f       	subi	r22, 0xFF	; 255
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__fp_split3>:
 654:	57 fd       	sbrc	r21, 7
 656:	90 58       	subi	r25, 0x80	; 128
 658:	44 0f       	add	r20, r20
 65a:	55 1f       	adc	r21, r21
 65c:	59 f0       	breq	.+22     	; 0x674 <__fp_splitA+0x10>
 65e:	5f 3f       	cpi	r21, 0xFF	; 255
 660:	71 f0       	breq	.+28     	; 0x67e <__fp_splitA+0x1a>
 662:	47 95       	ror	r20

00000664 <__fp_splitA>:
 664:	88 0f       	add	r24, r24
 666:	97 fb       	bst	r25, 7
 668:	99 1f       	adc	r25, r25
 66a:	61 f0       	breq	.+24     	; 0x684 <__fp_splitA+0x20>
 66c:	9f 3f       	cpi	r25, 0xFF	; 255
 66e:	79 f0       	breq	.+30     	; 0x68e <__fp_splitA+0x2a>
 670:	87 95       	ror	r24
 672:	08 95       	ret
 674:	12 16       	cp	r1, r18
 676:	13 06       	cpc	r1, r19
 678:	14 06       	cpc	r1, r20
 67a:	55 1f       	adc	r21, r21
 67c:	f2 cf       	rjmp	.-28     	; 0x662 <__fp_split3+0xe>
 67e:	46 95       	lsr	r20
 680:	f1 df       	rcall	.-30     	; 0x664 <__fp_splitA>
 682:	08 c0       	rjmp	.+16     	; 0x694 <__fp_splitA+0x30>
 684:	16 16       	cp	r1, r22
 686:	17 06       	cpc	r1, r23
 688:	18 06       	cpc	r1, r24
 68a:	99 1f       	adc	r25, r25
 68c:	f1 cf       	rjmp	.-30     	; 0x670 <__fp_splitA+0xc>
 68e:	86 95       	lsr	r24
 690:	71 05       	cpc	r23, r1
 692:	61 05       	cpc	r22, r1
 694:	08 94       	sec
 696:	08 95       	ret

00000698 <__fp_trunc>:
 698:	e5 df       	rcall	.-54     	; 0x664 <__fp_splitA>
 69a:	a0 f0       	brcs	.+40     	; 0x6c4 <__fp_trunc+0x2c>
 69c:	be e7       	ldi	r27, 0x7E	; 126
 69e:	b9 17       	cp	r27, r25
 6a0:	88 f4       	brcc	.+34     	; 0x6c4 <__fp_trunc+0x2c>
 6a2:	bb 27       	eor	r27, r27
 6a4:	9f 38       	cpi	r25, 0x8F	; 143
 6a6:	60 f4       	brcc	.+24     	; 0x6c0 <__fp_trunc+0x28>
 6a8:	16 16       	cp	r1, r22
 6aa:	b1 1d       	adc	r27, r1
 6ac:	67 2f       	mov	r22, r23
 6ae:	78 2f       	mov	r23, r24
 6b0:	88 27       	eor	r24, r24
 6b2:	98 5f       	subi	r25, 0xF8	; 248
 6b4:	f7 cf       	rjmp	.-18     	; 0x6a4 <__fp_trunc+0xc>
 6b6:	86 95       	lsr	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b1 1d       	adc	r27, r1
 6be:	93 95       	inc	r25
 6c0:	96 39       	cpi	r25, 0x96	; 150
 6c2:	c8 f3       	brcs	.-14     	; 0x6b6 <__fp_trunc+0x1e>
 6c4:	08 95       	ret

000006c6 <__fp_zero>:
 6c6:	e8 94       	clt

000006c8 <__fp_szero>:
 6c8:	bb 27       	eor	r27, r27
 6ca:	66 27       	eor	r22, r22
 6cc:	77 27       	eor	r23, r23
 6ce:	cb 01       	movw	r24, r22
 6d0:	97 f9       	bld	r25, 7
 6d2:	08 95       	ret

000006d4 <__gesf2>:
 6d4:	66 d0       	rcall	.+204    	; 0x7a2 <__fp_cmp>
 6d6:	08 f4       	brcc	.+2      	; 0x6da <__gesf2+0x6>
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__mulsf3>:
 6dc:	0b d0       	rcall	.+22     	; 0x6f4 <__mulsf3x>
 6de:	a9 cf       	rjmp	.-174    	; 0x632 <__fp_round>
 6e0:	9a df       	rcall	.-204    	; 0x616 <__fp_pscA>
 6e2:	28 f0       	brcs	.+10     	; 0x6ee <__mulsf3+0x12>
 6e4:	9f df       	rcall	.-194    	; 0x624 <__fp_pscB>
 6e6:	18 f0       	brcs	.+6      	; 0x6ee <__mulsf3+0x12>
 6e8:	95 23       	and	r25, r21
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__mulsf3+0x12>
 6ec:	62 cf       	rjmp	.-316    	; 0x5b2 <__fp_inf>
 6ee:	90 cf       	rjmp	.-224    	; 0x610 <__fp_nan>
 6f0:	11 24       	eor	r1, r1
 6f2:	ea cf       	rjmp	.-44     	; 0x6c8 <__fp_szero>

000006f4 <__mulsf3x>:
 6f4:	af df       	rcall	.-162    	; 0x654 <__fp_split3>
 6f6:	a0 f3       	brcs	.-24     	; 0x6e0 <__mulsf3+0x4>

000006f8 <__mulsf3_pse>:
 6f8:	95 9f       	mul	r25, r21
 6fa:	d1 f3       	breq	.-12     	; 0x6f0 <__mulsf3+0x14>
 6fc:	95 0f       	add	r25, r21
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	55 1f       	adc	r21, r21
 702:	62 9f       	mul	r22, r18
 704:	f0 01       	movw	r30, r0
 706:	72 9f       	mul	r23, r18
 708:	bb 27       	eor	r27, r27
 70a:	f0 0d       	add	r31, r0
 70c:	b1 1d       	adc	r27, r1
 70e:	63 9f       	mul	r22, r19
 710:	aa 27       	eor	r26, r26
 712:	f0 0d       	add	r31, r0
 714:	b1 1d       	adc	r27, r1
 716:	aa 1f       	adc	r26, r26
 718:	64 9f       	mul	r22, r20
 71a:	66 27       	eor	r22, r22
 71c:	b0 0d       	add	r27, r0
 71e:	a1 1d       	adc	r26, r1
 720:	66 1f       	adc	r22, r22
 722:	82 9f       	mul	r24, r18
 724:	22 27       	eor	r18, r18
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	62 1f       	adc	r22, r18
 72c:	73 9f       	mul	r23, r19
 72e:	b0 0d       	add	r27, r0
 730:	a1 1d       	adc	r26, r1
 732:	62 1f       	adc	r22, r18
 734:	83 9f       	mul	r24, r19
 736:	a0 0d       	add	r26, r0
 738:	61 1d       	adc	r22, r1
 73a:	22 1f       	adc	r18, r18
 73c:	74 9f       	mul	r23, r20
 73e:	33 27       	eor	r19, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	23 1f       	adc	r18, r19
 746:	84 9f       	mul	r24, r20
 748:	60 0d       	add	r22, r0
 74a:	21 1d       	adc	r18, r1
 74c:	82 2f       	mov	r24, r18
 74e:	76 2f       	mov	r23, r22
 750:	6a 2f       	mov	r22, r26
 752:	11 24       	eor	r1, r1
 754:	9f 57       	subi	r25, 0x7F	; 127
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	8a f0       	brmi	.+34     	; 0x77c <__mulsf3_pse+0x84>
 75a:	e1 f0       	breq	.+56     	; 0x794 <__mulsf3_pse+0x9c>
 75c:	88 23       	and	r24, r24
 75e:	4a f0       	brmi	.+18     	; 0x772 <__mulsf3_pse+0x7a>
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	bb 1f       	adc	r27, r27
 766:	66 1f       	adc	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	a9 f7       	brne	.-22     	; 0x75c <__mulsf3_pse+0x64>
 772:	9e 3f       	cpi	r25, 0xFE	; 254
 774:	51 05       	cpc	r21, r1
 776:	70 f0       	brcs	.+28     	; 0x794 <__mulsf3_pse+0x9c>
 778:	1c cf       	rjmp	.-456    	; 0x5b2 <__fp_inf>
 77a:	a6 cf       	rjmp	.-180    	; 0x6c8 <__fp_szero>
 77c:	5f 3f       	cpi	r21, 0xFF	; 255
 77e:	ec f3       	brlt	.-6      	; 0x77a <__mulsf3_pse+0x82>
 780:	98 3e       	cpi	r25, 0xE8	; 232
 782:	dc f3       	brlt	.-10     	; 0x77a <__mulsf3_pse+0x82>
 784:	86 95       	lsr	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b7 95       	ror	r27
 78c:	f7 95       	ror	r31
 78e:	e7 95       	ror	r30
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c1 f7       	brne	.-16     	; 0x784 <__mulsf3_pse+0x8c>
 794:	fe 2b       	or	r31, r30
 796:	88 0f       	add	r24, r24
 798:	91 1d       	adc	r25, r1
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	97 f9       	bld	r25, 7
 7a0:	08 95       	ret

000007a2 <__fp_cmp>:
 7a2:	99 0f       	add	r25, r25
 7a4:	00 08       	sbc	r0, r0
 7a6:	55 0f       	add	r21, r21
 7a8:	aa 0b       	sbc	r26, r26
 7aa:	e0 e8       	ldi	r30, 0x80	; 128
 7ac:	fe ef       	ldi	r31, 0xFE	; 254
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	e8 07       	cpc	r30, r24
 7b4:	f9 07       	cpc	r31, r25
 7b6:	c0 f0       	brcs	.+48     	; 0x7e8 <__fp_cmp+0x46>
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	e4 07       	cpc	r30, r20
 7be:	f5 07       	cpc	r31, r21
 7c0:	98 f0       	brcs	.+38     	; 0x7e8 <__fp_cmp+0x46>
 7c2:	62 1b       	sub	r22, r18
 7c4:	73 0b       	sbc	r23, r19
 7c6:	84 0b       	sbc	r24, r20
 7c8:	95 0b       	sbc	r25, r21
 7ca:	39 f4       	brne	.+14     	; 0x7da <__fp_cmp+0x38>
 7cc:	0a 26       	eor	r0, r26
 7ce:	61 f0       	breq	.+24     	; 0x7e8 <__fp_cmp+0x46>
 7d0:	23 2b       	or	r18, r19
 7d2:	24 2b       	or	r18, r20
 7d4:	25 2b       	or	r18, r21
 7d6:	21 f4       	brne	.+8      	; 0x7e0 <__fp_cmp+0x3e>
 7d8:	08 95       	ret
 7da:	0a 26       	eor	r0, r26
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <__fp_cmp+0x3e>
 7de:	a1 40       	sbci	r26, 0x01	; 1
 7e0:	a6 95       	lsr	r26
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	81 1d       	adc	r24, r1
 7e6:	81 1d       	adc	r24, r1
 7e8:	08 95       	ret

000007ea <_exit>:
 7ea:	f8 94       	cli

000007ec <__stop_program>:
 7ec:	ff cf       	rjmp	.-2      	; 0x7ec <__stop_program>
