
AD_DA_LagController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000009bc  00000a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080010e  0080010e  00000a5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a36  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00002657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	a9 c0       	rjmp	.+338    	; 0x16a <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec eb       	ldi	r30, 0xBC	; 188
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 35       	cpi	r26, 0x57	; 87
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	a7 c4       	rjmp	.+2382   	; 0x9b8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}

// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
volatile float   Error_m1, Error_m2, Control_m1, Control_m2;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	Vel_Set_v = -3.0;
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	a0 e4       	ldi	r26, 0x40	; 64
  9e:	b0 ec       	ldi	r27, 0xC0	; 192
  a0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Vel_Set_v>
  a4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Vel_Set_v+0x1>
  a8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <Vel_Set_v+0x2>
  ac:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <Vel_Set_v+0x3>

	Max_Voltage = 6.0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	a0 ec       	ldi	r26, 0xC0	; 192
  b6:	b0 e4       	ldi	r27, 0x40	; 64
  b8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Max_Voltage>
  bc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <Max_Voltage+0x1>
  c0:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <Max_Voltage+0x2>
  c4:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <Max_Voltage+0x3>
	// The incriment needs to be very small so the velocity change is obsevable
	
	// Note if you have print statments active this will slow the control loop dramatically

	//USART Setup
	UBRR0H = (MYUBRR >> 8);
  c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <__iob+0x3>
  e0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__iob+0x2>

	// AD initialization
	ADMUX  = 0b00000010; //Input on ADC2
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
  f0:	8c e2       	ldi	r24, 0x2C	; 44
  f2:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
  f4:	82 e8       	ldi	r24, 0x82	; 130
  f6:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
  f8:	82 e5       	ldi	r24, 0x52	; 82
  fa:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  fc:	1d bc       	out	0x2d, r1	; 45

	//Interrupt counter set up
	// Configure timer 1 for CTC mode, clk/8
	TCCR1B |= (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10); 
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8a 60       	ori	r24, 0x0A	; 10
 106:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 108:	ef e6       	ldi	r30, 0x6F	; 111
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24
	
	sei(); // Enable global interrupt
 112:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) - 1

	OCR1A = 1999;   //Set CTC compare value to 1k Hz at 16MHz AVR clock, with a prescaler of 8
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fe089>
 11c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fe088>

	Sawtooth           = -1.0;			// Initial value
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	a0 e8       	ldi	r26, 0x80	; 128
 126:	bf eb       	ldi	r27, 0xBF	; 191
 128:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Sawtooth>
 12c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Sawtooth+0x1>
 130:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <Sawtooth+0x2>
 134:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <Sawtooth+0x3>
	// Sawtooth_Amplitude = 1.0;			// 5 volts maximum
	Step_Amplitude     = 5.0;			// 5 volts maximum
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	a0 ea       	ldi	r26, 0xA0	; 160
 13e:	b0 e4       	ldi	r27, 0x40	; 64
 140:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Step_Amplitude>
 144:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Step_Amplitude+0x1>
 148:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <Step_Amplitude+0x2>
 14c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <Step_Amplitude+0x3>
	Input_Increment    = 0.005;		    // This variable is used to specify the desired frequency
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	97 ed       	ldi	r25, 0xD7	; 215
 154:	a3 ea       	ldi	r26, 0xA3	; 163
 156:	bb e3       	ldi	r27, 0x3B	; 59
 158:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Input_Increment>
 15c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <Input_Increment+0x1>
 160:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <Input_Increment+0x2>
 164:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <Input_Increment+0x3>
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0xd0>

0000016a <__vector_11>:
		// wait for interrupt
	}
}

ISR(TIMER1_COMPA_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 92       	push	r8
 176:	9f 92       	push	r9
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	// Begin sampling for control system
	ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 1a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 1aa:	86 fd       	sbrc	r24, 6
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <__vector_11+0x3c>

	// Digitally generated Input wave form
	Sawtooth += Input_Increment;						// Input_Increment
 1ae:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <Input_Increment>
 1b2:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <Input_Increment+0x1>
 1b6:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <Input_Increment+0x2>
 1ba:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <Input_Increment+0x3>
 1be:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Sawtooth>
 1c2:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <Sawtooth+0x1>
 1c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Sawtooth+0x2>
 1ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Sawtooth+0x3>
 1ce:	8c d1       	rcall	.+792    	; 0x4e8 <__addsf3>
 1d0:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <Sawtooth>
 1d4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <Sawtooth+0x1>
 1d8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Sawtooth+0x2>
 1dc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Sawtooth+0x3>
	if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e8       	ldi	r20, 0x80	; 128
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	80 d3       	rcall	.+1792   	; 0x8ea <__gesf2>
 1ea:	88 23       	and	r24, r24
 1ec:	64 f0       	brlt	.+24     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	a0 e8       	ldi	r26, 0x80	; 128
 1f4:	bf eb       	ldi	r27, 0xBF	; 191
 1f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Sawtooth>
 1fa:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Sawtooth+0x1>
 1fe:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <Sawtooth+0x2>
 202:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <Sawtooth+0x3>
	if(Sawtooth <= 0.0) StepInput = 0.0;                  // Step Input Value     (0 to 1)
 206:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <Sawtooth>
 20a:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <Sawtooth+0x1>
 20e:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <Sawtooth+0x2>
 212:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <Sawtooth+0x3>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	a9 01       	movw	r20, r18
 21c:	c7 01       	movw	r24, r14
 21e:	b6 01       	movw	r22, r12
 220:	c7 d1       	rcall	.+910    	; 0x5b0 <__cmpsf2>
 222:	18 16       	cp	r1, r24
 224:	44 f0       	brlt	.+16     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 226:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <StepInput>
 22a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <StepInput+0x1>
 22e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <StepInput+0x2>
 232:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <StepInput+0x3>
	if(Sawtooth > 0.0)  StepInput = 1.0;                  // Step Input Value		(0 to 1)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	a9 01       	movw	r20, r18
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	54 d3       	rcall	.+1704   	; 0x8ea <__gesf2>
 242:	18 16       	cp	r1, r24
 244:	64 f4       	brge	.+24     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	a0 e8       	ldi	r26, 0x80	; 128
 24c:	bf e3       	ldi	r27, 0x3F	; 63
 24e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <StepInput>
 252:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <StepInput+0x1>
 256:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <StepInput+0x2>
 25a:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <StepInput+0x3>
				
	// Vel_Set_v = Sawtooth*Sawtooth_Amplitude;            	// Set Velocity Set Point to either Sawtooth or Step Input Value
	Vel_Set_v = StepInput * Step_Amplitude;					// Set Velocity Set Point to either Sawtooth or Step Input Value
 25e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <Step_Amplitude>
 262:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <Step_Amplitude+0x1>
 266:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <Step_Amplitude+0x2>
 26a:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <Step_Amplitude+0x3>
 26e:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <StepInput>
 272:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <StepInput+0x1>
 276:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <StepInput+0x2>
 27a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <StepInput+0x3>
 27e:	39 d3       	rcall	.+1650   	; 0x8f2 <__mulsf3>
 280:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <Vel_Set_v>
 284:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <Vel_Set_v+0x1>
 288:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Vel_Set_v+0x2>
 28c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <Vel_Set_v+0x3>
																	// Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)
	// Vel_Set_v += 0.0005;
	// if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
	// printf("Print value: %d\n", Vel_Set_v*1000);

	adc_input = ADCW; 									// Read AD value
 290:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 294:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 298:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <adc_input+0x1>
 29c:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <adc_input>
	adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	1d d2       	rcall	.+1082   	; 0x6e0 <__floatunsisf>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 ea       	ldi	r20, 0xA0	; 160
 2ac:	5c e3       	ldi	r21, 0x3C	; 60
 2ae:	21 d3       	rcall	.+1602   	; 0x8f2 <__mulsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e2       	ldi	r20, 0x20	; 32
 2b6:	51 e4       	ldi	r21, 0x41	; 65
 2b8:	16 d1       	rcall	.+556    	; 0x4e6 <__subsf3>
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <adc_input_v>
 2c2:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <adc_input_v+0x1>
 2c6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <adc_input_v+0x2>
 2ca:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <adc_input_v+0x3>
	// Note the input is bipolar +- 10 volts
	// Note that the (10./1024.) term needs the decimal point
	// or else it is interrupted as an integer and the result is zero
	// Control Equation

	Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 5 volts)
 2ce:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <Vel_Set_v>
 2d2:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <Vel_Set_v+0x1>
 2d6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Vel_Set_v+0x2>
 2da:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Vel_Set_v+0x3>
 2de:	03 d1       	rcall	.+518    	; 0x4e6 <__subsf3>
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24
 2e4:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <Error>
 2e8:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <Error+0x1>
 2ec:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Error+0x2>
 2f0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <Error+0x3>
	// Control = Kp * Error;  						    // Control (units are voltage  +- 5 volts)
    // Get ready! Here comes the Lag Control Equation!!!!!!
    Control = (425.6*Error + 2.0*Error_m1 - 2.0*Control_m1 - 423.6*Error_m2 + 750.6*Control_m2)/752.6;
 2f4:	2d ec       	ldi	r18, 0xCD	; 205
 2f6:	3c ec       	ldi	r19, 0xCC	; 204
 2f8:	44 ed       	ldi	r20, 0xD4	; 212
 2fa:	53 e4       	ldi	r21, 0x43	; 67
 2fc:	fa d2       	rcall	.+1524   	; 0x8f2 <__mulsf3>
 2fe:	4b 01       	movw	r8, r22
 300:	5c 01       	movw	r10, r24
 302:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Error_m1>
 306:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <Error_m1+0x1>
 30a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Error_m1+0x2>
 30e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Error_m1+0x3>
 312:	9b 01       	movw	r18, r22
 314:	ac 01       	movw	r20, r24
 316:	e8 d0       	rcall	.+464    	; 0x4e8 <__addsf3>
 318:	9b 01       	movw	r18, r22
 31a:	ac 01       	movw	r20, r24
 31c:	c5 01       	movw	r24, r10
 31e:	b4 01       	movw	r22, r8
 320:	e3 d0       	rcall	.+454    	; 0x4e8 <__addsf3>
 322:	4b 01       	movw	r8, r22
 324:	5c 01       	movw	r10, r24
 326:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Control_m1>
 32a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Control_m1+0x1>
 32e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Control_m1+0x2>
 332:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Control_m1+0x3>
 336:	9b 01       	movw	r18, r22
 338:	ac 01       	movw	r20, r24
 33a:	d6 d0       	rcall	.+428    	; 0x4e8 <__addsf3>
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	c5 01       	movw	r24, r10
 342:	b4 01       	movw	r22, r8
 344:	d0 d0       	rcall	.+416    	; 0x4e6 <__subsf3>
 346:	4b 01       	movw	r8, r22
 348:	5c 01       	movw	r10, r24
 34a:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <Error_m2>
 34e:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <Error_m2+0x1>
 352:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Error_m2+0x2>
 356:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <Error_m2+0x3>
 35a:	2d ec       	ldi	r18, 0xCD	; 205
 35c:	3c ec       	ldi	r19, 0xCC	; 204
 35e:	43 ed       	ldi	r20, 0xD3	; 211
 360:	53 e4       	ldi	r21, 0x43	; 67
 362:	c7 d2       	rcall	.+1422   	; 0x8f2 <__mulsf3>
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	c5 01       	movw	r24, r10
 36a:	b4 01       	movw	r22, r8
 36c:	bc d0       	rcall	.+376    	; 0x4e6 <__subsf3>
 36e:	4b 01       	movw	r8, r22
 370:	5c 01       	movw	r10, r24
 372:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Control_m2>
 376:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <Control_m2+0x1>
 37a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Control_m2+0x2>
 37e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Control_m2+0x3>
 382:	26 e6       	ldi	r18, 0x66	; 102
 384:	36 ea       	ldi	r19, 0xA6	; 166
 386:	4b e3       	ldi	r20, 0x3B	; 59
 388:	54 e4       	ldi	r21, 0x44	; 68
 38a:	b3 d2       	rcall	.+1382   	; 0x8f2 <__mulsf3>
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	c5 01       	movw	r24, r10
 392:	b4 01       	movw	r22, r8
 394:	a9 d0       	rcall	.+338    	; 0x4e8 <__addsf3>
 396:	26 e6       	ldi	r18, 0x66	; 102
 398:	36 e2       	ldi	r19, 0x26	; 38
 39a:	4c e3       	ldi	r20, 0x3C	; 60
 39c:	54 e4       	ldi	r21, 0x44	; 68
 39e:	0c d1       	rcall	.+536    	; 0x5b8 <__divsf3>
 3a0:	4b 01       	movw	r8, r22
 3a2:	5c 01       	movw	r10, r24
 3a4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Control>
 3a8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Control+0x1>
 3ac:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Control+0x2>
 3b0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Control+0x3>

    Error_m1 = Error;
 3b4:	c0 92 40 01 	sts	0x0140, r12	; 0x800140 <Error_m1>
 3b8:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <Error_m1+0x1>
 3bc:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <Error_m1+0x2>
 3c0:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <Error_m1+0x3>
    Error_m2 = Error_m1;
 3c4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Error_m1>
 3c8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Error_m1+0x1>
 3cc:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <Error_m1+0x2>
 3d0:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <Error_m1+0x3>
 3d4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Error_m2>
 3d8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <Error_m2+0x1>
 3dc:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <Error_m2+0x2>
 3e0:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <Error_m2+0x3>

    Control_m1 = Control;
 3e4:	80 92 16 01 	sts	0x0116, r8	; 0x800116 <Control_m1>
 3e8:	90 92 17 01 	sts	0x0117, r9	; 0x800117 <Control_m1+0x1>
 3ec:	a0 92 18 01 	sts	0x0118, r10	; 0x800118 <Control_m1+0x2>
 3f0:	b0 92 19 01 	sts	0x0119, r11	; 0x800119 <Control_m1+0x3>
    Control_m2 = Control_m1;
 3f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Control_m1>
 3f8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Control_m1+0x1>
 3fc:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <Control_m1+0x2>
 400:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <Control_m1+0x3>
 404:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Control_m2>
 408:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <Control_m2+0x1>
 40c:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <Control_m2+0x2>
 410:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <Control_m2+0x3>

	// printf("Print set vel voltage: %d\n", Vel_Set_v*1000);  // Remember to comment out!

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 414:	c5 01       	movw	r24, r10
 416:	b4 01       	movw	r22, r8
 418:	9f 77       	andi	r25, 0x7F	; 127
 41a:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <Max_Voltage>
 41e:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <Max_Voltage+0x1>
 422:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <Max_Voltage+0x2>
 426:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <Max_Voltage+0x3>
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	5d d2       	rcall	.+1210   	; 0x8ea <__gesf2>
 430:	88 23       	and	r24, r24
 432:	54 f0       	brlt	.+20     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 434:	b7 fa       	bst	r11, 7
 436:	f7 f8       	bld	r15, 7
	Control = copysign(Max_Voltage,Control);
 438:	c0 92 12 01 	sts	0x0112, r12	; 0x800112 <Control>
 43c:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <Control+0x1>
 440:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <Control+0x2>
 444:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <Control+0x3>

	adc_output = floor((Control + 10.)*4096./20.);  			// Convert control voltage to a digital number for output
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e2       	ldi	r20, 0x20	; 32
 44e:	51 e4       	ldi	r21, 0x41	; 65
 450:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Control>
 454:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Control+0x1>
 458:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Control+0x2>
 45c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Control+0x3>
 460:	43 d0       	rcall	.+134    	; 0x4e8 <__addsf3>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e8       	ldi	r20, 0x80	; 128
 468:	55 e4       	ldi	r21, 0x45	; 69
 46a:	43 d2       	rcall	.+1158   	; 0x8f2 <__mulsf3>
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 ea       	ldi	r20, 0xA0	; 160
 472:	51 e4       	ldi	r21, 0x41	; 65
 474:	a1 d0       	rcall	.+322    	; 0x5b8 <__divsf3>
 476:	71 d1       	rcall	.+738    	; 0x75a <floor>
 478:	07 d1       	rcall	.+526    	; 0x688 <__fixunssfsi>
 47a:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <adc_output+0x1>
 47e:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <adc_output>
		
	// printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
		
	// Output adc_output to DAC
	spi_data_0 = 0x00; 								// Zero spi_data_0
	spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 482:	9b 01       	movw	r18, r22
 484:	22 27       	eor	r18, r18
 486:	3f 70       	andi	r19, 0x0F	; 15
	// to the lower 4 bit positions and
	spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
 488:	20 e3       	ldi	r18, 0x30	; 48
 48a:	23 0f       	add	r18, r19
 48c:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <spi_data_0>
	spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
 490:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <spi_data_1>
	// bits 0-7 to the lower 8 bit positions
	cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 494:	8b b1       	in	r24, 0x0b	; 11
 496:	8f 77       	andi	r24, 0x7F	; 127
 498:	8b b9       	out	0x0b, r24	; 11
	dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 49a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <spi_data_0>
 49e:	f6 dd       	rcall	.-1044   	; 0x8c <spi_write_read>
 4a0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <dummy_read>
	dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 4a4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <spi_data_1>
 4a8:	f1 dd       	rcall	.-1054   	; 0x8c <spi_write_read>
 4aa:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <dummy_read>
	sbi(PORTD,7); 	
 4ae:	8b b1       	in	r24, 0x0b	; 11
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	8b b9       	out	0x0b, r24	; 11
}
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	bf 90       	pop	r11
 4d6:	af 90       	pop	r10
 4d8:	9f 90       	pop	r9
 4da:	8f 90       	pop	r8
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__subsf3>:
 4e6:	50 58       	subi	r21, 0x80	; 128

000004e8 <__addsf3>:
 4e8:	bb 27       	eor	r27, r27
 4ea:	aa 27       	eor	r26, r26
 4ec:	0e d0       	rcall	.+28     	; 0x50a <__addsf3x>
 4ee:	ac c1       	rjmp	.+856    	; 0x848 <__fp_round>
 4f0:	9d d1       	rcall	.+826    	; 0x82c <__fp_pscA>
 4f2:	30 f0       	brcs	.+12     	; 0x500 <__stack+0x1>
 4f4:	a2 d1       	rcall	.+836    	; 0x83a <__fp_pscB>
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__stack+0x1>
 4f8:	31 f4       	brne	.+12     	; 0x506 <__stack+0x7>
 4fa:	9f 3f       	cpi	r25, 0xFF	; 255
 4fc:	11 f4       	brne	.+4      	; 0x502 <__stack+0x3>
 4fe:	1e f4       	brtc	.+6      	; 0x506 <__stack+0x7>
 500:	92 c1       	rjmp	.+804    	; 0x826 <__fp_nan>
 502:	0e f4       	brtc	.+2      	; 0x506 <__stack+0x7>
 504:	e0 95       	com	r30
 506:	e7 fb       	bst	r30, 7
 508:	5f c1       	rjmp	.+702    	; 0x7c8 <__fp_inf>

0000050a <__addsf3x>:
 50a:	e9 2f       	mov	r30, r25
 50c:	ae d1       	rcall	.+860    	; 0x86a <__fp_split3>
 50e:	80 f3       	brcs	.-32     	; 0x4f0 <__addsf3+0x8>
 510:	ba 17       	cp	r27, r26
 512:	62 07       	cpc	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	95 07       	cpc	r25, r21
 51a:	18 f0       	brcs	.+6      	; 0x522 <__addsf3x+0x18>
 51c:	71 f4       	brne	.+28     	; 0x53a <__addsf3x+0x30>
 51e:	9e f5       	brtc	.+102    	; 0x586 <__addsf3x+0x7c>
 520:	dd c1       	rjmp	.+954    	; 0x8dc <__fp_zero>
 522:	0e f4       	brtc	.+2      	; 0x526 <__addsf3x+0x1c>
 524:	e0 95       	com	r30
 526:	0b 2e       	mov	r0, r27
 528:	ba 2f       	mov	r27, r26
 52a:	a0 2d       	mov	r26, r0
 52c:	0b 01       	movw	r0, r22
 52e:	b9 01       	movw	r22, r18
 530:	90 01       	movw	r18, r0
 532:	0c 01       	movw	r0, r24
 534:	ca 01       	movw	r24, r20
 536:	a0 01       	movw	r20, r0
 538:	11 24       	eor	r1, r1
 53a:	ff 27       	eor	r31, r31
 53c:	59 1b       	sub	r21, r25
 53e:	99 f0       	breq	.+38     	; 0x566 <__addsf3x+0x5c>
 540:	59 3f       	cpi	r21, 0xF9	; 249
 542:	50 f4       	brcc	.+20     	; 0x558 <__addsf3x+0x4e>
 544:	50 3e       	cpi	r21, 0xE0	; 224
 546:	68 f1       	brcs	.+90     	; 0x5a2 <__addsf3x+0x98>
 548:	1a 16       	cp	r1, r26
 54a:	f0 40       	sbci	r31, 0x00	; 0
 54c:	a2 2f       	mov	r26, r18
 54e:	23 2f       	mov	r18, r19
 550:	34 2f       	mov	r19, r20
 552:	44 27       	eor	r20, r20
 554:	58 5f       	subi	r21, 0xF8	; 248
 556:	f3 cf       	rjmp	.-26     	; 0x53e <__addsf3x+0x34>
 558:	46 95       	lsr	r20
 55a:	37 95       	ror	r19
 55c:	27 95       	ror	r18
 55e:	a7 95       	ror	r26
 560:	f0 40       	sbci	r31, 0x00	; 0
 562:	53 95       	inc	r21
 564:	c9 f7       	brne	.-14     	; 0x558 <__addsf3x+0x4e>
 566:	7e f4       	brtc	.+30     	; 0x586 <__addsf3x+0x7c>
 568:	1f 16       	cp	r1, r31
 56a:	ba 0b       	sbc	r27, r26
 56c:	62 0b       	sbc	r22, r18
 56e:	73 0b       	sbc	r23, r19
 570:	84 0b       	sbc	r24, r20
 572:	ba f0       	brmi	.+46     	; 0x5a2 <__addsf3x+0x98>
 574:	91 50       	subi	r25, 0x01	; 1
 576:	a1 f0       	breq	.+40     	; 0x5a0 <__addsf3x+0x96>
 578:	ff 0f       	add	r31, r31
 57a:	bb 1f       	adc	r27, r27
 57c:	66 1f       	adc	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	88 1f       	adc	r24, r24
 582:	c2 f7       	brpl	.-16     	; 0x574 <__addsf3x+0x6a>
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <__addsf3x+0x98>
 586:	ba 0f       	add	r27, r26
 588:	62 1f       	adc	r22, r18
 58a:	73 1f       	adc	r23, r19
 58c:	84 1f       	adc	r24, r20
 58e:	48 f4       	brcc	.+18     	; 0x5a2 <__addsf3x+0x98>
 590:	87 95       	ror	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f7 95       	ror	r31
 59a:	9e 3f       	cpi	r25, 0xFE	; 254
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__addsf3x+0x96>
 59e:	b3 cf       	rjmp	.-154    	; 0x506 <__stack+0x7>
 5a0:	93 95       	inc	r25
 5a2:	88 0f       	add	r24, r24
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__addsf3x+0x9e>
 5a6:	99 27       	eor	r25, r25
 5a8:	ee 0f       	add	r30, r30
 5aa:	97 95       	ror	r25
 5ac:	87 95       	ror	r24
 5ae:	08 95       	ret

000005b0 <__cmpsf2>:
 5b0:	e7 d0       	rcall	.+462    	; 0x780 <__fp_cmp>
 5b2:	08 f4       	brcc	.+2      	; 0x5b6 <__cmpsf2+0x6>
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	08 95       	ret

000005b8 <__divsf3>:
 5b8:	0c d0       	rcall	.+24     	; 0x5d2 <__divsf3x>
 5ba:	46 c1       	rjmp	.+652    	; 0x848 <__fp_round>
 5bc:	3e d1       	rcall	.+636    	; 0x83a <__fp_pscB>
 5be:	40 f0       	brcs	.+16     	; 0x5d0 <__divsf3+0x18>
 5c0:	35 d1       	rcall	.+618    	; 0x82c <__fp_pscA>
 5c2:	30 f0       	brcs	.+12     	; 0x5d0 <__divsf3+0x18>
 5c4:	21 f4       	brne	.+8      	; 0x5ce <__divsf3+0x16>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	19 f0       	breq	.+6      	; 0x5d0 <__divsf3+0x18>
 5ca:	fe c0       	rjmp	.+508    	; 0x7c8 <__fp_inf>
 5cc:	51 11       	cpse	r21, r1
 5ce:	87 c1       	rjmp	.+782    	; 0x8de <__fp_szero>
 5d0:	2a c1       	rjmp	.+596    	; 0x826 <__fp_nan>

000005d2 <__divsf3x>:
 5d2:	4b d1       	rcall	.+662    	; 0x86a <__fp_split3>
 5d4:	98 f3       	brcs	.-26     	; 0x5bc <__divsf3+0x4>

000005d6 <__divsf3_pse>:
 5d6:	99 23       	and	r25, r25
 5d8:	c9 f3       	breq	.-14     	; 0x5cc <__divsf3+0x14>
 5da:	55 23       	and	r21, r21
 5dc:	b1 f3       	breq	.-20     	; 0x5ca <__divsf3+0x12>
 5de:	95 1b       	sub	r25, r21
 5e0:	55 0b       	sbc	r21, r21
 5e2:	bb 27       	eor	r27, r27
 5e4:	aa 27       	eor	r26, r26
 5e6:	62 17       	cp	r22, r18
 5e8:	73 07       	cpc	r23, r19
 5ea:	84 07       	cpc	r24, r20
 5ec:	38 f0       	brcs	.+14     	; 0x5fc <__divsf3_pse+0x26>
 5ee:	9f 5f       	subi	r25, 0xFF	; 255
 5f0:	5f 4f       	sbci	r21, 0xFF	; 255
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	44 1f       	adc	r20, r20
 5f8:	aa 1f       	adc	r26, r26
 5fa:	a9 f3       	breq	.-22     	; 0x5e6 <__divsf3_pse+0x10>
 5fc:	33 d0       	rcall	.+102    	; 0x664 <__divsf3_pse+0x8e>
 5fe:	0e 2e       	mov	r0, r30
 600:	3a f0       	brmi	.+14     	; 0x610 <__divsf3_pse+0x3a>
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	30 d0       	rcall	.+96     	; 0x666 <__divsf3_pse+0x90>
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	e6 95       	lsr	r30
 60c:	00 1c       	adc	r0, r0
 60e:	ca f7       	brpl	.-14     	; 0x602 <__divsf3_pse+0x2c>
 610:	29 d0       	rcall	.+82     	; 0x664 <__divsf3_pse+0x8e>
 612:	fe 2f       	mov	r31, r30
 614:	27 d0       	rcall	.+78     	; 0x664 <__divsf3_pse+0x8e>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	bb 1f       	adc	r27, r27
 61e:	26 17       	cp	r18, r22
 620:	37 07       	cpc	r19, r23
 622:	48 07       	cpc	r20, r24
 624:	ab 07       	cpc	r26, r27
 626:	b0 e8       	ldi	r27, 0x80	; 128
 628:	09 f0       	breq	.+2      	; 0x62c <__divsf3_pse+0x56>
 62a:	bb 0b       	sbc	r27, r27
 62c:	80 2d       	mov	r24, r0
 62e:	bf 01       	movw	r22, r30
 630:	ff 27       	eor	r31, r31
 632:	93 58       	subi	r25, 0x83	; 131
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	2a f0       	brmi	.+10     	; 0x642 <__divsf3_pse+0x6c>
 638:	9e 3f       	cpi	r25, 0xFE	; 254
 63a:	51 05       	cpc	r21, r1
 63c:	68 f0       	brcs	.+26     	; 0x658 <__divsf3_pse+0x82>
 63e:	c4 c0       	rjmp	.+392    	; 0x7c8 <__fp_inf>
 640:	4e c1       	rjmp	.+668    	; 0x8de <__fp_szero>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	ec f3       	brlt	.-6      	; 0x640 <__divsf3_pse+0x6a>
 646:	98 3e       	cpi	r25, 0xE8	; 232
 648:	dc f3       	brlt	.-10     	; 0x640 <__divsf3_pse+0x6a>
 64a:	86 95       	lsr	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	c9 f7       	brne	.-14     	; 0x64a <__divsf3_pse+0x74>
 658:	88 0f       	add	r24, r24
 65a:	91 1d       	adc	r25, r1
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	97 f9       	bld	r25, 7
 662:	08 95       	ret
 664:	e1 e0       	ldi	r30, 0x01	; 1
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	bb 1f       	adc	r27, r27
 66e:	62 17       	cp	r22, r18
 670:	73 07       	cpc	r23, r19
 672:	84 07       	cpc	r24, r20
 674:	ba 07       	cpc	r27, r26
 676:	20 f0       	brcs	.+8      	; 0x680 <__divsf3_pse+0xaa>
 678:	62 1b       	sub	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	ba 0b       	sbc	r27, r26
 680:	ee 1f       	adc	r30, r30
 682:	88 f7       	brcc	.-30     	; 0x666 <__divsf3_pse+0x90>
 684:	e0 95       	com	r30
 686:	08 95       	ret

00000688 <__fixunssfsi>:
 688:	f8 d0       	rcall	.+496    	; 0x87a <__fp_splitA>
 68a:	88 f0       	brcs	.+34     	; 0x6ae <__fixunssfsi+0x26>
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	90 f0       	brcs	.+36     	; 0x6b4 <__fixunssfsi+0x2c>
 690:	b9 2f       	mov	r27, r25
 692:	99 27       	eor	r25, r25
 694:	b7 51       	subi	r27, 0x17	; 23
 696:	a0 f0       	brcs	.+40     	; 0x6c0 <__fixunssfsi+0x38>
 698:	d1 f0       	breq	.+52     	; 0x6ce <__fixunssfsi+0x46>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	1a f0       	brmi	.+6      	; 0x6aa <__fixunssfsi+0x22>
 6a4:	ba 95       	dec	r27
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__fixunssfsi+0x12>
 6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__fixunssfsi+0x46>
 6aa:	b1 30       	cpi	r27, 0x01	; 1
 6ac:	81 f0       	breq	.+32     	; 0x6ce <__fixunssfsi+0x46>
 6ae:	16 d1       	rcall	.+556    	; 0x8dc <__fp_zero>
 6b0:	b1 e0       	ldi	r27, 0x01	; 1
 6b2:	08 95       	ret
 6b4:	13 c1       	rjmp	.+550    	; 0x8dc <__fp_zero>
 6b6:	67 2f       	mov	r22, r23
 6b8:	78 2f       	mov	r23, r24
 6ba:	88 27       	eor	r24, r24
 6bc:	b8 5f       	subi	r27, 0xF8	; 248
 6be:	39 f0       	breq	.+14     	; 0x6ce <__fixunssfsi+0x46>
 6c0:	b9 3f       	cpi	r27, 0xF9	; 249
 6c2:	cc f3       	brlt	.-14     	; 0x6b6 <__fixunssfsi+0x2e>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b3 95       	inc	r27
 6cc:	d9 f7       	brne	.-10     	; 0x6c4 <__fixunssfsi+0x3c>
 6ce:	3e f4       	brtc	.+14     	; 0x6de <__fixunssfsi+0x56>
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__floatunsisf>:
 6e0:	e8 94       	clt
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <__floatsisf+0x12>

000006e4 <__floatsisf>:
 6e4:	97 fb       	bst	r25, 7
 6e6:	3e f4       	brtc	.+14     	; 0x6f6 <__floatsisf+0x12>
 6e8:	90 95       	com	r25
 6ea:	80 95       	com	r24
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	99 23       	and	r25, r25
 6f8:	a9 f0       	breq	.+42     	; 0x724 <__floatsisf+0x40>
 6fa:	f9 2f       	mov	r31, r25
 6fc:	96 e9       	ldi	r25, 0x96	; 150
 6fe:	bb 27       	eor	r27, r27
 700:	93 95       	inc	r25
 702:	f6 95       	lsr	r31
 704:	87 95       	ror	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f1 11       	cpse	r31, r1
 70e:	f8 cf       	rjmp	.-16     	; 0x700 <__floatsisf+0x1c>
 710:	fa f4       	brpl	.+62     	; 0x750 <__floatsisf+0x6c>
 712:	bb 0f       	add	r27, r27
 714:	11 f4       	brne	.+4      	; 0x71a <__floatsisf+0x36>
 716:	60 ff       	sbrs	r22, 0
 718:	1b c0       	rjmp	.+54     	; 0x750 <__floatsisf+0x6c>
 71a:	6f 5f       	subi	r22, 0xFF	; 255
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	16 c0       	rjmp	.+44     	; 0x750 <__floatsisf+0x6c>
 724:	88 23       	and	r24, r24
 726:	11 f0       	breq	.+4      	; 0x72c <__floatsisf+0x48>
 728:	96 e9       	ldi	r25, 0x96	; 150
 72a:	11 c0       	rjmp	.+34     	; 0x74e <__floatsisf+0x6a>
 72c:	77 23       	and	r23, r23
 72e:	21 f0       	breq	.+8      	; 0x738 <__floatsisf+0x54>
 730:	9e e8       	ldi	r25, 0x8E	; 142
 732:	87 2f       	mov	r24, r23
 734:	76 2f       	mov	r23, r22
 736:	05 c0       	rjmp	.+10     	; 0x742 <__floatsisf+0x5e>
 738:	66 23       	and	r22, r22
 73a:	71 f0       	breq	.+28     	; 0x758 <__floatsisf+0x74>
 73c:	96 e8       	ldi	r25, 0x86	; 134
 73e:	86 2f       	mov	r24, r22
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	2a f0       	brmi	.+10     	; 0x750 <__floatsisf+0x6c>
 746:	9a 95       	dec	r25
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	da f7       	brpl	.-10     	; 0x746 <__floatsisf+0x62>
 750:	88 0f       	add	r24, r24
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret

0000075a <floor>:
 75a:	a9 d0       	rcall	.+338    	; 0x8ae <__fp_trunc>
 75c:	80 f0       	brcs	.+32     	; 0x77e <floor+0x24>
 75e:	9f 37       	cpi	r25, 0x7F	; 127
 760:	40 f4       	brcc	.+16     	; 0x772 <floor+0x18>
 762:	91 11       	cpse	r25, r1
 764:	0e f0       	brts	.+2      	; 0x768 <floor+0xe>
 766:	bb c0       	rjmp	.+374    	; 0x8de <__fp_szero>
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	80 e8       	ldi	r24, 0x80	; 128
 76e:	9f eb       	ldi	r25, 0xBF	; 191
 770:	08 95       	ret
 772:	26 f4       	brtc	.+8      	; 0x77c <floor+0x22>
 774:	1b 16       	cp	r1, r27
 776:	61 1d       	adc	r22, r1
 778:	71 1d       	adc	r23, r1
 77a:	81 1d       	adc	r24, r1
 77c:	2b c0       	rjmp	.+86     	; 0x7d4 <__fp_mintl>
 77e:	45 c0       	rjmp	.+138    	; 0x80a <__fp_mpack>

00000780 <__fp_cmp>:
 780:	99 0f       	add	r25, r25
 782:	00 08       	sbc	r0, r0
 784:	55 0f       	add	r21, r21
 786:	aa 0b       	sbc	r26, r26
 788:	e0 e8       	ldi	r30, 0x80	; 128
 78a:	fe ef       	ldi	r31, 0xFE	; 254
 78c:	16 16       	cp	r1, r22
 78e:	17 06       	cpc	r1, r23
 790:	e8 07       	cpc	r30, r24
 792:	f9 07       	cpc	r31, r25
 794:	c0 f0       	brcs	.+48     	; 0x7c6 <__fp_cmp+0x46>
 796:	12 16       	cp	r1, r18
 798:	13 06       	cpc	r1, r19
 79a:	e4 07       	cpc	r30, r20
 79c:	f5 07       	cpc	r31, r21
 79e:	98 f0       	brcs	.+38     	; 0x7c6 <__fp_cmp+0x46>
 7a0:	62 1b       	sub	r22, r18
 7a2:	73 0b       	sbc	r23, r19
 7a4:	84 0b       	sbc	r24, r20
 7a6:	95 0b       	sbc	r25, r21
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <__fp_cmp+0x38>
 7aa:	0a 26       	eor	r0, r26
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <__fp_cmp+0x46>
 7ae:	23 2b       	or	r18, r19
 7b0:	24 2b       	or	r18, r20
 7b2:	25 2b       	or	r18, r21
 7b4:	21 f4       	brne	.+8      	; 0x7be <__fp_cmp+0x3e>
 7b6:	08 95       	ret
 7b8:	0a 26       	eor	r0, r26
 7ba:	09 f4       	brne	.+2      	; 0x7be <__fp_cmp+0x3e>
 7bc:	a1 40       	sbci	r26, 0x01	; 1
 7be:	a6 95       	lsr	r26
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	81 1d       	adc	r24, r1
 7c4:	81 1d       	adc	r24, r1
 7c6:	08 95       	ret

000007c8 <__fp_inf>:
 7c8:	97 f9       	bld	r25, 7
 7ca:	9f 67       	ori	r25, 0x7F	; 127
 7cc:	80 e8       	ldi	r24, 0x80	; 128
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	08 95       	ret

000007d4 <__fp_mintl>:
 7d4:	88 23       	and	r24, r24
 7d6:	71 f4       	brne	.+28     	; 0x7f4 <__fp_mintl+0x20>
 7d8:	77 23       	and	r23, r23
 7da:	21 f0       	breq	.+8      	; 0x7e4 <__fp_mintl+0x10>
 7dc:	98 50       	subi	r25, 0x08	; 8
 7de:	87 2b       	or	r24, r23
 7e0:	76 2f       	mov	r23, r22
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <__fp_mintl+0x1e>
 7e4:	66 23       	and	r22, r22
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_mintl+0x18>
 7e8:	99 27       	eor	r25, r25
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <__fp_mintl+0x32>
 7ec:	90 51       	subi	r25, 0x10	; 16
 7ee:	86 2b       	or	r24, r22
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	2a f0       	brmi	.+10     	; 0x800 <__fp_mintl+0x2c>
 7f6:	9a 95       	dec	r25
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	da f7       	brpl	.-10     	; 0x7f6 <__fp_mintl+0x22>
 800:	88 0f       	add	r24, r24
 802:	96 95       	lsr	r25
 804:	87 95       	ror	r24
 806:	97 f9       	bld	r25, 7
 808:	08 95       	ret

0000080a <__fp_mpack>:
 80a:	9f 3f       	cpi	r25, 0xFF	; 255
 80c:	31 f0       	breq	.+12     	; 0x81a <__fp_mpack_finite+0xc>

0000080e <__fp_mpack_finite>:
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	20 f4       	brcc	.+8      	; 0x81a <__fp_mpack_finite+0xc>
 812:	87 95       	ror	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__fp_nan>:
 826:	9f ef       	ldi	r25, 0xFF	; 255
 828:	80 ec       	ldi	r24, 0xC0	; 192
 82a:	08 95       	ret

0000082c <__fp_pscA>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	16 16       	cp	r1, r22
 832:	17 06       	cpc	r1, r23
 834:	18 06       	cpc	r1, r24
 836:	09 06       	cpc	r0, r25
 838:	08 95       	ret

0000083a <__fp_pscB>:
 83a:	00 24       	eor	r0, r0
 83c:	0a 94       	dec	r0
 83e:	12 16       	cp	r1, r18
 840:	13 06       	cpc	r1, r19
 842:	14 06       	cpc	r1, r20
 844:	05 06       	cpc	r0, r21
 846:	08 95       	ret

00000848 <__fp_round>:
 848:	09 2e       	mov	r0, r25
 84a:	03 94       	inc	r0
 84c:	00 0c       	add	r0, r0
 84e:	11 f4       	brne	.+4      	; 0x854 <__fp_round+0xc>
 850:	88 23       	and	r24, r24
 852:	52 f0       	brmi	.+20     	; 0x868 <__fp_round+0x20>
 854:	bb 0f       	add	r27, r27
 856:	40 f4       	brcc	.+16     	; 0x868 <__fp_round+0x20>
 858:	bf 2b       	or	r27, r31
 85a:	11 f4       	brne	.+4      	; 0x860 <__fp_round+0x18>
 85c:	60 ff       	sbrs	r22, 0
 85e:	04 c0       	rjmp	.+8      	; 0x868 <__fp_round+0x20>
 860:	6f 5f       	subi	r22, 0xFF	; 255
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	08 95       	ret

0000086a <__fp_split3>:
 86a:	57 fd       	sbrc	r21, 7
 86c:	90 58       	subi	r25, 0x80	; 128
 86e:	44 0f       	add	r20, r20
 870:	55 1f       	adc	r21, r21
 872:	59 f0       	breq	.+22     	; 0x88a <__fp_splitA+0x10>
 874:	5f 3f       	cpi	r21, 0xFF	; 255
 876:	71 f0       	breq	.+28     	; 0x894 <__fp_splitA+0x1a>
 878:	47 95       	ror	r20

0000087a <__fp_splitA>:
 87a:	88 0f       	add	r24, r24
 87c:	97 fb       	bst	r25, 7
 87e:	99 1f       	adc	r25, r25
 880:	61 f0       	breq	.+24     	; 0x89a <__fp_splitA+0x20>
 882:	9f 3f       	cpi	r25, 0xFF	; 255
 884:	79 f0       	breq	.+30     	; 0x8a4 <__fp_splitA+0x2a>
 886:	87 95       	ror	r24
 888:	08 95       	ret
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	55 1f       	adc	r21, r21
 892:	f2 cf       	rjmp	.-28     	; 0x878 <__fp_split3+0xe>
 894:	46 95       	lsr	r20
 896:	f1 df       	rcall	.-30     	; 0x87a <__fp_splitA>
 898:	08 c0       	rjmp	.+16     	; 0x8aa <__fp_splitA+0x30>
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	18 06       	cpc	r1, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	f1 cf       	rjmp	.-30     	; 0x886 <__fp_splitA+0xc>
 8a4:	86 95       	lsr	r24
 8a6:	71 05       	cpc	r23, r1
 8a8:	61 05       	cpc	r22, r1
 8aa:	08 94       	sec
 8ac:	08 95       	ret

000008ae <__fp_trunc>:
 8ae:	e5 df       	rcall	.-54     	; 0x87a <__fp_splitA>
 8b0:	a0 f0       	brcs	.+40     	; 0x8da <__fp_trunc+0x2c>
 8b2:	be e7       	ldi	r27, 0x7E	; 126
 8b4:	b9 17       	cp	r27, r25
 8b6:	88 f4       	brcc	.+34     	; 0x8da <__fp_trunc+0x2c>
 8b8:	bb 27       	eor	r27, r27
 8ba:	9f 38       	cpi	r25, 0x8F	; 143
 8bc:	60 f4       	brcc	.+24     	; 0x8d6 <__fp_trunc+0x28>
 8be:	16 16       	cp	r1, r22
 8c0:	b1 1d       	adc	r27, r1
 8c2:	67 2f       	mov	r22, r23
 8c4:	78 2f       	mov	r23, r24
 8c6:	88 27       	eor	r24, r24
 8c8:	98 5f       	subi	r25, 0xF8	; 248
 8ca:	f7 cf       	rjmp	.-18     	; 0x8ba <__fp_trunc+0xc>
 8cc:	86 95       	lsr	r24
 8ce:	77 95       	ror	r23
 8d0:	67 95       	ror	r22
 8d2:	b1 1d       	adc	r27, r1
 8d4:	93 95       	inc	r25
 8d6:	96 39       	cpi	r25, 0x96	; 150
 8d8:	c8 f3       	brcs	.-14     	; 0x8cc <__fp_trunc+0x1e>
 8da:	08 95       	ret

000008dc <__fp_zero>:
 8dc:	e8 94       	clt

000008de <__fp_szero>:
 8de:	bb 27       	eor	r27, r27
 8e0:	66 27       	eor	r22, r22
 8e2:	77 27       	eor	r23, r23
 8e4:	cb 01       	movw	r24, r22
 8e6:	97 f9       	bld	r25, 7
 8e8:	08 95       	ret

000008ea <__gesf2>:
 8ea:	4a df       	rcall	.-364    	; 0x780 <__fp_cmp>
 8ec:	08 f4       	brcc	.+2      	; 0x8f0 <__gesf2+0x6>
 8ee:	8f ef       	ldi	r24, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__mulsf3>:
 8f2:	0b d0       	rcall	.+22     	; 0x90a <__mulsf3x>
 8f4:	a9 cf       	rjmp	.-174    	; 0x848 <__fp_round>
 8f6:	9a df       	rcall	.-204    	; 0x82c <__fp_pscA>
 8f8:	28 f0       	brcs	.+10     	; 0x904 <__mulsf3+0x12>
 8fa:	9f df       	rcall	.-194    	; 0x83a <__fp_pscB>
 8fc:	18 f0       	brcs	.+6      	; 0x904 <__mulsf3+0x12>
 8fe:	95 23       	and	r25, r21
 900:	09 f0       	breq	.+2      	; 0x904 <__mulsf3+0x12>
 902:	62 cf       	rjmp	.-316    	; 0x7c8 <__fp_inf>
 904:	90 cf       	rjmp	.-224    	; 0x826 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	ea cf       	rjmp	.-44     	; 0x8de <__fp_szero>

0000090a <__mulsf3x>:
 90a:	af df       	rcall	.-162    	; 0x86a <__fp_split3>
 90c:	a0 f3       	brcs	.-24     	; 0x8f6 <__mulsf3+0x4>

0000090e <__mulsf3_pse>:
 90e:	95 9f       	mul	r25, r21
 910:	d1 f3       	breq	.-12     	; 0x906 <__mulsf3+0x14>
 912:	95 0f       	add	r25, r21
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	55 1f       	adc	r21, r21
 918:	62 9f       	mul	r22, r18
 91a:	f0 01       	movw	r30, r0
 91c:	72 9f       	mul	r23, r18
 91e:	bb 27       	eor	r27, r27
 920:	f0 0d       	add	r31, r0
 922:	b1 1d       	adc	r27, r1
 924:	63 9f       	mul	r22, r19
 926:	aa 27       	eor	r26, r26
 928:	f0 0d       	add	r31, r0
 92a:	b1 1d       	adc	r27, r1
 92c:	aa 1f       	adc	r26, r26
 92e:	64 9f       	mul	r22, r20
 930:	66 27       	eor	r22, r22
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	66 1f       	adc	r22, r22
 938:	82 9f       	mul	r24, r18
 93a:	22 27       	eor	r18, r18
 93c:	b0 0d       	add	r27, r0
 93e:	a1 1d       	adc	r26, r1
 940:	62 1f       	adc	r22, r18
 942:	73 9f       	mul	r23, r19
 944:	b0 0d       	add	r27, r0
 946:	a1 1d       	adc	r26, r1
 948:	62 1f       	adc	r22, r18
 94a:	83 9f       	mul	r24, r19
 94c:	a0 0d       	add	r26, r0
 94e:	61 1d       	adc	r22, r1
 950:	22 1f       	adc	r18, r18
 952:	74 9f       	mul	r23, r20
 954:	33 27       	eor	r19, r19
 956:	a0 0d       	add	r26, r0
 958:	61 1d       	adc	r22, r1
 95a:	23 1f       	adc	r18, r19
 95c:	84 9f       	mul	r24, r20
 95e:	60 0d       	add	r22, r0
 960:	21 1d       	adc	r18, r1
 962:	82 2f       	mov	r24, r18
 964:	76 2f       	mov	r23, r22
 966:	6a 2f       	mov	r22, r26
 968:	11 24       	eor	r1, r1
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	8a f0       	brmi	.+34     	; 0x992 <__mulsf3_pse+0x84>
 970:	e1 f0       	breq	.+56     	; 0x9aa <__mulsf3_pse+0x9c>
 972:	88 23       	and	r24, r24
 974:	4a f0       	brmi	.+18     	; 0x988 <__mulsf3_pse+0x7a>
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	bb 1f       	adc	r27, r27
 97c:	66 1f       	adc	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	a9 f7       	brne	.-22     	; 0x972 <__mulsf3_pse+0x64>
 988:	9e 3f       	cpi	r25, 0xFE	; 254
 98a:	51 05       	cpc	r21, r1
 98c:	70 f0       	brcs	.+28     	; 0x9aa <__mulsf3_pse+0x9c>
 98e:	1c cf       	rjmp	.-456    	; 0x7c8 <__fp_inf>
 990:	a6 cf       	rjmp	.-180    	; 0x8de <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	ec f3       	brlt	.-6      	; 0x990 <__mulsf3_pse+0x82>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	dc f3       	brlt	.-10     	; 0x990 <__mulsf3_pse+0x82>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	e7 95       	ror	r30
 9a6:	9f 5f       	subi	r25, 0xFF	; 255
 9a8:	c1 f7       	brne	.-16     	; 0x99a <__mulsf3_pse+0x8c>
 9aa:	fe 2b       	or	r31, r30
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <_exit>:
 9b8:	f8 94       	cli

000009ba <__stop_program>:
 9ba:	ff cf       	rjmp	.-2      	; 0x9ba <__stop_program>
