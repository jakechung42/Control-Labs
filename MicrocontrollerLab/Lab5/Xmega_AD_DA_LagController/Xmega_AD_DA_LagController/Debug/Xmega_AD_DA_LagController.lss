
Xmega_AD_DA_LagController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000010ce  00001162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00802006  00802006  00001168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000552d  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e57  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077e  00000000  00000000  0000a5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  0000ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d69  00000000  00000000  0000ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002be  00000000  00000000  0000ebc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ee83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_clear_bss>:
     218:	20 e2       	ldi	r18, 0x20	; 32
     21a:	a6 e0       	ldi	r26, 0x06	; 6
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
     220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
     222:	a0 35       	cpi	r26, 0x50	; 80
     224:	b2 07       	cpc	r27, r18
     226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>

00000228 <__do_copy_data>:
     228:	10 e2       	ldi	r17, 0x20	; 32
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ee ec       	ldi	r30, 0xCE	; 206
     230:	f0 e1       	ldi	r31, 0x10	; 16
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a6 30       	cpi	r26, 0x06	; 6
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59
     244:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <main>
     248:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:

}


static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);	//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTD1.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7de9b1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTD1.DATA = c;
     266:	c0 93 b0 09 	sts	0x09B0, r28	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7de9b0>
	return 0;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
}


// Control code to be run during interrupt subroutine
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	// Digitally generated Input wave form
	Sawtooth += Input_Increment;						// Input_Increment
     2ae:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <Input_Increment>
     2b2:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <Input_Increment+0x1>
     2b6:	40 91 24 20 	lds	r20, 0x2024	; 0x802024 <Input_Increment+0x2>
     2ba:	50 91 25 20 	lds	r21, 0x2025	; 0x802025 <Input_Increment+0x3>
     2be:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <Sawtooth>
     2c2:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <Sawtooth+0x1>
     2c6:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <Sawtooth+0x2>
     2ca:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <Sawtooth+0x3>
     2ce:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     2d2:	60 93 16 20 	sts	0x2016, r22	; 0x802016 <Sawtooth>
     2d6:	70 93 17 20 	sts	0x2017, r23	; 0x802017 <Sawtooth+0x1>
     2da:	80 93 18 20 	sts	0x2018, r24	; 0x802018 <Sawtooth+0x2>
     2de:	90 93 19 20 	sts	0x2019, r25	; 0x802019 <Sawtooth+0x3>
	if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e3       	ldi	r21, 0x3F	; 63
     2ea:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__gesf2>
     2ee:	88 23       	and	r24, r24
     2f0:	64 f0       	brlt	.+24     	; 0x30a <__vector_20+0x98>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e8       	ldi	r26, 0x80	; 128
     2f8:	bf eb       	ldi	r27, 0xBF	; 191
     2fa:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <Sawtooth>
     2fe:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <Sawtooth+0x1>
     302:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <Sawtooth+0x2>
     306:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <Sawtooth+0x3>
	if(Sawtooth <= 0.0) StepInput = 0;                  // Step Input Value     (0 to 1)             
     30a:	c0 90 16 20 	lds	r12, 0x2016	; 0x802016 <Sawtooth>
     30e:	d0 90 17 20 	lds	r13, 0x2017	; 0x802017 <Sawtooth+0x1>
     312:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <Sawtooth+0x2>
     316:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <Sawtooth+0x3>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	c7 01       	movw	r24, r14
     322:	b6 01       	movw	r22, r12
     324:	0e 94 b4 04 	call	0x968	; 0x968 <__cmpsf2>
     328:	18 16       	cp	r1, r24
     32a:	44 f0       	brlt	.+16     	; 0x33c <__vector_20+0xca>
     32c:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <StepInput>
     330:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <StepInput+0x1>
     334:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <StepInput+0x2>
     338:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <StepInput+0x3>
	if(Sawtooth > 0.0)  StepInput = 1;                  // Step Input Value		(0 to 1)
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	a9 01       	movw	r20, r18
     342:	c7 01       	movw	r24, r14
     344:	b6 01       	movw	r22, r12
     346:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__gesf2>
     34a:	18 16       	cp	r1, r24
     34c:	64 f4       	brge	.+24     	; 0x366 <__vector_20+0xf4>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	a0 e8       	ldi	r26, 0x80	; 128
     354:	bf e3       	ldi	r27, 0x3F	; 63
     356:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <StepInput>
     35a:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <StepInput+0x1>
     35e:	a0 93 20 20 	sts	0x2020, r26	; 0x802020 <StepInput+0x2>
     362:	b0 93 21 20 	sts	0x2021, r27	; 0x802021 <StepInput+0x3>
		
	// Vel_Set_v = Sawtooth*Sawtooth_Amplitude;             // Set Velocity Set Point to either Sawtooth or Step Input Value
	Vel_Set_v = StepInput*Step_Amplitude;                // Set Velocity Set Point to either Sawtooth or Step Input Value
     366:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <Step_Amplitude>
     36a:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <Step_Amplitude+0x1>
     36e:	40 91 28 20 	lds	r20, 0x2028	; 0x802028 <Step_Amplitude+0x2>
     372:	50 91 29 20 	lds	r21, 0x2029	; 0x802029 <Step_Amplitude+0x3>
     376:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <StepInput>
     37a:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <StepInput+0x1>
     37e:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <StepInput+0x2>
     382:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <StepInput+0x3>
     386:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     38a:	60 93 2e 20 	sts	0x202E, r22	; 0x80202e <Vel_Set_v>
     38e:	70 93 2f 20 	sts	0x202F, r23	; 0x80202f <Vel_Set_v+0x1>
     392:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <Vel_Set_v+0x2>
     396:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <Vel_Set_v+0x3>
		                                                     // Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)

	//	Read tachometer sensor value
	PORTC_OUT ^= (1 << 0);								// Toggle P0 on port C to check timing
     39a:	e4 e4       	ldi	r30, 0x44	; 68
     39c:	f6 e0       	ldi	r31, 0x06	; 6
     39e:	90 81       	ld	r25, Z
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	89 27       	eor	r24, r25
     3a4:	80 83       	st	Z, r24
	ADCA.CTRLA = ADCA.CTRLA | ADC_CH0START_bm;       			// Start Conversion
     3a6:	e0 e0       	ldi	r30, 0x00	; 0
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	80 81       	ld	r24, Z
     3ac:	84 60       	ori	r24, 0x04	; 4
     3ae:	80 83       	st	Z, r24
	while(((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) == 0x00));   	// Is the conversion is complete ?
     3b0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x7de223>
     3b4:	80 ff       	sbrs	r24, 0
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <__vector_20+0x13e>
	
	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;					   		// Clear interrupt flag by writing a one
     3b8:	e0 e0       	ldi	r30, 0x00	; 0
     3ba:	f2 e0       	ldi	r31, 0x02	; 2
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	83 a3       	std	Z+35, r24	; 0x23
	AD_value = ADCA.CH0.RES;									// Read AD Value
     3c0:	84 a1       	ldd	r24, Z+36	; 0x24
     3c2:	95 a1       	ldd	r25, Z+37	; 0x25
     3c4:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <AD_value>
     3c8:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <AD_value+0x1>
	
	Tach_val_V = (float) AD_value*(16.0/4095.0)-8.0;		// Convert the AD bit to Tach voltage
     3cc:	60 91 1c 20 	lds	r22, 0x201C	; 0x80201c <AD_value>
     3d0:	70 91 1d 20 	lds	r23, 0x201D	; 0x80201d <AD_value+0x1>
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__floatunsisf>
     3dc:	21 e0       	ldi	r18, 0x01	; 1
     3de:	38 e0       	ldi	r19, 0x08	; 8
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5b e3       	ldi	r21, 0x3B	; 59
     3e4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	51 e4       	ldi	r21, 0x41	; 65
     3f0:	0e 94 47 04 	call	0x88e	; 0x88e <__subsf3>
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	60 93 06 20 	sts	0x2006, r22	; 0x802006 <__data_end>
     3fc:	70 93 07 20 	sts	0x2007, r23	; 0x802007 <__data_end+0x1>
     400:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <__data_end+0x2>
     404:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <__data_end+0x3>
															// Tach voltage is between +/- 8

	//Calculate the control parameters
	Error = (Vel_Set_v - Tach_val_V);
     408:	60 91 2e 20 	lds	r22, 0x202E	; 0x80202e <Vel_Set_v>
     40c:	70 91 2f 20 	lds	r23, 0x202F	; 0x80202f <Vel_Set_v+0x1>
     410:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <Vel_Set_v+0x2>
     414:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <Vel_Set_v+0x3>
     418:	0e 94 47 04 	call	0x88e	; 0x88e <__subsf3>
     41c:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <Error>
     420:	70 93 3b 20 	sts	0x203B, r23	; 0x80203b <Error+0x1>
     424:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <Error+0x2>
     428:	90 93 3d 20 	sts	0x203D, r25	; 0x80203d <Error+0x3>

	// Get ready! Here comes the Lag Control Equation!!!!!!
    Control = (425.6*Error + 2.0*Error_m1 - 2.0*Control_m1 - 423.6*Error_m2 + 750.6*Control_m2)/752.6;
     42c:	60 91 3a 20 	lds	r22, 0x203A	; 0x80203a <Error>
     430:	70 91 3b 20 	lds	r23, 0x203B	; 0x80203b <Error+0x1>
     434:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <Error+0x2>
     438:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <Error+0x3>
     43c:	2d ec       	ldi	r18, 0xCD	; 205
     43e:	3c ec       	ldi	r19, 0xCC	; 204
     440:	44 ed       	ldi	r20, 0xD4	; 212
     442:	53 e4       	ldi	r21, 0x43	; 67
     444:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24
     44c:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <Error_m1>
     450:	70 91 37 20 	lds	r23, 0x2037	; 0x802037 <Error_m1+0x1>
     454:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <Error_m1+0x2>
     458:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <Error_m1+0x3>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     470:	6b 01       	movw	r12, r22
     472:	7c 01       	movw	r14, r24
     474:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <Control_m1>
     478:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <Control_m1+0x1>
     47c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <Control_m1+0x2>
     480:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <Control_m1+0x3>
     484:	9b 01       	movw	r18, r22
     486:	ac 01       	movw	r20, r24
     488:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c7 01       	movw	r24, r14
     492:	b6 01       	movw	r22, r12
     494:	0e 94 47 04 	call	0x88e	; 0x88e <__subsf3>
     498:	6b 01       	movw	r12, r22
     49a:	7c 01       	movw	r14, r24
     49c:	60 91 42 20 	lds	r22, 0x2042	; 0x802042 <Error_m2>
     4a0:	70 91 43 20 	lds	r23, 0x2043	; 0x802043 <Error_m2+0x1>
     4a4:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <Error_m2+0x2>
     4a8:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <Error_m2+0x3>
     4ac:	2d ec       	ldi	r18, 0xCD	; 205
     4ae:	3c ec       	ldi	r19, 0xCC	; 204
     4b0:	43 ed       	ldi	r20, 0xD3	; 211
     4b2:	53 e4       	ldi	r21, 0x43	; 67
     4b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     4b8:	9b 01       	movw	r18, r22
     4ba:	ac 01       	movw	r20, r24
     4bc:	c7 01       	movw	r24, r14
     4be:	b6 01       	movw	r22, r12
     4c0:	0e 94 47 04 	call	0x88e	; 0x88e <__subsf3>
     4c4:	6b 01       	movw	r12, r22
     4c6:	7c 01       	movw	r14, r24
     4c8:	60 91 2a 20 	lds	r22, 0x202A	; 0x80202a <Control_m2>
     4cc:	70 91 2b 20 	lds	r23, 0x202B	; 0x80202b <Control_m2+0x1>
     4d0:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <Control_m2+0x2>
     4d4:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <Control_m2+0x3>
     4d8:	26 e6       	ldi	r18, 0x66	; 102
     4da:	36 ea       	ldi	r19, 0xA6	; 166
     4dc:	4b e3       	ldi	r20, 0x3B	; 59
     4de:	54 e4       	ldi	r21, 0x44	; 68
     4e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	c7 01       	movw	r24, r14
     4ea:	b6 01       	movw	r22, r12
     4ec:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     4f0:	26 e6       	ldi	r18, 0x66	; 102
     4f2:	36 e2       	ldi	r19, 0x26	; 38
     4f4:	4c e3       	ldi	r20, 0x3C	; 60
     4f6:	54 e4       	ldi	r21, 0x44	; 68
     4f8:	0e 94 b9 04 	call	0x972	; 0x972 <__divsf3>
     4fc:	60 93 0e 20 	sts	0x200E, r22	; 0x80200e <Control>
     500:	70 93 0f 20 	sts	0x200F, r23	; 0x80200f <Control+0x1>
     504:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <Control+0x2>
     508:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <Control+0x3>
	// Control = Kp*Error;

    Error_m1 = Error;
     50c:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <Error>
     510:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <Error+0x1>
     514:	a0 91 3c 20 	lds	r26, 0x203C	; 0x80203c <Error+0x2>
     518:	b0 91 3d 20 	lds	r27, 0x203D	; 0x80203d <Error+0x3>
     51c:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <Error_m1>
     520:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <Error_m1+0x1>
     524:	a0 93 38 20 	sts	0x2038, r26	; 0x802038 <Error_m1+0x2>
     528:	b0 93 39 20 	sts	0x2039, r27	; 0x802039 <Error_m1+0x3>
    Error_m2 = Error_m1;
     52c:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <Error_m1>
     530:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <Error_m1+0x1>
     534:	a0 91 38 20 	lds	r26, 0x2038	; 0x802038 <Error_m1+0x2>
     538:	b0 91 39 20 	lds	r27, 0x2039	; 0x802039 <Error_m1+0x3>
     53c:	80 93 42 20 	sts	0x2042, r24	; 0x802042 <Error_m2>
     540:	90 93 43 20 	sts	0x2043, r25	; 0x802043 <Error_m2+0x1>
     544:	a0 93 44 20 	sts	0x2044, r26	; 0x802044 <Error_m2+0x2>
     548:	b0 93 45 20 	sts	0x2045, r27	; 0x802045 <Error_m2+0x3>

    Control_m1 = Control;
     54c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <Control>
     550:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <Control+0x1>
     554:	a0 91 10 20 	lds	r26, 0x2010	; 0x802010 <Control+0x2>
     558:	b0 91 11 20 	lds	r27, 0x2011	; 0x802011 <Control+0x3>
     55c:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <Control_m1>
     560:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <Control_m1+0x1>
     564:	a0 93 14 20 	sts	0x2014, r26	; 0x802014 <Control_m1+0x2>
     568:	b0 93 15 20 	sts	0x2015, r27	; 0x802015 <Control_m1+0x3>
    Control_m2 = Control_m1;
     56c:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <Control_m1>
     570:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <Control_m1+0x1>
     574:	a0 91 14 20 	lds	r26, 0x2014	; 0x802014 <Control_m1+0x2>
     578:	b0 91 15 20 	lds	r27, 0x2015	; 0x802015 <Control_m1+0x3>
     57c:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <Control_m2>
     580:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <Control_m2+0x1>
     584:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <Control_m2+0x2>
     588:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <Control_m2+0x3>

	if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
     58c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <Control>
     590:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <Control+0x1>
     594:	a0 91 10 20 	lds	r26, 0x2010	; 0x802010 <Control+0x2>
     598:	b0 91 11 20 	lds	r27, 0x2011	; 0x802011 <Control+0x3>
     59c:	bc 01       	movw	r22, r24
     59e:	cd 01       	movw	r24, r26
     5a0:	9f 77       	andi	r25, 0x7F	; 127
     5a2:	c0 90 32 20 	lds	r12, 0x2032	; 0x802032 <Max_Voltage>
     5a6:	d0 90 33 20 	lds	r13, 0x2033	; 0x802033 <Max_Voltage+0x1>
     5aa:	e0 90 34 20 	lds	r14, 0x2034	; 0x802034 <Max_Voltage+0x2>
     5ae:	f0 90 35 20 	lds	r15, 0x2035	; 0x802035 <Max_Voltage+0x3>
     5b2:	a7 01       	movw	r20, r14
     5b4:	96 01       	movw	r18, r12
     5b6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__gesf2>
     5ba:	88 23       	and	r24, r24
     5bc:	94 f0       	brlt	.+36     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
	Control = copysign(Max_Voltage, Control);
     5be:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <Control>
     5c2:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <Control+0x1>
     5c6:	a0 91 10 20 	lds	r26, 0x2010	; 0x802010 <Control+0x2>
     5ca:	b0 91 11 20 	lds	r27, 0x2011	; 0x802011 <Control+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     5ce:	b7 fb       	bst	r27, 7
     5d0:	f7 f8       	bld	r15, 7
     5d2:	c0 92 0e 20 	sts	0x200E, r12	; 0x80200e <Control>
     5d6:	d0 92 0f 20 	sts	0x200F, r13	; 0x80200f <Control+0x1>
     5da:	e0 92 10 20 	sts	0x2010, r14	; 0x802010 <Control+0x2>
     5de:	f0 92 11 20 	sts	0x2011, r15	; 0x802011 <Control+0x3>

	DAC_output = floor((Control + 11.)*4095./20.); 
     5e2:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <Control>
     5e6:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <Control+0x1>
     5ea:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <Control+0x2>
     5ee:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <Control+0x3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e3       	ldi	r20, 0x30	; 48
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	0e 94 48 04 	call	0x890	; 0x890 <__addsf3>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 ef       	ldi	r19, 0xF0	; 240
     602:	4f e7       	ldi	r20, 0x7F	; 127
     604:	55 e4       	ldi	r21, 0x45	; 69
     606:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__mulsf3>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 ea       	ldi	r20, 0xA0	; 160
     610:	51 e4       	ldi	r21, 0x41	; 65
     612:	0e 94 b9 04 	call	0x972	; 0x972 <__divsf3>
     616:	0e 94 97 05 	call	0xb2e	; 0xb2e <floor>
     61a:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     61e:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <DAC_output>
     622:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <DAC_output+0x1>
	//	DA
	while ( (DACB.STATUS & DAC_CH0DRE_bm) == false );  // Wait for the DA register to be empty
     626:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     62a:	80 ff       	sbrs	r24, 0
     62c:	fc cf       	rjmp	.-8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
	DACB.CH0DATA = DAC_output;                           // write the DAC Value
     62e:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <DAC_output>
     632:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <DAC_output+0x1>
     636:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     63a:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
														// is one half of the actual cycle frequency
														// because the cycle frequency is the time the signal
														// is on or off not the entire cycle
	
	// printf("Vel set v = %d\n", Vel_Set_v*1000);
}
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	bf 91       	pop	r27
     644:	af 91       	pop	r26
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	7f 91       	pop	r23
     64c:	6f 91       	pop	r22
     64e:	5f 91       	pop	r21
     650:	4f 91       	pop	r20
     652:	3f 91       	pop	r19
     654:	2f 91       	pop	r18
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	0f 90       	pop	r0
     660:	0b be       	out	0x3b, r0	; 59
     662:	0f 90       	pop	r0
     664:	09 be       	out	0x39, r0	; 57
     666:	0f 90       	pop	r0
     668:	08 be       	out	0x38, r0	; 56
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     674:	aa ec       	ldi	r26, 0xCA	; 202
     676:	b1 e0       	ldi	r27, 0x01	; 1
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     67c:	e8 2f       	mov	r30, r24
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     682:	1c 92       	st	X, r1

	return result;
}
     684:	08 95       	ret

00000686 <DAC_CalibrationValues_Set>:
	
}


void DAC_CalibrationValues_Set(DAC_t * dac)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     68c:	c1 15       	cp	r28, r1
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	d8 07       	cpc	r29, r24
     692:	89 f4       	brne	.+34     	; 0x6b6 <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     694:	80 e3       	ldi	r24, 0x30	; 48
     696:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     69a:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     69c:	81 e3       	ldi	r24, 0x31	; 49
     69e:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6a2:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     6a4:	84 e3       	ldi	r24, 0x34	; 52
     6a6:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6aa:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     6ac:	85 e3       	ldi	r24, 0x35	; 53
     6ae:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6b2:	8a 87       	std	Y+10, r24	; 0x0a
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     6b6:	82 e3       	ldi	r24, 0x32	; 50
     6b8:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6bc:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     6be:	83 e3       	ldi	r24, 0x33	; 51
     6c0:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6c4:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     6c6:	86 e3       	ldi	r24, 0x36	; 54
     6c8:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6cc:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     6ce:	87 e3       	ldi	r24, 0x37	; 55
     6d0:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6d4:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <ADC_CalibrationValues_Set>:


void ADC_CalibrationValues_Set(ADC_t * adc)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     6e2:	c1 15       	cp	r28, r1
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	d8 07       	cpc	r29, r24
     6e8:	39 f4       	brne	.+14     	; 0x6f8 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	8c 87       	std	Y+12, r24	; 0x0c
     6f4:	9d 87       	std	Y+13, r25	; 0x0d
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     6f8:	84 e2       	ldi	r24, 0x24	; 36
     6fa:	0e 94 3a 03 	call	0x674	; 0x674 <SP_ReadCalibrationByte>
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	8c 87       	std	Y+12, r24	; 0x0c
     702:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <ioinit>:
}

void ioinit (void)
{

	PORTB_DIRSET = 0b00001100;  // DACB DAC0 and DACB DAC1 Set as Output
     70a:	8c e0       	ldi	r24, 0x0C	; 12
     70c:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x7de621>
	PORTC_DIRSET = 0b00000001;  // PORT C P0 Set as Output for timing pin toggle
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7de641>
	
	// Set 32MHz clock
	OSC.CTRL = OSC_RC32MEN_bm; 				//enable 32MHz oscillator
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));	//wait for stability
     71c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     720:	81 ff       	sbrs	r24, 1
     722:	fc cf       	rjmp	.-8      	; 0x71c <ioinit+0x12>
	CCP = CCP_IOREG_gc; 					//secured access
     724:	88 ed       	ldi	r24, 0xD8	; 216
     726:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 						//choose this osc source as clk
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

	// AD

	// Move stored calibration values to ADC A.
	ADC_CalibrationValues_Set(&ADCA);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ADC_CalibrationValues_Set>

	// Set up ADC A to have signed (true) or Unsigned (false) conversion mode and 12 bit resolution.
	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_12BIT_gc);
     736:	e0 e0       	ldi	r30, 0x00	; 0
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	89 7e       	andi	r24, 0xE9	; 233
     73e:	81 83       	std	Z+1, r24	; 0x01

	// Set reference voltage on ADC A to be Internal 1 volt
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
     740:	82 81       	ldd	r24, Z+2	; 0x02
     742:	8f 78       	andi	r24, 0x8F	; 143
     744:	82 83       	std	Z+2, r24	; 0x02

	// Sample rate is CPUFREQ/256. Allow time for storing data.
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV16_gc);
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	88 7f       	andi	r24, 0xF8	; 248
     74a:	82 60       	ori	r24, 0x02	; 2
     74c:	84 83       	std	Z+4, r24	; 0x04

	// Setup channel 2  to have single ended input.
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     74e:	a0 e2       	ldi	r26, 0x20	; 32
     750:	b2 e0       	ldi	r27, 0x02	; 2
     752:	8c 91       	ld	r24, X
     754:	80 7e       	andi	r24, 0xE0	; 224
     756:	81 60       	ori	r24, 0x01	; 1
     758:	8c 93       	st	X, r24
	ADC_CH_INPUTMODE_SINGLEENDED_gc,
	ADC_CH_GAIN_1X_gc);

	// Set input to the channels in ADC A to be PIN 3
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN3_gc, ADC_CH_MUXNEG_PIN2_gc);
     75a:	8a e1       	ldi	r24, 0x1A	; 26
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	8c 93       	st	X, r24

	// Enable Enable AD Conversion in ADC A
	ADC_Enable(&ADCA);
     760:	80 81       	ld	r24, Z
     762:	81 60       	ori	r24, 0x01	; 1
     764:	80 83       	st	Z, r24

	// DA

	// Setup DAC channel B with the DA reference set to the Internal 1 volt supply voltage and DA data left adjust false
	
		DAC_CalibrationValues_Set(&DACB);
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 43 03 	call	0x686	; 0x686 <DAC_CalibrationValues_Set>
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
     76e:	e0 e2       	ldi	r30, 0x20	; 32
     770:	f3 e0       	ldi	r31, 0x03	; 3
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	81 83       	std	Z+1, r24	; 0x01
//		DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. 
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;	// 3.3 volt internal reference.		DACB.CH0DATAH = 0x00;
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	88 60       	ori	r24, 0x08	; 8
     77a:	82 83       	std	Z+2, r24	; 0x02
		DACB.CH1DATAH = 0x00;
     77c:	13 8e       	std	Z+27, r1	; 0x1b
		DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     77e:	80 81       	ld	r24, Z
     780:	8d 60       	ori	r24, 0x0D	; 13
     782:	80 83       	st	Z, r24
     784:	08 95       	ret

00000786 <timer_init>:
	return result;
}


void timer_init(uint16_t topCount)
{
     786:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     788:	e0 e4       	ldi	r30, 0x40	; 64
     78a:	f8 e0       	ldi	r31, 0x08	; 8
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     790:	96 81       	ldd	r25, Z+6	; 0x06
     792:	91 60       	ori	r25, 0x01	; 1
     794:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     796:	26 a3       	std	Z+38, r18	; 0x26
     798:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     79a:	80 81       	ld	r24, Z
     79c:	83 60       	ori	r24, 0x03	; 3
     79e:	80 83       	st	Z, r24
     7a0:	08 95       	ret

000007a2 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTD.DIRSET = (1<<7);
     7a2:	e0 e6       	ldi	r30, 0x60	; 96
     7a4:	f6 e0       	ldi	r31, 0x06	; 6
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = (1<<6);
     7aa:	80 e4       	ldi	r24, 0x40	; 64
     7ac:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTD1.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     7ae:	e0 eb       	ldi	r30, 0xB0	; 176
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	85 81       	ldd	r24, Z+5	; 0x05
     7b4:	83 60       	ori	r24, 0x03	; 3
     7b6:	85 83       	std	Z+5, r24	; 0x05
	USARTD1.BAUDCTRLA = (uint8_t)BSEL;
     7b8:	8b e4       	ldi	r24, 0x4B	; 75
     7ba:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     7bc:	80 ea       	ldi	r24, 0xA0	; 160
     7be:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTD1.CTRLB |= USART_TXEN_bm;
     7c0:	84 81       	ldd	r24, Z+4	; 0x04
     7c2:	88 60       	ori	r24, 0x08	; 8
     7c4:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	88 e2       	ldi	r24, 0x28	; 40
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 d6 06 	call	0xdac	; 0xdac <fdevopen>
     7d2:	08 95       	ret

000007d4 <main>:
// main set up
int main (void)
{
	unsigned int topCount;
	float Ts;
	Max_Voltage = 6.0;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 ec       	ldi	r26, 0xC0	; 192
     7da:	b0 e4       	ldi	r27, 0x40	; 64
     7dc:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <Max_Voltage>
     7e0:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <Max_Voltage+0x1>
     7e4:	a0 93 34 20 	sts	0x2034, r26	; 0x802034 <Max_Voltage+0x2>
     7e8:	b0 93 35 20 	sts	0x2035, r27	; 0x802035 <Max_Voltage+0x3>
	Vel_Set_v = -3.0;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e4       	ldi	r26, 0x40	; 64
     7f2:	b0 ec       	ldi	r27, 0xC0	; 192
     7f4:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <Vel_Set_v>
     7f8:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <Vel_Set_v+0x1>
     7fc:	a0 93 30 20 	sts	0x2030, r26	; 0x802030 <Vel_Set_v+0x2>
     800:	b0 93 31 20 	sts	0x2031, r27	; 0x802031 <Vel_Set_v+0x3>
	Kp = 1.0;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e8       	ldi	r26, 0x80	; 128
     80a:	bf e3       	ldi	r27, 0x3F	; 63
     80c:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <Kp>
     810:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <Kp+0x1>
     814:	a0 93 40 20 	sts	0x2040, r26	; 0x802040 <Kp+0x2>
     818:	b0 93 41 20 	sts	0x2041, r27	; 0x802041 <Kp+0x3>
	//float InputTime, DeltaInputTime, SinInput, del_theta, theta, pi, DAC_output, SinAmplitude, StepAmplitude;
	//float InputData[100];
	//int ii, NumInputPoints;
	
	ioinit();       //Setup IO pins and defaults
     81c:	0e 94 85 03 	call	0x70a	; 0x70a <ioinit>
	usart_init();  // Initialize the serial port
     820:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <usart_init>

    Ts = 0.001; //Start with 1k Hz for now seeing if the code works 
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1

	timer_init(topCount);
     824:	80 e4       	ldi	r24, 0x40	; 64
     826:	9f e1       	ldi	r25, 0x1F	; 31
     828:	0e 94 c3 03 	call	0x786	; 0x786 <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     832:	78 94       	sei
		
	// Note if you have print statements active this will slow the control loop dramatically
		
	// Sawtooth and Step Input are in Control Voltage Units (+- 10 volts)
		
    Sawtooth           = -1.0;			// Initial value
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a0 e8       	ldi	r26, 0x80	; 128
     83a:	bf eb       	ldi	r27, 0xBF	; 191
     83c:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <Sawtooth>
     840:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <Sawtooth+0x1>
     844:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <Sawtooth+0x2>
     848:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <Sawtooth+0x3>
	Sawtooth_Amplitude = 5.0;
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	a0 ea       	ldi	r26, 0xA0	; 160
     852:	b0 e4       	ldi	r27, 0x40	; 64
     854:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <Sawtooth_Amplitude>
     858:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <Sawtooth_Amplitude+0x1>
     85c:	a0 93 0c 20 	sts	0x200C, r26	; 0x80200c <Sawtooth_Amplitude+0x2>
     860:	b0 93 0d 20 	sts	0x200D, r27	; 0x80200d <Sawtooth_Amplitude+0x3>
	Step_Amplitude     = 5.0;
     864:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <Step_Amplitude>
     868:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <Step_Amplitude+0x1>
     86c:	a0 93 28 20 	sts	0x2028, r26	; 0x802028 <Step_Amplitude+0x2>
     870:	b0 93 29 20 	sts	0x2029, r27	; 0x802029 <Step_Amplitude+0x3>
	Input_Increment = .001;		    // This variable is used to specify the desired frequency
     874:	8f e6       	ldi	r24, 0x6F	; 111
     876:	92 e1       	ldi	r25, 0x12	; 18
     878:	a3 e8       	ldi	r26, 0x83	; 131
     87a:	ba e3       	ldi	r27, 0x3A	; 58
     87c:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <Input_Increment>
     880:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <Input_Increment+0x1>
     884:	a0 93 24 20 	sts	0x2024, r26	; 0x802024 <Input_Increment+0x2>
     888:	b0 93 25 20 	sts	0x2025, r27	; 0x802025 <Input_Increment+0x3>
     88c:	ff cf       	rjmp	.-2      	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>

0000088e <__subsf3>:
     88e:	50 58       	subi	r21, 0x80	; 128

00000890 <__addsf3>:
     890:	bb 27       	eor	r27, r27
     892:	aa 27       	eor	r26, r26
     894:	0e 94 5f 04 	call	0x8be	; 0x8be <__addsf3x>
     898:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
     89c:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
     8a0:	38 f0       	brcs	.+14     	; 0x8b0 <__addsf3+0x20>
     8a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
     8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__addsf3+0x20>
     8a8:	39 f4       	brne	.+14     	; 0x8b8 <__addsf3+0x28>
     8aa:	9f 3f       	cpi	r25, 0xFF	; 255
     8ac:	19 f4       	brne	.+6      	; 0x8b4 <__addsf3+0x24>
     8ae:	26 f4       	brtc	.+8      	; 0x8b8 <__addsf3+0x28>
     8b0:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>
     8b4:	0e f4       	brtc	.+2      	; 0x8b8 <__addsf3+0x28>
     8b6:	e0 95       	com	r30
     8b8:	e7 fb       	bst	r30, 7
     8ba:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_inf>

000008be <__addsf3x>:
     8be:	e9 2f       	mov	r30, r25
     8c0:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_split3>
     8c4:	58 f3       	brcs	.-42     	; 0x89c <__addsf3+0xc>
     8c6:	ba 17       	cp	r27, r26
     8c8:	62 07       	cpc	r22, r18
     8ca:	73 07       	cpc	r23, r19
     8cc:	84 07       	cpc	r24, r20
     8ce:	95 07       	cpc	r25, r21
     8d0:	20 f0       	brcs	.+8      	; 0x8da <__addsf3x+0x1c>
     8d2:	79 f4       	brne	.+30     	; 0x8f2 <__addsf3x+0x34>
     8d4:	a6 f5       	brtc	.+104    	; 0x93e <__addsf3x+0x80>
     8d6:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_zero>
     8da:	0e f4       	brtc	.+2      	; 0x8de <__addsf3x+0x20>
     8dc:	e0 95       	com	r30
     8de:	0b 2e       	mov	r0, r27
     8e0:	ba 2f       	mov	r27, r26
     8e2:	a0 2d       	mov	r26, r0
     8e4:	0b 01       	movw	r0, r22
     8e6:	b9 01       	movw	r22, r18
     8e8:	90 01       	movw	r18, r0
     8ea:	0c 01       	movw	r0, r24
     8ec:	ca 01       	movw	r24, r20
     8ee:	a0 01       	movw	r20, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	ff 27       	eor	r31, r31
     8f4:	59 1b       	sub	r21, r25
     8f6:	99 f0       	breq	.+38     	; 0x91e <__addsf3x+0x60>
     8f8:	59 3f       	cpi	r21, 0xF9	; 249
     8fa:	50 f4       	brcc	.+20     	; 0x910 <__addsf3x+0x52>
     8fc:	50 3e       	cpi	r21, 0xE0	; 224
     8fe:	68 f1       	brcs	.+90     	; 0x95a <__addsf3x+0x9c>
     900:	1a 16       	cp	r1, r26
     902:	f0 40       	sbci	r31, 0x00	; 0
     904:	a2 2f       	mov	r26, r18
     906:	23 2f       	mov	r18, r19
     908:	34 2f       	mov	r19, r20
     90a:	44 27       	eor	r20, r20
     90c:	58 5f       	subi	r21, 0xF8	; 248
     90e:	f3 cf       	rjmp	.-26     	; 0x8f6 <__addsf3x+0x38>
     910:	46 95       	lsr	r20
     912:	37 95       	ror	r19
     914:	27 95       	ror	r18
     916:	a7 95       	ror	r26
     918:	f0 40       	sbci	r31, 0x00	; 0
     91a:	53 95       	inc	r21
     91c:	c9 f7       	brne	.-14     	; 0x910 <__addsf3x+0x52>
     91e:	7e f4       	brtc	.+30     	; 0x93e <__addsf3x+0x80>
     920:	1f 16       	cp	r1, r31
     922:	ba 0b       	sbc	r27, r26
     924:	62 0b       	sbc	r22, r18
     926:	73 0b       	sbc	r23, r19
     928:	84 0b       	sbc	r24, r20
     92a:	ba f0       	brmi	.+46     	; 0x95a <__addsf3x+0x9c>
     92c:	91 50       	subi	r25, 0x01	; 1
     92e:	a1 f0       	breq	.+40     	; 0x958 <__addsf3x+0x9a>
     930:	ff 0f       	add	r31, r31
     932:	bb 1f       	adc	r27, r27
     934:	66 1f       	adc	r22, r22
     936:	77 1f       	adc	r23, r23
     938:	88 1f       	adc	r24, r24
     93a:	c2 f7       	brpl	.-16     	; 0x92c <__addsf3x+0x6e>
     93c:	0e c0       	rjmp	.+28     	; 0x95a <__addsf3x+0x9c>
     93e:	ba 0f       	add	r27, r26
     940:	62 1f       	adc	r22, r18
     942:	73 1f       	adc	r23, r19
     944:	84 1f       	adc	r24, r20
     946:	48 f4       	brcc	.+18     	; 0x95a <__addsf3x+0x9c>
     948:	87 95       	ror	r24
     94a:	77 95       	ror	r23
     94c:	67 95       	ror	r22
     94e:	b7 95       	ror	r27
     950:	f7 95       	ror	r31
     952:	9e 3f       	cpi	r25, 0xFE	; 254
     954:	08 f0       	brcs	.+2      	; 0x958 <__addsf3x+0x9a>
     956:	b0 cf       	rjmp	.-160    	; 0x8b8 <__addsf3+0x28>
     958:	93 95       	inc	r25
     95a:	88 0f       	add	r24, r24
     95c:	08 f0       	brcs	.+2      	; 0x960 <__addsf3x+0xa2>
     95e:	99 27       	eor	r25, r25
     960:	ee 0f       	add	r30, r30
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	08 95       	ret

00000968 <__cmpsf2>:
     968:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_cmp>
     96c:	08 f4       	brcc	.+2      	; 0x970 <__cmpsf2+0x8>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	08 95       	ret

00000972 <__divsf3>:
     972:	0e 94 cd 04 	call	0x99a	; 0x99a <__divsf3x>
     976:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
     97a:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
     97e:	58 f0       	brcs	.+22     	; 0x996 <__divsf3+0x24>
     980:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
     984:	40 f0       	brcs	.+16     	; 0x996 <__divsf3+0x24>
     986:	29 f4       	brne	.+10     	; 0x992 <__divsf3+0x20>
     988:	5f 3f       	cpi	r21, 0xFF	; 255
     98a:	29 f0       	breq	.+10     	; 0x996 <__divsf3+0x24>
     98c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_inf>
     990:	51 11       	cpse	r21, r1
     992:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     996:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>

0000099a <__divsf3x>:
     99a:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_split3>
     99e:	68 f3       	brcs	.-38     	; 0x97a <__divsf3+0x8>

000009a0 <__divsf3_pse>:
     9a0:	99 23       	and	r25, r25
     9a2:	b1 f3       	breq	.-20     	; 0x990 <__divsf3+0x1e>
     9a4:	55 23       	and	r21, r21
     9a6:	91 f3       	breq	.-28     	; 0x98c <__divsf3+0x1a>
     9a8:	95 1b       	sub	r25, r21
     9aa:	55 0b       	sbc	r21, r21
     9ac:	bb 27       	eor	r27, r27
     9ae:	aa 27       	eor	r26, r26
     9b0:	62 17       	cp	r22, r18
     9b2:	73 07       	cpc	r23, r19
     9b4:	84 07       	cpc	r24, r20
     9b6:	38 f0       	brcs	.+14     	; 0x9c6 <__divsf3_pse+0x26>
     9b8:	9f 5f       	subi	r25, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	22 0f       	add	r18, r18
     9be:	33 1f       	adc	r19, r19
     9c0:	44 1f       	adc	r20, r20
     9c2:	aa 1f       	adc	r26, r26
     9c4:	a9 f3       	breq	.-22     	; 0x9b0 <__divsf3_pse+0x10>
     9c6:	35 d0       	rcall	.+106    	; 0xa32 <__divsf3_pse+0x92>
     9c8:	0e 2e       	mov	r0, r30
     9ca:	3a f0       	brmi	.+14     	; 0x9da <__divsf3_pse+0x3a>
     9cc:	e0 e8       	ldi	r30, 0x80	; 128
     9ce:	32 d0       	rcall	.+100    	; 0xa34 <__divsf3_pse+0x94>
     9d0:	91 50       	subi	r25, 0x01	; 1
     9d2:	50 40       	sbci	r21, 0x00	; 0
     9d4:	e6 95       	lsr	r30
     9d6:	00 1c       	adc	r0, r0
     9d8:	ca f7       	brpl	.-14     	; 0x9cc <__divsf3_pse+0x2c>
     9da:	2b d0       	rcall	.+86     	; 0xa32 <__divsf3_pse+0x92>
     9dc:	fe 2f       	mov	r31, r30
     9de:	29 d0       	rcall	.+82     	; 0xa32 <__divsf3_pse+0x92>
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	88 1f       	adc	r24, r24
     9e6:	bb 1f       	adc	r27, r27
     9e8:	26 17       	cp	r18, r22
     9ea:	37 07       	cpc	r19, r23
     9ec:	48 07       	cpc	r20, r24
     9ee:	ab 07       	cpc	r26, r27
     9f0:	b0 e8       	ldi	r27, 0x80	; 128
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__divsf3_pse+0x56>
     9f4:	bb 0b       	sbc	r27, r27
     9f6:	80 2d       	mov	r24, r0
     9f8:	bf 01       	movw	r22, r30
     9fa:	ff 27       	eor	r31, r31
     9fc:	93 58       	subi	r25, 0x83	; 131
     9fe:	5f 4f       	sbci	r21, 0xFF	; 255
     a00:	3a f0       	brmi	.+14     	; 0xa10 <__divsf3_pse+0x70>
     a02:	9e 3f       	cpi	r25, 0xFE	; 254
     a04:	51 05       	cpc	r21, r1
     a06:	78 f0       	brcs	.+30     	; 0xa26 <__divsf3_pse+0x86>
     a08:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_inf>
     a0c:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     a10:	5f 3f       	cpi	r21, 0xFF	; 255
     a12:	e4 f3       	brlt	.-8      	; 0xa0c <__divsf3_pse+0x6c>
     a14:	98 3e       	cpi	r25, 0xE8	; 232
     a16:	d4 f3       	brlt	.-12     	; 0xa0c <__divsf3_pse+0x6c>
     a18:	86 95       	lsr	r24
     a1a:	77 95       	ror	r23
     a1c:	67 95       	ror	r22
     a1e:	b7 95       	ror	r27
     a20:	f7 95       	ror	r31
     a22:	9f 5f       	subi	r25, 0xFF	; 255
     a24:	c9 f7       	brne	.-14     	; 0xa18 <__divsf3_pse+0x78>
     a26:	88 0f       	add	r24, r24
     a28:	91 1d       	adc	r25, r1
     a2a:	96 95       	lsr	r25
     a2c:	87 95       	ror	r24
     a2e:	97 f9       	bld	r25, 7
     a30:	08 95       	ret
     a32:	e1 e0       	ldi	r30, 0x01	; 1
     a34:	66 0f       	add	r22, r22
     a36:	77 1f       	adc	r23, r23
     a38:	88 1f       	adc	r24, r24
     a3a:	bb 1f       	adc	r27, r27
     a3c:	62 17       	cp	r22, r18
     a3e:	73 07       	cpc	r23, r19
     a40:	84 07       	cpc	r24, r20
     a42:	ba 07       	cpc	r27, r26
     a44:	20 f0       	brcs	.+8      	; 0xa4e <__divsf3_pse+0xae>
     a46:	62 1b       	sub	r22, r18
     a48:	73 0b       	sbc	r23, r19
     a4a:	84 0b       	sbc	r24, r20
     a4c:	ba 0b       	sbc	r27, r26
     a4e:	ee 1f       	adc	r30, r30
     a50:	88 f7       	brcc	.-30     	; 0xa34 <__divsf3_pse+0x94>
     a52:	e0 95       	com	r30
     a54:	08 95       	ret

00000a56 <__fixunssfsi>:
     a56:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_splitA>
     a5a:	88 f0       	brcs	.+34     	; 0xa7e <__fixunssfsi+0x28>
     a5c:	9f 57       	subi	r25, 0x7F	; 127
     a5e:	98 f0       	brcs	.+38     	; 0xa86 <__fixunssfsi+0x30>
     a60:	b9 2f       	mov	r27, r25
     a62:	99 27       	eor	r25, r25
     a64:	b7 51       	subi	r27, 0x17	; 23
     a66:	b0 f0       	brcs	.+44     	; 0xa94 <__fixunssfsi+0x3e>
     a68:	e1 f0       	breq	.+56     	; 0xaa2 <__fixunssfsi+0x4c>
     a6a:	66 0f       	add	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	1a f0       	brmi	.+6      	; 0xa7a <__fixunssfsi+0x24>
     a74:	ba 95       	dec	r27
     a76:	c9 f7       	brne	.-14     	; 0xa6a <__fixunssfsi+0x14>
     a78:	14 c0       	rjmp	.+40     	; 0xaa2 <__fixunssfsi+0x4c>
     a7a:	b1 30       	cpi	r27, 0x01	; 1
     a7c:	91 f0       	breq	.+36     	; 0xaa2 <__fixunssfsi+0x4c>
     a7e:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_zero>
     a82:	b1 e0       	ldi	r27, 0x01	; 1
     a84:	08 95       	ret
     a86:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__fp_zero>
     a8a:	67 2f       	mov	r22, r23
     a8c:	78 2f       	mov	r23, r24
     a8e:	88 27       	eor	r24, r24
     a90:	b8 5f       	subi	r27, 0xF8	; 248
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__fixunssfsi+0x4c>
     a94:	b9 3f       	cpi	r27, 0xF9	; 249
     a96:	cc f3       	brlt	.-14     	; 0xa8a <__fixunssfsi+0x34>
     a98:	86 95       	lsr	r24
     a9a:	77 95       	ror	r23
     a9c:	67 95       	ror	r22
     a9e:	b3 95       	inc	r27
     aa0:	d9 f7       	brne	.-10     	; 0xa98 <__fixunssfsi+0x42>
     aa2:	3e f4       	brtc	.+14     	; 0xab2 <__fixunssfsi+0x5c>
     aa4:	90 95       	com	r25
     aa6:	80 95       	com	r24
     aa8:	70 95       	com	r23
     aaa:	61 95       	neg	r22
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8f 4f       	sbci	r24, 0xFF	; 255
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	08 95       	ret

00000ab4 <__floatunsisf>:
     ab4:	e8 94       	clt
     ab6:	09 c0       	rjmp	.+18     	; 0xaca <__floatsisf+0x12>

00000ab8 <__floatsisf>:
     ab8:	97 fb       	bst	r25, 7
     aba:	3e f4       	brtc	.+14     	; 0xaca <__floatsisf+0x12>
     abc:	90 95       	com	r25
     abe:	80 95       	com	r24
     ac0:	70 95       	com	r23
     ac2:	61 95       	neg	r22
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	8f 4f       	sbci	r24, 0xFF	; 255
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	99 23       	and	r25, r25
     acc:	a9 f0       	breq	.+42     	; 0xaf8 <__floatsisf+0x40>
     ace:	f9 2f       	mov	r31, r25
     ad0:	96 e9       	ldi	r25, 0x96	; 150
     ad2:	bb 27       	eor	r27, r27
     ad4:	93 95       	inc	r25
     ad6:	f6 95       	lsr	r31
     ad8:	87 95       	ror	r24
     ada:	77 95       	ror	r23
     adc:	67 95       	ror	r22
     ade:	b7 95       	ror	r27
     ae0:	f1 11       	cpse	r31, r1
     ae2:	f8 cf       	rjmp	.-16     	; 0xad4 <__floatsisf+0x1c>
     ae4:	fa f4       	brpl	.+62     	; 0xb24 <__floatsisf+0x6c>
     ae6:	bb 0f       	add	r27, r27
     ae8:	11 f4       	brne	.+4      	; 0xaee <__floatsisf+0x36>
     aea:	60 ff       	sbrs	r22, 0
     aec:	1b c0       	rjmp	.+54     	; 0xb24 <__floatsisf+0x6c>
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	8f 4f       	sbci	r24, 0xFF	; 255
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	16 c0       	rjmp	.+44     	; 0xb24 <__floatsisf+0x6c>
     af8:	88 23       	and	r24, r24
     afa:	11 f0       	breq	.+4      	; 0xb00 <__floatsisf+0x48>
     afc:	96 e9       	ldi	r25, 0x96	; 150
     afe:	11 c0       	rjmp	.+34     	; 0xb22 <__floatsisf+0x6a>
     b00:	77 23       	and	r23, r23
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatsisf+0x54>
     b04:	9e e8       	ldi	r25, 0x8E	; 142
     b06:	87 2f       	mov	r24, r23
     b08:	76 2f       	mov	r23, r22
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__floatsisf+0x5e>
     b0c:	66 23       	and	r22, r22
     b0e:	71 f0       	breq	.+28     	; 0xb2c <__floatsisf+0x74>
     b10:	96 e8       	ldi	r25, 0x86	; 134
     b12:	86 2f       	mov	r24, r22
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	2a f0       	brmi	.+10     	; 0xb24 <__floatsisf+0x6c>
     b1a:	9a 95       	dec	r25
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	88 1f       	adc	r24, r24
     b22:	da f7       	brpl	.-10     	; 0xb1a <__floatsisf+0x62>
     b24:	88 0f       	add	r24, r24
     b26:	96 95       	lsr	r25
     b28:	87 95       	ror	r24
     b2a:	97 f9       	bld	r25, 7
     b2c:	08 95       	ret

00000b2e <floor>:
     b2e:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_trunc>
     b32:	90 f0       	brcs	.+36     	; 0xb58 <floor+0x2a>
     b34:	9f 37       	cpi	r25, 0x7F	; 127
     b36:	48 f4       	brcc	.+18     	; 0xb4a <floor+0x1c>
     b38:	91 11       	cpse	r25, r1
     b3a:	16 f0       	brts	.+4      	; 0xb40 <floor+0x12>
     b3c:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	9f eb       	ldi	r25, 0xBF	; 191
     b48:	08 95       	ret
     b4a:	26 f4       	brtc	.+8      	; 0xb54 <floor+0x26>
     b4c:	1b 16       	cp	r1, r27
     b4e:	61 1d       	adc	r22, r1
     b50:	71 1d       	adc	r23, r1
     b52:	81 1d       	adc	r24, r1
     b54:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__fp_mintl>
     b58:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_mpack>

00000b5c <__fp_cmp>:
     b5c:	99 0f       	add	r25, r25
     b5e:	00 08       	sbc	r0, r0
     b60:	55 0f       	add	r21, r21
     b62:	aa 0b       	sbc	r26, r26
     b64:	e0 e8       	ldi	r30, 0x80	; 128
     b66:	fe ef       	ldi	r31, 0xFE	; 254
     b68:	16 16       	cp	r1, r22
     b6a:	17 06       	cpc	r1, r23
     b6c:	e8 07       	cpc	r30, r24
     b6e:	f9 07       	cpc	r31, r25
     b70:	c0 f0       	brcs	.+48     	; 0xba2 <__fp_cmp+0x46>
     b72:	12 16       	cp	r1, r18
     b74:	13 06       	cpc	r1, r19
     b76:	e4 07       	cpc	r30, r20
     b78:	f5 07       	cpc	r31, r21
     b7a:	98 f0       	brcs	.+38     	; 0xba2 <__fp_cmp+0x46>
     b7c:	62 1b       	sub	r22, r18
     b7e:	73 0b       	sbc	r23, r19
     b80:	84 0b       	sbc	r24, r20
     b82:	95 0b       	sbc	r25, r21
     b84:	39 f4       	brne	.+14     	; 0xb94 <__fp_cmp+0x38>
     b86:	0a 26       	eor	r0, r26
     b88:	61 f0       	breq	.+24     	; 0xba2 <__fp_cmp+0x46>
     b8a:	23 2b       	or	r18, r19
     b8c:	24 2b       	or	r18, r20
     b8e:	25 2b       	or	r18, r21
     b90:	21 f4       	brne	.+8      	; 0xb9a <__fp_cmp+0x3e>
     b92:	08 95       	ret
     b94:	0a 26       	eor	r0, r26
     b96:	09 f4       	brne	.+2      	; 0xb9a <__fp_cmp+0x3e>
     b98:	a1 40       	sbci	r26, 0x01	; 1
     b9a:	a6 95       	lsr	r26
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	81 1d       	adc	r24, r1
     ba0:	81 1d       	adc	r24, r1
     ba2:	08 95       	ret

00000ba4 <__fp_inf>:
     ba4:	97 f9       	bld	r25, 7
     ba6:	9f 67       	ori	r25, 0x7F	; 127
     ba8:	80 e8       	ldi	r24, 0x80	; 128
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	08 95       	ret

00000bb0 <__fp_mintl>:
     bb0:	88 23       	and	r24, r24
     bb2:	71 f4       	brne	.+28     	; 0xbd0 <__fp_mintl+0x20>
     bb4:	77 23       	and	r23, r23
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <__fp_mintl+0x10>
     bb8:	98 50       	subi	r25, 0x08	; 8
     bba:	87 2b       	or	r24, r23
     bbc:	76 2f       	mov	r23, r22
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <__fp_mintl+0x1e>
     bc0:	66 23       	and	r22, r22
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <__fp_mintl+0x18>
     bc4:	99 27       	eor	r25, r25
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <__fp_mintl+0x32>
     bc8:	90 51       	subi	r25, 0x10	; 16
     bca:	86 2b       	or	r24, r22
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	2a f0       	brmi	.+10     	; 0xbdc <__fp_mintl+0x2c>
     bd2:	9a 95       	dec	r25
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	da f7       	brpl	.-10     	; 0xbd2 <__fp_mintl+0x22>
     bdc:	88 0f       	add	r24, r24
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	97 f9       	bld	r25, 7
     be4:	08 95       	ret

00000be6 <__fp_mpack>:
     be6:	9f 3f       	cpi	r25, 0xFF	; 255
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__fp_mpack_finite+0xc>

00000bea <__fp_mpack_finite>:
     bea:	91 50       	subi	r25, 0x01	; 1
     bec:	20 f4       	brcc	.+8      	; 0xbf6 <__fp_mpack_finite+0xc>
     bee:	87 95       	ror	r24
     bf0:	77 95       	ror	r23
     bf2:	67 95       	ror	r22
     bf4:	b7 95       	ror	r27
     bf6:	88 0f       	add	r24, r24
     bf8:	91 1d       	adc	r25, r1
     bfa:	96 95       	lsr	r25
     bfc:	87 95       	ror	r24
     bfe:	97 f9       	bld	r25, 7
     c00:	08 95       	ret

00000c02 <__fp_nan>:
     c02:	9f ef       	ldi	r25, 0xFF	; 255
     c04:	80 ec       	ldi	r24, 0xC0	; 192
     c06:	08 95       	ret

00000c08 <__fp_pscA>:
     c08:	00 24       	eor	r0, r0
     c0a:	0a 94       	dec	r0
     c0c:	16 16       	cp	r1, r22
     c0e:	17 06       	cpc	r1, r23
     c10:	18 06       	cpc	r1, r24
     c12:	09 06       	cpc	r0, r25
     c14:	08 95       	ret

00000c16 <__fp_pscB>:
     c16:	00 24       	eor	r0, r0
     c18:	0a 94       	dec	r0
     c1a:	12 16       	cp	r1, r18
     c1c:	13 06       	cpc	r1, r19
     c1e:	14 06       	cpc	r1, r20
     c20:	05 06       	cpc	r0, r21
     c22:	08 95       	ret

00000c24 <__fp_round>:
     c24:	09 2e       	mov	r0, r25
     c26:	03 94       	inc	r0
     c28:	00 0c       	add	r0, r0
     c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_round+0xc>
     c2c:	88 23       	and	r24, r24
     c2e:	52 f0       	brmi	.+20     	; 0xc44 <__fp_round+0x20>
     c30:	bb 0f       	add	r27, r27
     c32:	40 f4       	brcc	.+16     	; 0xc44 <__fp_round+0x20>
     c34:	bf 2b       	or	r27, r31
     c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0x18>
     c38:	60 ff       	sbrs	r22, 0
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <__fp_round+0x20>
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	08 95       	ret

00000c46 <__fp_split3>:
     c46:	57 fd       	sbrc	r21, 7
     c48:	90 58       	subi	r25, 0x80	; 128
     c4a:	44 0f       	add	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	59 f0       	breq	.+22     	; 0xc66 <__fp_splitA+0x10>
     c50:	5f 3f       	cpi	r21, 0xFF	; 255
     c52:	71 f0       	breq	.+28     	; 0xc70 <__fp_splitA+0x1a>
     c54:	47 95       	ror	r20

00000c56 <__fp_splitA>:
     c56:	88 0f       	add	r24, r24
     c58:	97 fb       	bst	r25, 7
     c5a:	99 1f       	adc	r25, r25
     c5c:	61 f0       	breq	.+24     	; 0xc76 <__fp_splitA+0x20>
     c5e:	9f 3f       	cpi	r25, 0xFF	; 255
     c60:	79 f0       	breq	.+30     	; 0xc80 <__fp_splitA+0x2a>
     c62:	87 95       	ror	r24
     c64:	08 95       	ret
     c66:	12 16       	cp	r1, r18
     c68:	13 06       	cpc	r1, r19
     c6a:	14 06       	cpc	r1, r20
     c6c:	55 1f       	adc	r21, r21
     c6e:	f2 cf       	rjmp	.-28     	; 0xc54 <__fp_split3+0xe>
     c70:	46 95       	lsr	r20
     c72:	f1 df       	rcall	.-30     	; 0xc56 <__fp_splitA>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <__fp_splitA+0x30>
     c76:	16 16       	cp	r1, r22
     c78:	17 06       	cpc	r1, r23
     c7a:	18 06       	cpc	r1, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	f1 cf       	rjmp	.-30     	; 0xc62 <__fp_splitA+0xc>
     c80:	86 95       	lsr	r24
     c82:	71 05       	cpc	r23, r1
     c84:	61 05       	cpc	r22, r1
     c86:	08 94       	sec
     c88:	08 95       	ret

00000c8a <__fp_trunc>:
     c8a:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_splitA>
     c8e:	a0 f0       	brcs	.+40     	; 0xcb8 <__fp_trunc+0x2e>
     c90:	be e7       	ldi	r27, 0x7E	; 126
     c92:	b9 17       	cp	r27, r25
     c94:	88 f4       	brcc	.+34     	; 0xcb8 <__fp_trunc+0x2e>
     c96:	bb 27       	eor	r27, r27
     c98:	9f 38       	cpi	r25, 0x8F	; 143
     c9a:	60 f4       	brcc	.+24     	; 0xcb4 <__fp_trunc+0x2a>
     c9c:	16 16       	cp	r1, r22
     c9e:	b1 1d       	adc	r27, r1
     ca0:	67 2f       	mov	r22, r23
     ca2:	78 2f       	mov	r23, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	98 5f       	subi	r25, 0xF8	; 248
     ca8:	f7 cf       	rjmp	.-18     	; 0xc98 <__fp_trunc+0xe>
     caa:	86 95       	lsr	r24
     cac:	77 95       	ror	r23
     cae:	67 95       	ror	r22
     cb0:	b1 1d       	adc	r27, r1
     cb2:	93 95       	inc	r25
     cb4:	96 39       	cpi	r25, 0x96	; 150
     cb6:	c8 f3       	brcs	.-14     	; 0xcaa <__fp_trunc+0x20>
     cb8:	08 95       	ret

00000cba <__fp_zero>:
     cba:	e8 94       	clt

00000cbc <__fp_szero>:
     cbc:	bb 27       	eor	r27, r27
     cbe:	66 27       	eor	r22, r22
     cc0:	77 27       	eor	r23, r23
     cc2:	cb 01       	movw	r24, r22
     cc4:	97 f9       	bld	r25, 7
     cc6:	08 95       	ret

00000cc8 <__gesf2>:
     cc8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_cmp>
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <__gesf2+0x8>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	08 95       	ret

00000cd2 <__mulsf3>:
     cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsf3x>
     cd6:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_round>
     cda:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_pscA>
     cde:	38 f0       	brcs	.+14     	; 0xcee <__mulsf3+0x1c>
     ce0:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_pscB>
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__mulsf3+0x1c>
     ce6:	95 23       	and	r25, r21
     ce8:	11 f0       	breq	.+4      	; 0xcee <__mulsf3+0x1c>
     cea:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_inf>
     cee:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_nan>
     cf2:	11 24       	eor	r1, r1
     cf4:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>

00000cf8 <__mulsf3x>:
     cf8:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_split3>
     cfc:	70 f3       	brcs	.-36     	; 0xcda <__mulsf3+0x8>

00000cfe <__mulsf3_pse>:
     cfe:	95 9f       	mul	r25, r21
     d00:	c1 f3       	breq	.-16     	; 0xcf2 <__mulsf3+0x20>
     d02:	95 0f       	add	r25, r21
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	55 1f       	adc	r21, r21
     d08:	62 9f       	mul	r22, r18
     d0a:	f0 01       	movw	r30, r0
     d0c:	72 9f       	mul	r23, r18
     d0e:	bb 27       	eor	r27, r27
     d10:	f0 0d       	add	r31, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	63 9f       	mul	r22, r19
     d16:	aa 27       	eor	r26, r26
     d18:	f0 0d       	add	r31, r0
     d1a:	b1 1d       	adc	r27, r1
     d1c:	aa 1f       	adc	r26, r26
     d1e:	64 9f       	mul	r22, r20
     d20:	66 27       	eor	r22, r22
     d22:	b0 0d       	add	r27, r0
     d24:	a1 1d       	adc	r26, r1
     d26:	66 1f       	adc	r22, r22
     d28:	82 9f       	mul	r24, r18
     d2a:	22 27       	eor	r18, r18
     d2c:	b0 0d       	add	r27, r0
     d2e:	a1 1d       	adc	r26, r1
     d30:	62 1f       	adc	r22, r18
     d32:	73 9f       	mul	r23, r19
     d34:	b0 0d       	add	r27, r0
     d36:	a1 1d       	adc	r26, r1
     d38:	62 1f       	adc	r22, r18
     d3a:	83 9f       	mul	r24, r19
     d3c:	a0 0d       	add	r26, r0
     d3e:	61 1d       	adc	r22, r1
     d40:	22 1f       	adc	r18, r18
     d42:	74 9f       	mul	r23, r20
     d44:	33 27       	eor	r19, r19
     d46:	a0 0d       	add	r26, r0
     d48:	61 1d       	adc	r22, r1
     d4a:	23 1f       	adc	r18, r19
     d4c:	84 9f       	mul	r24, r20
     d4e:	60 0d       	add	r22, r0
     d50:	21 1d       	adc	r18, r1
     d52:	82 2f       	mov	r24, r18
     d54:	76 2f       	mov	r23, r22
     d56:	6a 2f       	mov	r22, r26
     d58:	11 24       	eor	r1, r1
     d5a:	9f 57       	subi	r25, 0x7F	; 127
     d5c:	50 40       	sbci	r21, 0x00	; 0
     d5e:	9a f0       	brmi	.+38     	; 0xd86 <__mulsf3_pse+0x88>
     d60:	f1 f0       	breq	.+60     	; 0xd9e <__mulsf3_pse+0xa0>
     d62:	88 23       	and	r24, r24
     d64:	4a f0       	brmi	.+18     	; 0xd78 <__mulsf3_pse+0x7a>
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	bb 1f       	adc	r27, r27
     d6c:	66 1f       	adc	r22, r22
     d6e:	77 1f       	adc	r23, r23
     d70:	88 1f       	adc	r24, r24
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	a9 f7       	brne	.-22     	; 0xd62 <__mulsf3_pse+0x64>
     d78:	9e 3f       	cpi	r25, 0xFE	; 254
     d7a:	51 05       	cpc	r21, r1
     d7c:	80 f0       	brcs	.+32     	; 0xd9e <__mulsf3_pse+0xa0>
     d7e:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_inf>
     d82:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	e4 f3       	brlt	.-8      	; 0xd82 <__mulsf3_pse+0x84>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	d4 f3       	brlt	.-12     	; 0xd82 <__mulsf3_pse+0x84>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	e7 95       	ror	r30
     d9a:	9f 5f       	subi	r25, 0xFF	; 255
     d9c:	c1 f7       	brne	.-16     	; 0xd8e <__mulsf3_pse+0x90>
     d9e:	fe 2b       	or	r31, r30
     da0:	88 0f       	add	r24, r24
     da2:	91 1d       	adc	r25, r1
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	97 f9       	bld	r25, 7
     daa:	08 95       	ret

00000dac <fdevopen>:
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	31 f4       	brne	.+12     	; 0xdc4 <fdevopen+0x18>
     db8:	61 15       	cp	r22, r1
     dba:	71 05       	cpc	r23, r1
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <fdevopen+0x18>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	3a c0       	rjmp	.+116    	; 0xe38 <fdevopen+0x8c>
     dc4:	8b 01       	movw	r16, r22
     dc6:	ec 01       	movw	r28, r24
     dc8:	6e e0       	ldi	r22, 0x0E	; 14
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 21 07 	call	0xe42	; 0xe42 <calloc>
     dd4:	fc 01       	movw	r30, r24
     dd6:	89 2b       	or	r24, r25
     dd8:	91 f3       	breq	.-28     	; 0xdbe <fdevopen+0x12>
     dda:	80 e8       	ldi	r24, 0x80	; 128
     ddc:	83 83       	std	Z+3, r24	; 0x03
     dde:	01 15       	cp	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	71 f0       	breq	.+28     	; 0xe00 <fdevopen+0x54>
     de4:	02 87       	std	Z+10, r16	; 0x0a
     de6:	13 87       	std	Z+11, r17	; 0x0b
     de8:	81 e8       	ldi	r24, 0x81	; 129
     dea:	83 83       	std	Z+3, r24	; 0x03
     dec:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <__iob>
     df0:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <__iob+0x1>
     df4:	89 2b       	or	r24, r25
     df6:	21 f4       	brne	.+8      	; 0xe00 <fdevopen+0x54>
     df8:	e0 93 46 20 	sts	0x2046, r30	; 0x802046 <__iob>
     dfc:	f0 93 47 20 	sts	0x2047, r31	; 0x802047 <__iob+0x1>
     e00:	20 97       	sbiw	r28, 0x00	; 0
     e02:	c9 f0       	breq	.+50     	; 0xe36 <fdevopen+0x8a>
     e04:	c0 87       	std	Z+8, r28	; 0x08
     e06:	d1 87       	std	Z+9, r29	; 0x09
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	83 83       	std	Z+3, r24	; 0x03
     e0e:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <__iob+0x2>
     e12:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <__iob+0x3>
     e16:	89 2b       	or	r24, r25
     e18:	71 f4       	brne	.+28     	; 0xe36 <fdevopen+0x8a>
     e1a:	e0 93 48 20 	sts	0x2048, r30	; 0x802048 <__iob+0x2>
     e1e:	f0 93 49 20 	sts	0x2049, r31	; 0x802049 <__iob+0x3>
     e22:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <__iob+0x4>
     e26:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <__iob+0x5>
     e2a:	89 2b       	or	r24, r25
     e2c:	21 f4       	brne	.+8      	; 0xe36 <fdevopen+0x8a>
     e2e:	e0 93 4a 20 	sts	0x204A, r30	; 0x80204a <__iob+0x4>
     e32:	f0 93 4b 20 	sts	0x204B, r31	; 0x80204b <__iob+0x5>
     e36:	cf 01       	movw	r24, r30
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <calloc>:
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	86 9f       	mul	r24, r22
     e4c:	80 01       	movw	r16, r0
     e4e:	87 9f       	mul	r24, r23
     e50:	10 0d       	add	r17, r0
     e52:	96 9f       	mul	r25, r22
     e54:	10 0d       	add	r17, r0
     e56:	11 24       	eor	r1, r1
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <malloc>
     e5e:	ec 01       	movw	r28, r24
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <calloc+0x2c>
     e64:	a8 01       	movw	r20, r16
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <memset>
     e6e:	ce 01       	movw	r24, r28
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <malloc>:
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	91 05       	cpc	r25, r1
     e86:	10 f4       	brcc	.+4      	; 0xe8c <malloc+0x12>
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <__flp>
     e90:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <__flp+0x1>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	30 97       	sbiw	r30, 0x00	; 0
     e9e:	19 f1       	breq	.+70     	; 0xee6 <malloc+0x6c>
     ea0:	40 81       	ld	r20, Z
     ea2:	51 81       	ldd	r21, Z+1	; 0x01
     ea4:	02 81       	ldd	r16, Z+2	; 0x02
     ea6:	13 81       	ldd	r17, Z+3	; 0x03
     ea8:	48 17       	cp	r20, r24
     eaa:	59 07       	cpc	r21, r25
     eac:	c8 f0       	brcs	.+50     	; 0xee0 <malloc+0x66>
     eae:	84 17       	cp	r24, r20
     eb0:	95 07       	cpc	r25, r21
     eb2:	69 f4       	brne	.+26     	; 0xece <malloc+0x54>
     eb4:	10 97       	sbiw	r26, 0x00	; 0
     eb6:	31 f0       	breq	.+12     	; 0xec4 <malloc+0x4a>
     eb8:	12 96       	adiw	r26, 0x02	; 2
     eba:	0c 93       	st	X, r16
     ebc:	12 97       	sbiw	r26, 0x02	; 2
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	1c 93       	st	X, r17
     ec2:	27 c0       	rjmp	.+78     	; 0xf12 <malloc+0x98>
     ec4:	00 93 4e 20 	sts	0x204E, r16	; 0x80204e <__flp>
     ec8:	10 93 4f 20 	sts	0x204F, r17	; 0x80204f <__flp+0x1>
     ecc:	22 c0       	rjmp	.+68     	; 0xf12 <malloc+0x98>
     ece:	21 15       	cp	r18, r1
     ed0:	31 05       	cpc	r19, r1
     ed2:	19 f0       	breq	.+6      	; 0xeda <malloc+0x60>
     ed4:	42 17       	cp	r20, r18
     ed6:	53 07       	cpc	r21, r19
     ed8:	18 f4       	brcc	.+6      	; 0xee0 <malloc+0x66>
     eda:	9a 01       	movw	r18, r20
     edc:	bd 01       	movw	r22, r26
     ede:	ef 01       	movw	r28, r30
     ee0:	df 01       	movw	r26, r30
     ee2:	f8 01       	movw	r30, r16
     ee4:	db cf       	rjmp	.-74     	; 0xe9c <malloc+0x22>
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	f9 f0       	breq	.+62     	; 0xf2a <malloc+0xb0>
     eec:	28 1b       	sub	r18, r24
     eee:	39 0b       	sbc	r19, r25
     ef0:	24 30       	cpi	r18, 0x04	; 4
     ef2:	31 05       	cpc	r19, r1
     ef4:	80 f4       	brcc	.+32     	; 0xf16 <malloc+0x9c>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	61 15       	cp	r22, r1
     efc:	71 05       	cpc	r23, r1
     efe:	21 f0       	breq	.+8      	; 0xf08 <malloc+0x8e>
     f00:	fb 01       	movw	r30, r22
     f02:	82 83       	std	Z+2, r24	; 0x02
     f04:	93 83       	std	Z+3, r25	; 0x03
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <malloc+0x96>
     f08:	80 93 4e 20 	sts	0x204E, r24	; 0x80204e <__flp>
     f0c:	90 93 4f 20 	sts	0x204F, r25	; 0x80204f <__flp+0x1>
     f10:	fe 01       	movw	r30, r28
     f12:	32 96       	adiw	r30, 0x02	; 2
     f14:	44 c0       	rjmp	.+136    	; 0xf9e <malloc+0x124>
     f16:	fe 01       	movw	r30, r28
     f18:	e2 0f       	add	r30, r18
     f1a:	f3 1f       	adc	r31, r19
     f1c:	81 93       	st	Z+, r24
     f1e:	91 93       	st	Z+, r25
     f20:	22 50       	subi	r18, 0x02	; 2
     f22:	31 09       	sbc	r19, r1
     f24:	28 83       	st	Y, r18
     f26:	39 83       	std	Y+1, r19	; 0x01
     f28:	3a c0       	rjmp	.+116    	; 0xf9e <malloc+0x124>
     f2a:	20 91 4c 20 	lds	r18, 0x204C	; 0x80204c <__brkval>
     f2e:	30 91 4d 20 	lds	r19, 0x204D	; 0x80204d <__brkval+0x1>
     f32:	23 2b       	or	r18, r19
     f34:	41 f4       	brne	.+16     	; 0xf46 <malloc+0xcc>
     f36:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     f3a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     f3e:	20 93 4c 20 	sts	0x204C, r18	; 0x80204c <__brkval>
     f42:	30 93 4d 20 	sts	0x204D, r19	; 0x80204d <__brkval+0x1>
     f46:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     f4a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     f4e:	21 15       	cp	r18, r1
     f50:	31 05       	cpc	r19, r1
     f52:	41 f4       	brne	.+16     	; 0xf64 <malloc+0xea>
     f54:	2d b7       	in	r18, 0x3d	; 61
     f56:	3e b7       	in	r19, 0x3e	; 62
     f58:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     f5c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     f60:	24 1b       	sub	r18, r20
     f62:	35 0b       	sbc	r19, r21
     f64:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <__brkval>
     f68:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <__brkval+0x1>
     f6c:	e2 17       	cp	r30, r18
     f6e:	f3 07       	cpc	r31, r19
     f70:	a0 f4       	brcc	.+40     	; 0xf9a <malloc+0x120>
     f72:	2e 1b       	sub	r18, r30
     f74:	3f 0b       	sbc	r19, r31
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	78 f0       	brcs	.+30     	; 0xf9a <malloc+0x120>
     f7c:	ac 01       	movw	r20, r24
     f7e:	4e 5f       	subi	r20, 0xFE	; 254
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	24 17       	cp	r18, r20
     f84:	35 07       	cpc	r19, r21
     f86:	48 f0       	brcs	.+18     	; 0xf9a <malloc+0x120>
     f88:	4e 0f       	add	r20, r30
     f8a:	5f 1f       	adc	r21, r31
     f8c:	40 93 4c 20 	sts	0x204C, r20	; 0x80204c <__brkval>
     f90:	50 93 4d 20 	sts	0x204D, r21	; 0x80204d <__brkval+0x1>
     f94:	81 93       	st	Z+, r24
     f96:	91 93       	st	Z+, r25
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <malloc+0x124>
     f9a:	e0 e0       	ldi	r30, 0x00	; 0
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	cf 01       	movw	r24, r30
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <free>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <free+0xa>
     fb2:	81 c0       	rjmp	.+258    	; 0x10b6 <free+0x10c>
     fb4:	fc 01       	movw	r30, r24
     fb6:	32 97       	sbiw	r30, 0x02	; 2
     fb8:	12 82       	std	Z+2, r1	; 0x02
     fba:	13 82       	std	Z+3, r1	; 0x03
     fbc:	a0 91 4e 20 	lds	r26, 0x204E	; 0x80204e <__flp>
     fc0:	b0 91 4f 20 	lds	r27, 0x204F	; 0x80204f <__flp+0x1>
     fc4:	10 97       	sbiw	r26, 0x00	; 0
     fc6:	81 f4       	brne	.+32     	; 0xfe8 <free+0x3e>
     fc8:	20 81       	ld	r18, Z
     fca:	31 81       	ldd	r19, Z+1	; 0x01
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	20 91 4c 20 	lds	r18, 0x204C	; 0x80204c <__brkval>
     fd4:	30 91 4d 20 	lds	r19, 0x204D	; 0x80204d <__brkval+0x1>
     fd8:	28 17       	cp	r18, r24
     fda:	39 07       	cpc	r19, r25
     fdc:	51 f5       	brne	.+84     	; 0x1032 <free+0x88>
     fde:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <__brkval>
     fe2:	f0 93 4d 20 	sts	0x204D, r31	; 0x80204d <__brkval+0x1>
     fe6:	67 c0       	rjmp	.+206    	; 0x10b6 <free+0x10c>
     fe8:	ed 01       	movw	r28, r26
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	ce 17       	cp	r28, r30
     ff0:	df 07       	cpc	r29, r31
     ff2:	40 f4       	brcc	.+16     	; 0x1004 <free+0x5a>
     ff4:	4a 81       	ldd	r20, Y+2	; 0x02
     ff6:	5b 81       	ldd	r21, Y+3	; 0x03
     ff8:	9e 01       	movw	r18, r28
     ffa:	41 15       	cp	r20, r1
     ffc:	51 05       	cpc	r21, r1
     ffe:	f1 f0       	breq	.+60     	; 0x103c <free+0x92>
    1000:	ea 01       	movw	r28, r20
    1002:	f5 cf       	rjmp	.-22     	; 0xfee <free+0x44>
    1004:	c2 83       	std	Z+2, r28	; 0x02
    1006:	d3 83       	std	Z+3, r29	; 0x03
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	84 0f       	add	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	c8 17       	cp	r28, r24
    1012:	d9 07       	cpc	r29, r25
    1014:	59 f4       	brne	.+22     	; 0x102c <free+0x82>
    1016:	88 81       	ld	r24, Y
    1018:	99 81       	ldd	r25, Y+1	; 0x01
    101a:	84 0f       	add	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	02 96       	adiw	r24, 0x02	; 2
    1020:	80 83       	st	Z, r24
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	82 83       	std	Z+2, r24	; 0x02
    102a:	93 83       	std	Z+3, r25	; 0x03
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	29 f4       	brne	.+10     	; 0x103c <free+0x92>
    1032:	e0 93 4e 20 	sts	0x204E, r30	; 0x80204e <__flp>
    1036:	f0 93 4f 20 	sts	0x204F, r31	; 0x80204f <__flp+0x1>
    103a:	3d c0       	rjmp	.+122    	; 0x10b6 <free+0x10c>
    103c:	e9 01       	movw	r28, r18
    103e:	ea 83       	std	Y+2, r30	; 0x02
    1040:	fb 83       	std	Y+3, r31	; 0x03
    1042:	49 91       	ld	r20, Y+
    1044:	59 91       	ld	r21, Y+
    1046:	c4 0f       	add	r28, r20
    1048:	d5 1f       	adc	r29, r21
    104a:	ec 17       	cp	r30, r28
    104c:	fd 07       	cpc	r31, r29
    104e:	61 f4       	brne	.+24     	; 0x1068 <free+0xbe>
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	84 0f       	add	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	02 96       	adiw	r24, 0x02	; 2
    105a:	e9 01       	movw	r28, r18
    105c:	88 83       	st	Y, r24
    105e:	99 83       	std	Y+1, r25	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	e0 e0       	ldi	r30, 0x00	; 0
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	19 f0       	breq	.+6      	; 0x107e <free+0xd4>
    1078:	fd 01       	movw	r30, r26
    107a:	dc 01       	movw	r26, r24
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <free+0xc2>
    107e:	8d 91       	ld	r24, X+
    1080:	9c 91       	ld	r25, X
    1082:	11 97       	sbiw	r26, 0x01	; 1
    1084:	9d 01       	movw	r18, r26
    1086:	2e 5f       	subi	r18, 0xFE	; 254
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	20 91 4c 20 	lds	r18, 0x204C	; 0x80204c <__brkval>
    1092:	30 91 4d 20 	lds	r19, 0x204D	; 0x80204d <__brkval+0x1>
    1096:	28 17       	cp	r18, r24
    1098:	39 07       	cpc	r19, r25
    109a:	69 f4       	brne	.+26     	; 0x10b6 <free+0x10c>
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	29 f4       	brne	.+10     	; 0x10aa <free+0x100>
    10a0:	10 92 4e 20 	sts	0x204E, r1	; 0x80204e <__flp>
    10a4:	10 92 4f 20 	sts	0x204F, r1	; 0x80204f <__flp+0x1>
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <free+0x104>
    10aa:	12 82       	std	Z+2, r1	; 0x02
    10ac:	13 82       	std	Z+3, r1	; 0x03
    10ae:	a0 93 4c 20 	sts	0x204C, r26	; 0x80204c <__brkval>
    10b2:	b0 93 4d 20 	sts	0x204D, r27	; 0x80204d <__brkval+0x1>
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <memset>:
    10bc:	dc 01       	movw	r26, r24
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <memset+0x6>
    10c0:	6d 93       	st	X+, r22
    10c2:	41 50       	subi	r20, 0x01	; 1
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	e0 f7       	brcc	.-8      	; 0x10c0 <memset+0x4>
    10c8:	08 95       	ret

000010ca <_exit>:
    10ca:	f8 94       	cli

000010cc <__stop_program>:
    10cc:	ff cf       	rjmp	.-2      	; 0x10cc <__stop_program>
