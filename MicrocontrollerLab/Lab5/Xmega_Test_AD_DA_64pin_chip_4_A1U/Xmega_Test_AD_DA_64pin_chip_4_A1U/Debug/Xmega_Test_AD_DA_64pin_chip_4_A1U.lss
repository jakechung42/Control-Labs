
Xmega_Test_AD_DA_64pin_chip_4_A1U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00802006  00802006  00000758  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004df1  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d6e  00000000  00000000  00005609  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061f  00000000  00000000  00009377  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00009998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003969  00000000  00000000  00009a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000160  00000000  00000000  0000d399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000d4f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
   4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
 200:	11 24       	eor	r1, r1
 202:	1f be       	out	0x3f, r1	; 63
 204:	cf ef       	ldi	r28, 0xFF	; 255
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df e3       	ldi	r29, 0x3F	; 63
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	0c bf       	out	0x3c, r16	; 60
 210:	18 be       	out	0x38, r1	; 56
 212:	19 be       	out	0x39, r1	; 57
 214:	1a be       	out	0x3a, r1	; 58
 216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
 218:	10 e2       	ldi	r17, 0x20	; 32
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b0 e2       	ldi	r27, 0x20	; 32
 21e:	ee eb       	ldi	r30, 0xBE	; 190
 220:	f6 e0       	ldi	r31, 0x06	; 6
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	0b bf       	out	0x3b, r16	; 59
 226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
 228:	07 90       	elpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	a6 30       	cpi	r26, 0x06	; 6
 22e:	b1 07       	cpc	r27, r17
 230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
 232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a6 e0       	ldi	r26, 0x06	; 6
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a0 31       	cpi	r26, 0x10	; 16
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	0e 94 b2 01 	call	0x364	; 0x364 <main>
 248:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

0000024c <__bad_interrupt>:
 24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:

}


static int put_char(char c, FILE *stream)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);	//add return to newline character for term
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTD1.STATUS & USART_DREIF_bm)); //loop until Tx is ready
 25e:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7de9b1>
 262:	85 ff       	sbrs	r24, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTD1.DATA = c;
 266:	c0 93 b0 09 	sts	0x09B0, r28	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7de9b0>
	return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 272:	aa ec       	ldi	r26, 0xCA	; 202
 274:	b1 e0       	ldi	r27, 0x01	; 1
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 280:	1c 92       	st	X, r1

	return result;
}
 282:	08 95       	ret

00000284 <ADC_CalibrationValues_Set>:
}



void ADC_CalibrationValues_Set(ADC_t * adc)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
 28a:	c1 15       	cp	r28, r1
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	d8 07       	cpc	r29, r24
 290:	39 f4       	brne	.+14     	; 0x2a0 <ADC_CalibrationValues_Set+0x1c>
		 /* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	8c 87       	std	Y+12, r24	; 0x0c
 29c:	9d 87       	std	Y+13, r25	; 0x0d
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <ADC_CalibrationValues_Set+0x28>
	}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
 2a0:	84 e2       	ldi	r24, 0x24	; 36
 2a2:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	8c 87       	std	Y+12, r24	; 0x0c
 2aa:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <DAC_SingleChannel_Enable>:
	return result;
}


void DAC_SingleChannel_Enable( volatile DAC_t * dac, DAC_REFSEL_t convRef, bool leftAdjust )
{
 2b2:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_SINGLE_gc;
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	8f 79       	andi	r24, 0x9F	; 159
 2b8:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~(DAC_REFSEL_gm | DAC_LEFTADJ_bm) ) |
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	86 7e       	andi	r24, 0xE6	; 230
 2be:	68 2b       	or	r22, r24
 2c0:	46 2b       	or	r20, r22
 2c2:	42 83       	std	Z+2, r20	; 0x02
	             convRef | ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->CTRLA = ( dac->CTRLA & ~DAC_CH1EN_bm ) |
 2c4:	80 81       	ld	r24, Z
 2c6:	82 7f       	andi	r24, 0xF2	; 242
 2c8:	85 60       	ori	r24, 0x05	; 5
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

000002ce <ioinit>:
}

void ioinit (void)
{

	PORTB_DIR = 0b00000100;  // DACB DAC0 Set as Output
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <__TEXT_REGION_LENGTH__+0x7de620>
		
	// Set 32MHz clock
	OSC.CTRL = OSC_RC32MEN_bm; 				//enable 32MHz oscillator 
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));	//wait for stability 
 2da:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 2de:	81 ff       	sbrs	r24, 1
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <ioinit+0xc>
    CCP = CCP_IOREG_gc; 					//secured access 
 2e2:	88 ed       	ldi	r24, 0xD8	; 216
 2e4:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = 0x01; 						//choose this osc source as clk 
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

	// AD

	// Move stored calibration values to ADC A.
	ADC_CalibrationValues_Set(&ADCA);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	0e 94 42 01 	call	0x284	; 0x284 <ADC_CalibrationValues_Set>

	// Set up ADC A to have signed (true) or Unsigned (false) conversion mode and 12 bit resolution. 
	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_12BIT_gc);
 2f4:	e0 e0       	ldi	r30, 0x00	; 0
 2f6:	f2 e0       	ldi	r31, 0x02	; 2
 2f8:	81 81       	ldd	r24, Z+1	; 0x01
 2fa:	89 7e       	andi	r24, 0xE9	; 233
 2fc:	81 83       	std	Z+1, r24	; 0x01

	// Set referance voltage on ADC A to be Internal 1 volt
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
 2fe:	82 81       	ldd	r24, Z+2	; 0x02
 300:	8f 78       	andi	r24, 0x8F	; 143
 302:	82 83       	std	Z+2, r24	; 0x02

	// Sample rate is CPUFREQ/256. Allow time for storing data.
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV16_gc);
 304:	84 81       	ldd	r24, Z+4	; 0x04
 306:	88 7f       	andi	r24, 0xF8	; 248
 308:	82 60       	ori	r24, 0x02	; 2
 30a:	84 83       	std	Z+4, r24	; 0x04

	// Setup channel 2  to have singleended input. 
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
 30c:	a0 e2       	ldi	r26, 0x20	; 32
 30e:	b2 e0       	ldi	r27, 0x02	; 2
 310:	8c 91       	ld	r24, X
 312:	80 7e       	andi	r24, 0xE0	; 224
 314:	81 60       	ori	r24, 0x01	; 1
 316:	8c 93       	st	X, r24
									 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);

	// Set input to the channels in ADC A to be PIN 3
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN3_gc, ADC_CH_MUXNEG_PIN2_gc);
 318:	8a e1       	ldi	r24, 0x1A	; 26
 31a:	11 96       	adiw	r26, 0x01	; 1
 31c:	8c 93       	st	X, r24

	// Enable Enable AD Conversion in ADC A
	ADC_Enable(&ADCA);
 31e:	80 81       	ld	r24, Z
 320:	81 60       	ori	r24, 0x01	; 1
 322:	80 83       	st	Z, r24


	// DA

	// Setup DAC channel B with the DA reference set to the Analog supply voltage and DA data left adjust false 
	DAC_SingleChannel_Enable( &DACB, DAC_REFSEL_AVCC_gc, false);
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	68 e0       	ldi	r22, 0x08	; 8
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DAC_SingleChannel_Enable>
 330:	08 95       	ret

00000332 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTD.DIRSET = (1<<7);
 332:	e0 e6       	ldi	r30, 0x60	; 96
 334:	f6 e0       	ldi	r31, 0x06	; 6
 336:	80 e8       	ldi	r24, 0x80	; 128
 338:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = (1<<6);
 33a:	80 e4       	ldi	r24, 0x40	; 64
 33c:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTD1.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
 33e:	e0 eb       	ldi	r30, 0xB0	; 176
 340:	f9 e0       	ldi	r31, 0x09	; 9
 342:	85 81       	ldd	r24, Z+5	; 0x05
 344:	83 60       	ori	r24, 0x03	; 3
 346:	85 83       	std	Z+5, r24	; 0x05
	USARTD1.BAUDCTRLA = (uint8_t)BSEL;
 348:	8b e4       	ldi	r24, 0x4B	; 75
 34a:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);	
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTD1.CTRLB |= USART_TXEN_bm;
 350:	84 81       	ldd	r24, Z+4	; 0x04
 352:	88 60       	ori	r24, 0x08	; 8
 354:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	88 e2       	ldi	r24, 0x28	; 40
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 ce 01 	call	0x39c	; 0x39c <fdevopen>
 362:	08 95       	ret

00000364 <main>:
int main (void)
{
    uint16_t AD_value;


	ioinit();       //Setup IO pins and defaults
 364:	0e 94 67 01 	call	0x2ce	; 0x2ce <ioinit>
	usart_init();  // Initialize the serial port
 368:	0e 94 99 01 	call	0x332	; 0x332 <usart_init>

    while(1)
    {

	//	AD
		ADCA.CTRLA        = ADCA.CTRLA | ADC_CH0START_bm;       // Start Conversion
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	80 81       	ld	r24, Z
 372:	84 60       	ori	r24, 0x04	; 4
 374:	80 83       	st	Z, r24
		while(((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) == 0x00));   // Is the conversion is complete ?
 376:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x7de223>
 37a:	80 ff       	sbrs	r24, 0
 37c:	fc cf       	rjmp	.-8      	; 0x376 <main+0x12>
		
	  	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;					   	// Clear interup flag by writing a one
 37e:	e0 e0       	ldi	r30, 0x00	; 0
 380:	f2 e0       	ldi	r31, 0x02	; 2
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	83 a3       	std	Z+35, r24	; 0x23
		AD_value = ADCA.CH0.RES;								// Read AD Value
 386:	24 a1       	ldd	r18, Z+36	; 0x24
 388:	35 a1       	ldd	r19, Z+37	; 0x25
	
	//	DA
		while ( (DACB.STATUS & DAC_CH0DRE_bm) == false );  // Wait for the DA regester to be empty
 38a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 38e:	80 ff       	sbrs	r24, 0
 390:	fc cf       	rjmp	.-8      	; 0x38a <main+0x26>
		DACB.CH0DATA = AD_value;                           // write the DAC Value
 392:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
 396:	30 93 39 03 	sts	0x0339, r19	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
 
		//printf("AD_value = %d\n",AD_value);
		
    }
 39a:	e8 cf       	rjmp	.-48     	; 0x36c <main+0x8>

0000039c <fdevopen>:
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <fdevopen+0x18>
 3a8:	61 15       	cp	r22, r1
 3aa:	71 05       	cpc	r23, r1
 3ac:	19 f4       	brne	.+6      	; 0x3b4 <fdevopen+0x18>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	3a c0       	rjmp	.+116    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3b4:	8b 01       	movw	r16, r22
 3b6:	ec 01       	movw	r28, r24
 3b8:	6e e0       	ldi	r22, 0x0E	; 14
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 19 02 	call	0x432	; 0x432 <calloc>
 3c4:	fc 01       	movw	r30, r24
 3c6:	89 2b       	or	r24, r25
 3c8:	91 f3       	breq	.-28     	; 0x3ae <fdevopen+0x12>
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	83 83       	std	Z+3, r24	; 0x03
 3ce:	01 15       	cp	r16, r1
 3d0:	11 05       	cpc	r17, r1
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <fdevopen+0x54>
 3d4:	02 87       	std	Z+10, r16	; 0x0a
 3d6:	13 87       	std	Z+11, r17	; 0x0b
 3d8:	81 e8       	ldi	r24, 0x81	; 129
 3da:	83 83       	std	Z+3, r24	; 0x03
 3dc:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 3e0:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 3e4:	89 2b       	or	r24, r25
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <fdevopen+0x54>
 3e8:	e0 93 06 20 	sts	0x2006, r30	; 0x802006 <__data_end>
 3ec:	f0 93 07 20 	sts	0x2007, r31	; 0x802007 <__data_end+0x1>
 3f0:	20 97       	sbiw	r28, 0x00	; 0
 3f2:	c9 f0       	breq	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f4:	c0 87       	std	Z+8, r28	; 0x08
 3f6:	d1 87       	std	Z+9, r29	; 0x09
 3f8:	83 81       	ldd	r24, Z+3	; 0x03
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	83 83       	std	Z+3, r24	; 0x03
 3fe:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <__data_end+0x2>
 402:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <__data_end+0x3>
 406:	89 2b       	or	r24, r25
 408:	71 f4       	brne	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40a:	e0 93 08 20 	sts	0x2008, r30	; 0x802008 <__data_end+0x2>
 40e:	f0 93 09 20 	sts	0x2009, r31	; 0x802009 <__data_end+0x3>
 412:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <__data_end+0x4>
 416:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <__data_end+0x5>
 41a:	89 2b       	or	r24, r25
 41c:	21 f4       	brne	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41e:	e0 93 0a 20 	sts	0x200A, r30	; 0x80200a <__data_end+0x4>
 422:	f0 93 0b 20 	sts	0x200B, r31	; 0x80200b <__data_end+0x5>
 426:	cf 01       	movw	r24, r30
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <calloc>:
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	86 9f       	mul	r24, r22
 43c:	80 01       	movw	r16, r0
 43e:	87 9f       	mul	r24, r23
 440:	10 0d       	add	r17, r0
 442:	96 9f       	mul	r25, r22
 444:	10 0d       	add	r17, r0
 446:	11 24       	eor	r1, r1
 448:	c8 01       	movw	r24, r16
 44a:	0e 94 35 02 	call	0x46a	; 0x46a <malloc>
 44e:	ec 01       	movw	r28, r24
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	29 f0       	breq	.+10     	; 0x45e <calloc+0x2c>
 454:	a8 01       	movw	r20, r16
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	0e 94 56 03 	call	0x6ac	; 0x6ac <memset>
 45e:	ce 01       	movw	r24, r28
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <malloc>:
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	91 05       	cpc	r25, r1
 476:	10 f4       	brcc	.+4      	; 0x47c <malloc+0x12>
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__flp>
 480:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__flp+0x1>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	19 f1       	breq	.+70     	; 0x4d6 <malloc+0x6c>
 490:	40 81       	ld	r20, Z
 492:	51 81       	ldd	r21, Z+1	; 0x01
 494:	02 81       	ldd	r16, Z+2	; 0x02
 496:	13 81       	ldd	r17, Z+3	; 0x03
 498:	48 17       	cp	r20, r24
 49a:	59 07       	cpc	r21, r25
 49c:	c8 f0       	brcs	.+50     	; 0x4d0 <malloc+0x66>
 49e:	84 17       	cp	r24, r20
 4a0:	95 07       	cpc	r25, r21
 4a2:	69 f4       	brne	.+26     	; 0x4be <malloc+0x54>
 4a4:	10 97       	sbiw	r26, 0x00	; 0
 4a6:	31 f0       	breq	.+12     	; 0x4b4 <malloc+0x4a>
 4a8:	12 96       	adiw	r26, 0x02	; 2
 4aa:	0c 93       	st	X, r16
 4ac:	12 97       	sbiw	r26, 0x02	; 2
 4ae:	13 96       	adiw	r26, 0x03	; 3
 4b0:	1c 93       	st	X, r17
 4b2:	27 c0       	rjmp	.+78     	; 0x502 <malloc+0x98>
 4b4:	00 93 0e 20 	sts	0x200E, r16	; 0x80200e <__flp>
 4b8:	10 93 0f 20 	sts	0x200F, r17	; 0x80200f <__flp+0x1>
 4bc:	22 c0       	rjmp	.+68     	; 0x502 <malloc+0x98>
 4be:	21 15       	cp	r18, r1
 4c0:	31 05       	cpc	r19, r1
 4c2:	19 f0       	breq	.+6      	; 0x4ca <malloc+0x60>
 4c4:	42 17       	cp	r20, r18
 4c6:	53 07       	cpc	r21, r19
 4c8:	18 f4       	brcc	.+6      	; 0x4d0 <malloc+0x66>
 4ca:	9a 01       	movw	r18, r20
 4cc:	bd 01       	movw	r22, r26
 4ce:	ef 01       	movw	r28, r30
 4d0:	df 01       	movw	r26, r30
 4d2:	f8 01       	movw	r30, r16
 4d4:	db cf       	rjmp	.-74     	; 0x48c <malloc+0x22>
 4d6:	21 15       	cp	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	f9 f0       	breq	.+62     	; 0x51a <malloc+0xb0>
 4dc:	28 1b       	sub	r18, r24
 4de:	39 0b       	sbc	r19, r25
 4e0:	24 30       	cpi	r18, 0x04	; 4
 4e2:	31 05       	cpc	r19, r1
 4e4:	80 f4       	brcc	.+32     	; 0x506 <malloc+0x9c>
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ea:	61 15       	cp	r22, r1
 4ec:	71 05       	cpc	r23, r1
 4ee:	21 f0       	breq	.+8      	; 0x4f8 <malloc+0x8e>
 4f0:	fb 01       	movw	r30, r22
 4f2:	82 83       	std	Z+2, r24	; 0x02
 4f4:	93 83       	std	Z+3, r25	; 0x03
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <malloc+0x96>
 4f8:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__flp>
 4fc:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__flp+0x1>
 500:	fe 01       	movw	r30, r28
 502:	32 96       	adiw	r30, 0x02	; 2
 504:	44 c0       	rjmp	.+136    	; 0x58e <malloc+0x124>
 506:	fe 01       	movw	r30, r28
 508:	e2 0f       	add	r30, r18
 50a:	f3 1f       	adc	r31, r19
 50c:	81 93       	st	Z+, r24
 50e:	91 93       	st	Z+, r25
 510:	22 50       	subi	r18, 0x02	; 2
 512:	31 09       	sbc	r19, r1
 514:	28 83       	st	Y, r18
 516:	39 83       	std	Y+1, r19	; 0x01
 518:	3a c0       	rjmp	.+116    	; 0x58e <malloc+0x124>
 51a:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 51e:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 522:	23 2b       	or	r18, r19
 524:	41 f4       	brne	.+16     	; 0x536 <malloc+0xcc>
 526:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 52a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 52e:	20 93 0c 20 	sts	0x200C, r18	; 0x80200c <__brkval>
 532:	30 93 0d 20 	sts	0x200D, r19	; 0x80200d <__brkval+0x1>
 536:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 53a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 53e:	21 15       	cp	r18, r1
 540:	31 05       	cpc	r19, r1
 542:	41 f4       	brne	.+16     	; 0x554 <malloc+0xea>
 544:	2d b7       	in	r18, 0x3d	; 61
 546:	3e b7       	in	r19, 0x3e	; 62
 548:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 54c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 550:	24 1b       	sub	r18, r20
 552:	35 0b       	sbc	r19, r21
 554:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <__brkval>
 558:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <__brkval+0x1>
 55c:	e2 17       	cp	r30, r18
 55e:	f3 07       	cpc	r31, r19
 560:	a0 f4       	brcc	.+40     	; 0x58a <malloc+0x120>
 562:	2e 1b       	sub	r18, r30
 564:	3f 0b       	sbc	r19, r31
 566:	28 17       	cp	r18, r24
 568:	39 07       	cpc	r19, r25
 56a:	78 f0       	brcs	.+30     	; 0x58a <malloc+0x120>
 56c:	ac 01       	movw	r20, r24
 56e:	4e 5f       	subi	r20, 0xFE	; 254
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	24 17       	cp	r18, r20
 574:	35 07       	cpc	r19, r21
 576:	48 f0       	brcs	.+18     	; 0x58a <malloc+0x120>
 578:	4e 0f       	add	r20, r30
 57a:	5f 1f       	adc	r21, r31
 57c:	40 93 0c 20 	sts	0x200C, r20	; 0x80200c <__brkval>
 580:	50 93 0d 20 	sts	0x200D, r21	; 0x80200d <__brkval+0x1>
 584:	81 93       	st	Z+, r24
 586:	91 93       	st	Z+, r25
 588:	02 c0       	rjmp	.+4      	; 0x58e <malloc+0x124>
 58a:	e0 e0       	ldi	r30, 0x00	; 0
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	cf 01       	movw	r24, r30
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <free>:
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <free+0xa>
 5a2:	81 c0       	rjmp	.+258    	; 0x6a6 <free+0x10c>
 5a4:	fc 01       	movw	r30, r24
 5a6:	32 97       	sbiw	r30, 0x02	; 2
 5a8:	12 82       	std	Z+2, r1	; 0x02
 5aa:	13 82       	std	Z+3, r1	; 0x03
 5ac:	a0 91 0e 20 	lds	r26, 0x200E	; 0x80200e <__flp>
 5b0:	b0 91 0f 20 	lds	r27, 0x200F	; 0x80200f <__flp+0x1>
 5b4:	10 97       	sbiw	r26, 0x00	; 0
 5b6:	81 f4       	brne	.+32     	; 0x5d8 <free+0x3e>
 5b8:	20 81       	ld	r18, Z
 5ba:	31 81       	ldd	r19, Z+1	; 0x01
 5bc:	82 0f       	add	r24, r18
 5be:	93 1f       	adc	r25, r19
 5c0:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 5c4:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 5c8:	28 17       	cp	r18, r24
 5ca:	39 07       	cpc	r19, r25
 5cc:	51 f5       	brne	.+84     	; 0x622 <free+0x88>
 5ce:	e0 93 0c 20 	sts	0x200C, r30	; 0x80200c <__brkval>
 5d2:	f0 93 0d 20 	sts	0x200D, r31	; 0x80200d <__brkval+0x1>
 5d6:	67 c0       	rjmp	.+206    	; 0x6a6 <free+0x10c>
 5d8:	ed 01       	movw	r28, r26
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	ce 17       	cp	r28, r30
 5e0:	df 07       	cpc	r29, r31
 5e2:	40 f4       	brcc	.+16     	; 0x5f4 <free+0x5a>
 5e4:	4a 81       	ldd	r20, Y+2	; 0x02
 5e6:	5b 81       	ldd	r21, Y+3	; 0x03
 5e8:	9e 01       	movw	r18, r28
 5ea:	41 15       	cp	r20, r1
 5ec:	51 05       	cpc	r21, r1
 5ee:	f1 f0       	breq	.+60     	; 0x62c <free+0x92>
 5f0:	ea 01       	movw	r28, r20
 5f2:	f5 cf       	rjmp	.-22     	; 0x5de <free+0x44>
 5f4:	c2 83       	std	Z+2, r28	; 0x02
 5f6:	d3 83       	std	Z+3, r29	; 0x03
 5f8:	40 81       	ld	r20, Z
 5fa:	51 81       	ldd	r21, Z+1	; 0x01
 5fc:	84 0f       	add	r24, r20
 5fe:	95 1f       	adc	r25, r21
 600:	c8 17       	cp	r28, r24
 602:	d9 07       	cpc	r29, r25
 604:	59 f4       	brne	.+22     	; 0x61c <free+0x82>
 606:	88 81       	ld	r24, Y
 608:	99 81       	ldd	r25, Y+1	; 0x01
 60a:	84 0f       	add	r24, r20
 60c:	95 1f       	adc	r25, r21
 60e:	02 96       	adiw	r24, 0x02	; 2
 610:	80 83       	st	Z, r24
 612:	91 83       	std	Z+1, r25	; 0x01
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	9b 81       	ldd	r25, Y+3	; 0x03
 618:	82 83       	std	Z+2, r24	; 0x02
 61a:	93 83       	std	Z+3, r25	; 0x03
 61c:	21 15       	cp	r18, r1
 61e:	31 05       	cpc	r19, r1
 620:	29 f4       	brne	.+10     	; 0x62c <free+0x92>
 622:	e0 93 0e 20 	sts	0x200E, r30	; 0x80200e <__flp>
 626:	f0 93 0f 20 	sts	0x200F, r31	; 0x80200f <__flp+0x1>
 62a:	3d c0       	rjmp	.+122    	; 0x6a6 <free+0x10c>
 62c:	e9 01       	movw	r28, r18
 62e:	ea 83       	std	Y+2, r30	; 0x02
 630:	fb 83       	std	Y+3, r31	; 0x03
 632:	49 91       	ld	r20, Y+
 634:	59 91       	ld	r21, Y+
 636:	c4 0f       	add	r28, r20
 638:	d5 1f       	adc	r29, r21
 63a:	ec 17       	cp	r30, r28
 63c:	fd 07       	cpc	r31, r29
 63e:	61 f4       	brne	.+24     	; 0x658 <free+0xbe>
 640:	80 81       	ld	r24, Z
 642:	91 81       	ldd	r25, Z+1	; 0x01
 644:	84 0f       	add	r24, r20
 646:	95 1f       	adc	r25, r21
 648:	02 96       	adiw	r24, 0x02	; 2
 64a:	e9 01       	movw	r28, r18
 64c:	88 83       	st	Y, r24
 64e:	99 83       	std	Y+1, r25	; 0x01
 650:	82 81       	ldd	r24, Z+2	; 0x02
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	8a 83       	std	Y+2, r24	; 0x02
 656:	9b 83       	std	Y+3, r25	; 0x03
 658:	e0 e0       	ldi	r30, 0x00	; 0
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	12 96       	adiw	r26, 0x02	; 2
 65e:	8d 91       	ld	r24, X+
 660:	9c 91       	ld	r25, X
 662:	13 97       	sbiw	r26, 0x03	; 3
 664:	00 97       	sbiw	r24, 0x00	; 0
 666:	19 f0       	breq	.+6      	; 0x66e <free+0xd4>
 668:	fd 01       	movw	r30, r26
 66a:	dc 01       	movw	r26, r24
 66c:	f7 cf       	rjmp	.-18     	; 0x65c <free+0xc2>
 66e:	8d 91       	ld	r24, X+
 670:	9c 91       	ld	r25, X
 672:	11 97       	sbiw	r26, 0x01	; 1
 674:	9d 01       	movw	r18, r26
 676:	2e 5f       	subi	r18, 0xFE	; 254
 678:	3f 4f       	sbci	r19, 0xFF	; 255
 67a:	82 0f       	add	r24, r18
 67c:	93 1f       	adc	r25, r19
 67e:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 682:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 686:	28 17       	cp	r18, r24
 688:	39 07       	cpc	r19, r25
 68a:	69 f4       	brne	.+26     	; 0x6a6 <free+0x10c>
 68c:	30 97       	sbiw	r30, 0x00	; 0
 68e:	29 f4       	brne	.+10     	; 0x69a <free+0x100>
 690:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <__flp>
 694:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <__flp+0x1>
 698:	02 c0       	rjmp	.+4      	; 0x69e <free+0x104>
 69a:	12 82       	std	Z+2, r1	; 0x02
 69c:	13 82       	std	Z+3, r1	; 0x03
 69e:	a0 93 0c 20 	sts	0x200C, r26	; 0x80200c <__brkval>
 6a2:	b0 93 0d 20 	sts	0x200D, r27	; 0x80200d <__brkval+0x1>
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <memset>:
 6ac:	dc 01       	movw	r26, r24
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <memset+0x6>
 6b0:	6d 93       	st	X+, r22
 6b2:	41 50       	subi	r20, 0x01	; 1
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	e0 f7       	brcc	.-8      	; 0x6b0 <memset+0x4>
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
