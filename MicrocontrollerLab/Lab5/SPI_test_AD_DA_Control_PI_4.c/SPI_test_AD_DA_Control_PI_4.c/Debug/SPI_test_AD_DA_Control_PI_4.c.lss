
SPI_test_AD_DA_Control_PI_4.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000006dc  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  0000077e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000999  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000326  00000000  00000000  00001975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec ed       	ldi	r30, 0xDC	; 220
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	37 c3       	rjmp	.+1646   	; 0x6d8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:


// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:
	float	adc_input_v;
	float	Error;
	float	Error_m1, Control_m1, Ki, Ts;

	//USART Setup
	UBRR0H = MYUBRR >> 8;
  98:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
  b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>


	// AD initialization
	ADMUX  = 0b00000000; //Input on AD Channel 0
  b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
  b8:	87 e8       	ldi	r24, 0x87	; 135
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
  be:	8c e2       	ldi	r24, 0x2C	; 44
  c0:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
  c2:	82 e8       	ldi	r24, 0x82	; 130
  c4:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
  c6:	82 e5       	ldi	r24, 0x52	; 82
  c8:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  ca:	1d bc       	out	0x2d, r1	; 45

	Vel_Set_v = -3.0;
	
	Error_m1        = 0.0;
	Control_m1  	= 0.0;
  cc:	81 2c       	mov	r8, r1
  ce:	91 2c       	mov	r9, r1
  d0:	54 01       	movw	r10, r8
	SPCR=0b01010010;
	SPSR=0b00000000;

	Vel_Set_v = -3.0;
	
	Error_m1        = 0.0;
  d2:	61 2c       	mov	r6, r1
  d4:	71 2c       	mov	r7, r1
  d6:	51 2c       	mov	r5, r1
  d8:	41 2c       	mov	r4, r1
	
	// SPI initialization
	SPCR=0b01010010;
	SPSR=0b00000000;

	Vel_Set_v = -3.0;
  da:	0f 2e       	mov	r0, r31
  dc:	c1 2c       	mov	r12, r1
  de:	d1 2c       	mov	r13, r1
  e0:	f0 e4       	ldi	r31, 0x40	; 64
  e2:	ef 2e       	mov	r14, r31
  e4:	f0 ec       	ldi	r31, 0xC0	; 192
  e6:	ff 2e       	mov	r15, r31
  e8:	f0 2d       	mov	r31, r0
	// Note if you have print statments active this will slow the control loop dramatically
	

	while(1)
	{
		Vel_Set_v += 0.0001;							// The motor velocity voltage is cycled from -3 volts to +3 volts
  ea:	27 e1       	ldi	r18, 0x17	; 23
  ec:	37 eb       	ldi	r19, 0xB7	; 183
  ee:	41 ed       	ldi	r20, 0xD1	; 209
  f0:	58 e3       	ldi	r21, 0x38	; 56
  f2:	c7 01       	movw	r24, r14
  f4:	b6 01       	movw	r22, r12
  f6:	8c d0       	rcall	.+280    	; 0x210 <__addsf3>
  f8:	6b 01       	movw	r12, r22
  fa:	7c 01       	movw	r14, r24
		if(Vel_Set_v >= 3.0) Vel_Set_v = -3.0;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e4       	ldi	r20, 0x40	; 64
 102:	50 e4       	ldi	r21, 0x40	; 64
 104:	5e d2       	rcall	.+1212   	; 0x5c2 <__gesf2>
 106:	88 23       	and	r24, r24
 108:	44 f0       	brlt	.+16     	; 0x11a <main+0x82>
 10a:	0f 2e       	mov	r0, r31
 10c:	c1 2c       	mov	r12, r1
 10e:	d1 2c       	mov	r13, r1
 110:	f0 e4       	ldi	r31, 0x40	; 64
 112:	ef 2e       	mov	r14, r31
 114:	f0 ec       	ldi	r31, 0xC0	; 192
 116:	ff 2e       	mov	r15, r31
 118:	f0 2d       	mov	r31, r0


		ADCSRA = ADCSRA | 0b01000000;  					// Start AD conversion
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
		while ((ADCSRA & 0b01000000) == 0b01000000); 	// Wait while AD conversion is executed
 124:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 128:	86 fd       	sbrc	r24, 6
 12a:	fc cf       	rjmp	.-8      	; 0x124 <main+0x8c>

		adc_input = ADCW; 									// Read AD value
 12c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 130:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
		adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	63 d1       	rcall	.+710    	; 0x400 <__floatunsisf>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 ea       	ldi	r20, 0xA0	; 160
 140:	5c e3       	ldi	r21, 0x3C	; 60
 142:	43 d2       	rcall	.+1158   	; 0x5ca <__mulsf3>
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e2       	ldi	r20, 0x20	; 32
 14a:	51 e4       	ldi	r21, 0x41	; 65
 14c:	60 d0       	rcall	.+192    	; 0x20e <__subsf3>
 14e:	9b 01       	movw	r18, r22
 150:	ac 01       	movw	r20, r24
		// Note the input is bipolar +- 10 volts
		// Note that the (10./1024.) term needs the decimal point
		// or else it is interrupted as an integer and the result is zero
		// Control Equation

		Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 10 volts)
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	5b d0       	rcall	.+182    	; 0x20e <__subsf3>
 158:	d6 2f       	mov	r29, r22
 15a:	c7 2f       	mov	r28, r23
 15c:	18 2f       	mov	r17, r24
 15e:	09 2f       	mov	r16, r25
		Control = (-Kp + 1./2.*Ki*Ts)*Error_m1 + (Kp + 1./2.*Ki*Ts)*Error + Control_m1;	// PI Control (units are voltage  +- 10 volts)
 160:	27 e1       	ldi	r18, 0x17	; 23
 162:	39 ed       	ldi	r19, 0xD9	; 217
 164:	4e e9       	ldi	r20, 0x9E	; 158
 166:	50 ec       	ldi	r21, 0xC0	; 192
 168:	66 2d       	mov	r22, r6
 16a:	77 2d       	mov	r23, r7
 16c:	85 2d       	mov	r24, r5
 16e:	94 2d       	mov	r25, r4
 170:	2c d2       	rcall	.+1112   	; 0x5ca <__mulsf3>
 172:	2b 01       	movw	r4, r22
 174:	3c 01       	movw	r6, r24
 176:	29 ee       	ldi	r18, 0xE9	; 233
 178:	36 e2       	ldi	r19, 0x26	; 38
 17a:	41 ea       	ldi	r20, 0xA1	; 161
 17c:	50 e4       	ldi	r21, 0x40	; 64
 17e:	6d 2f       	mov	r22, r29
 180:	7c 2f       	mov	r23, r28
 182:	81 2f       	mov	r24, r17
 184:	90 2f       	mov	r25, r16
 186:	21 d2       	rcall	.+1090   	; 0x5ca <__mulsf3>
 188:	9b 01       	movw	r18, r22
 18a:	ac 01       	movw	r20, r24
 18c:	c3 01       	movw	r24, r6
 18e:	b2 01       	movw	r22, r4
 190:	3f d0       	rcall	.+126    	; 0x210 <__addsf3>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	c5 01       	movw	r24, r10
 198:	b4 01       	movw	r22, r8
 19a:	3a d0       	rcall	.+116    	; 0x210 <__addsf3>
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24

		Error_m1   = Error;
		Control_m1 = Control;
		

		if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 1a0:	9f 77       	andi	r25, 0x7F	; 127
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 ec       	ldi	r20, 0xC0	; 192
 1a8:	50 e4       	ldi	r21, 0x40	; 64
 1aa:	0b d2       	rcall	.+1046   	; 0x5c2 <__gesf2>
 1ac:	88 23       	and	r24, r24
 1ae:	3c f0       	brlt	.+14     	; 0x1be <main+0x126>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 ec       	ldi	r24, 0xC0	; 192
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	b7 fa       	bst	r11, 7
 1ba:	97 f9       	bld	r25, 7
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x12a>
		// Note that the (10./1024.) term needs the decimal point
		// or else it is interrupted as an integer and the result is zero
		// Control Equation

		Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 10 volts)
		Control = (-Kp + 1./2.*Ki*Ts)*Error_m1 + (Kp + 1./2.*Ki*Ts)*Error + Control_m1;	// PI Control (units are voltage  +- 10 volts)
 1be:	c5 01       	movw	r24, r10
 1c0:	b4 01       	movw	r22, r8
		

		if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
		Control = copysign(Max_Voltage,Control);

		adc_output = floor((Control + 10.)*4096./20.);  	// Convert control voltage to a digital number for output
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e2       	ldi	r20, 0x20	; 32
 1c8:	51 e4       	ldi	r21, 0x41	; 65
 1ca:	22 d0       	rcall	.+68     	; 0x210 <__addsf3>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	55 e4       	ldi	r21, 0x45	; 69
 1d4:	fa d1       	rcall	.+1012   	; 0x5ca <__mulsf3>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 ea       	ldi	r20, 0xA0	; 160
 1dc:	51 e4       	ldi	r21, 0x41	; 65
 1de:	7c d0       	rcall	.+248    	; 0x2d8 <__divsf3>
 1e0:	4c d1       	rcall	.+664    	; 0x47a <floor>
 1e2:	e2 d0       	rcall	.+452    	; 0x3a8 <__fixunssfsi>
 1e4:	2b 01       	movw	r4, r22
 1e6:	3c 01       	movw	r6, r24
		// Note the output is +- 10 Volts  which corresponds to 0 to 4095
		
		// Output adc_output to DAC
		spi_data_0 = 0x00; 								// Zero spi_data_0
		spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 1e8:	cb 01       	movw	r24, r22
 1ea:	88 27       	eor	r24, r24
 1ec:	9f 70       	andi	r25, 0x0F	; 15
		// to the lower 4 bit positions and
		spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
		spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
		// bits 0-7 to the lower 8 bit positions
		cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 77       	andi	r24, 0x7F	; 127
 1f2:	8b b9       	out	0x0b, r24	; 11
		dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	89 0f       	add	r24, r25
 1f8:	49 df       	rcall	.-366    	; 0x8c <spi_write_read>
		dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 1fa:	84 2d       	mov	r24, r4
 1fc:	47 df       	rcall	.-370    	; 0x8c <spi_write_read>
		sbi(PORTD,7); 									// Release the chip - set chip select to one
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8b b9       	out	0x0b, r24	; 11
		// Control Equation

		Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 10 volts)
		Control = (-Kp + 1./2.*Ki*Ts)*Error_m1 + (Kp + 1./2.*Ki*Ts)*Error + Control_m1;	// PI Control (units are voltage  +- 10 volts)

		Error_m1   = Error;
 204:	6d 2e       	mov	r6, r29
 206:	7c 2e       	mov	r7, r28
 208:	51 2e       	mov	r5, r17
 20a:	40 2e       	mov	r4, r16
		// bits 0-7 to the lower 8 bit positions
		cbi(PORTD,7); 									// Activate the chip - set chip select to zero
		dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
		dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
		sbi(PORTD,7); 									// Release the chip - set chip select to one
	}
 20c:	6e cf       	rjmp	.-292    	; 0xea <main+0x52>

0000020e <__subsf3>:
 20e:	50 58       	subi	r21, 0x80	; 128

00000210 <__addsf3>:
 210:	bb 27       	eor	r27, r27
 212:	aa 27       	eor	r26, r26
 214:	0e d0       	rcall	.+28     	; 0x232 <__addsf3x>
 216:	84 c1       	rjmp	.+776    	; 0x520 <__fp_round>
 218:	75 d1       	rcall	.+746    	; 0x504 <__fp_pscA>
 21a:	30 f0       	brcs	.+12     	; 0x228 <__addsf3+0x18>
 21c:	7a d1       	rcall	.+756    	; 0x512 <__fp_pscB>
 21e:	20 f0       	brcs	.+8      	; 0x228 <__addsf3+0x18>
 220:	31 f4       	brne	.+12     	; 0x22e <__addsf3+0x1e>
 222:	9f 3f       	cpi	r25, 0xFF	; 255
 224:	11 f4       	brne	.+4      	; 0x22a <__addsf3+0x1a>
 226:	1e f4       	brtc	.+6      	; 0x22e <__addsf3+0x1e>
 228:	6a c1       	rjmp	.+724    	; 0x4fe <__fp_nan>
 22a:	0e f4       	brtc	.+2      	; 0x22e <__addsf3+0x1e>
 22c:	e0 95       	com	r30
 22e:	e7 fb       	bst	r30, 7
 230:	37 c1       	rjmp	.+622    	; 0x4a0 <__fp_inf>

00000232 <__addsf3x>:
 232:	e9 2f       	mov	r30, r25
 234:	86 d1       	rcall	.+780    	; 0x542 <__fp_split3>
 236:	80 f3       	brcs	.-32     	; 0x218 <__addsf3+0x8>
 238:	ba 17       	cp	r27, r26
 23a:	62 07       	cpc	r22, r18
 23c:	73 07       	cpc	r23, r19
 23e:	84 07       	cpc	r24, r20
 240:	95 07       	cpc	r25, r21
 242:	18 f0       	brcs	.+6      	; 0x24a <__addsf3x+0x18>
 244:	71 f4       	brne	.+28     	; 0x262 <__addsf3x+0x30>
 246:	9e f5       	brtc	.+102    	; 0x2ae <__addsf3x+0x7c>
 248:	b5 c1       	rjmp	.+874    	; 0x5b4 <__fp_zero>
 24a:	0e f4       	brtc	.+2      	; 0x24e <__addsf3x+0x1c>
 24c:	e0 95       	com	r30
 24e:	0b 2e       	mov	r0, r27
 250:	ba 2f       	mov	r27, r26
 252:	a0 2d       	mov	r26, r0
 254:	0b 01       	movw	r0, r22
 256:	b9 01       	movw	r22, r18
 258:	90 01       	movw	r18, r0
 25a:	0c 01       	movw	r0, r24
 25c:	ca 01       	movw	r24, r20
 25e:	a0 01       	movw	r20, r0
 260:	11 24       	eor	r1, r1
 262:	ff 27       	eor	r31, r31
 264:	59 1b       	sub	r21, r25
 266:	99 f0       	breq	.+38     	; 0x28e <__addsf3x+0x5c>
 268:	59 3f       	cpi	r21, 0xF9	; 249
 26a:	50 f4       	brcc	.+20     	; 0x280 <__addsf3x+0x4e>
 26c:	50 3e       	cpi	r21, 0xE0	; 224
 26e:	68 f1       	brcs	.+90     	; 0x2ca <__addsf3x+0x98>
 270:	1a 16       	cp	r1, r26
 272:	f0 40       	sbci	r31, 0x00	; 0
 274:	a2 2f       	mov	r26, r18
 276:	23 2f       	mov	r18, r19
 278:	34 2f       	mov	r19, r20
 27a:	44 27       	eor	r20, r20
 27c:	58 5f       	subi	r21, 0xF8	; 248
 27e:	f3 cf       	rjmp	.-26     	; 0x266 <__addsf3x+0x34>
 280:	46 95       	lsr	r20
 282:	37 95       	ror	r19
 284:	27 95       	ror	r18
 286:	a7 95       	ror	r26
 288:	f0 40       	sbci	r31, 0x00	; 0
 28a:	53 95       	inc	r21
 28c:	c9 f7       	brne	.-14     	; 0x280 <__addsf3x+0x4e>
 28e:	7e f4       	brtc	.+30     	; 0x2ae <__addsf3x+0x7c>
 290:	1f 16       	cp	r1, r31
 292:	ba 0b       	sbc	r27, r26
 294:	62 0b       	sbc	r22, r18
 296:	73 0b       	sbc	r23, r19
 298:	84 0b       	sbc	r24, r20
 29a:	ba f0       	brmi	.+46     	; 0x2ca <__addsf3x+0x98>
 29c:	91 50       	subi	r25, 0x01	; 1
 29e:	a1 f0       	breq	.+40     	; 0x2c8 <__addsf3x+0x96>
 2a0:	ff 0f       	add	r31, r31
 2a2:	bb 1f       	adc	r27, r27
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	c2 f7       	brpl	.-16     	; 0x29c <__addsf3x+0x6a>
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <__addsf3x+0x98>
 2ae:	ba 0f       	add	r27, r26
 2b0:	62 1f       	adc	r22, r18
 2b2:	73 1f       	adc	r23, r19
 2b4:	84 1f       	adc	r24, r20
 2b6:	48 f4       	brcc	.+18     	; 0x2ca <__addsf3x+0x98>
 2b8:	87 95       	ror	r24
 2ba:	77 95       	ror	r23
 2bc:	67 95       	ror	r22
 2be:	b7 95       	ror	r27
 2c0:	f7 95       	ror	r31
 2c2:	9e 3f       	cpi	r25, 0xFE	; 254
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__addsf3x+0x96>
 2c6:	b3 cf       	rjmp	.-154    	; 0x22e <__addsf3+0x1e>
 2c8:	93 95       	inc	r25
 2ca:	88 0f       	add	r24, r24
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <__addsf3x+0x9e>
 2ce:	99 27       	eor	r25, r25
 2d0:	ee 0f       	add	r30, r30
 2d2:	97 95       	ror	r25
 2d4:	87 95       	ror	r24
 2d6:	08 95       	ret

000002d8 <__divsf3>:
 2d8:	0c d0       	rcall	.+24     	; 0x2f2 <__divsf3x>
 2da:	22 c1       	rjmp	.+580    	; 0x520 <__fp_round>
 2dc:	1a d1       	rcall	.+564    	; 0x512 <__fp_pscB>
 2de:	40 f0       	brcs	.+16     	; 0x2f0 <__divsf3+0x18>
 2e0:	11 d1       	rcall	.+546    	; 0x504 <__fp_pscA>
 2e2:	30 f0       	brcs	.+12     	; 0x2f0 <__divsf3+0x18>
 2e4:	21 f4       	brne	.+8      	; 0x2ee <__divsf3+0x16>
 2e6:	5f 3f       	cpi	r21, 0xFF	; 255
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <__divsf3+0x18>
 2ea:	da c0       	rjmp	.+436    	; 0x4a0 <__fp_inf>
 2ec:	51 11       	cpse	r21, r1
 2ee:	63 c1       	rjmp	.+710    	; 0x5b6 <__fp_szero>
 2f0:	06 c1       	rjmp	.+524    	; 0x4fe <__fp_nan>

000002f2 <__divsf3x>:
 2f2:	27 d1       	rcall	.+590    	; 0x542 <__fp_split3>
 2f4:	98 f3       	brcs	.-26     	; 0x2dc <__divsf3+0x4>

000002f6 <__divsf3_pse>:
 2f6:	99 23       	and	r25, r25
 2f8:	c9 f3       	breq	.-14     	; 0x2ec <__divsf3+0x14>
 2fa:	55 23       	and	r21, r21
 2fc:	b1 f3       	breq	.-20     	; 0x2ea <__divsf3+0x12>
 2fe:	95 1b       	sub	r25, r21
 300:	55 0b       	sbc	r21, r21
 302:	bb 27       	eor	r27, r27
 304:	aa 27       	eor	r26, r26
 306:	62 17       	cp	r22, r18
 308:	73 07       	cpc	r23, r19
 30a:	84 07       	cpc	r24, r20
 30c:	38 f0       	brcs	.+14     	; 0x31c <__divsf3_pse+0x26>
 30e:	9f 5f       	subi	r25, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	44 1f       	adc	r20, r20
 318:	aa 1f       	adc	r26, r26
 31a:	a9 f3       	breq	.-22     	; 0x306 <__divsf3_pse+0x10>
 31c:	33 d0       	rcall	.+102    	; 0x384 <__divsf3_pse+0x8e>
 31e:	0e 2e       	mov	r0, r30
 320:	3a f0       	brmi	.+14     	; 0x330 <__divsf3_pse+0x3a>
 322:	e0 e8       	ldi	r30, 0x80	; 128
 324:	30 d0       	rcall	.+96     	; 0x386 <__divsf3_pse+0x90>
 326:	91 50       	subi	r25, 0x01	; 1
 328:	50 40       	sbci	r21, 0x00	; 0
 32a:	e6 95       	lsr	r30
 32c:	00 1c       	adc	r0, r0
 32e:	ca f7       	brpl	.-14     	; 0x322 <__divsf3_pse+0x2c>
 330:	29 d0       	rcall	.+82     	; 0x384 <__divsf3_pse+0x8e>
 332:	fe 2f       	mov	r31, r30
 334:	27 d0       	rcall	.+78     	; 0x384 <__divsf3_pse+0x8e>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	88 1f       	adc	r24, r24
 33c:	bb 1f       	adc	r27, r27
 33e:	26 17       	cp	r18, r22
 340:	37 07       	cpc	r19, r23
 342:	48 07       	cpc	r20, r24
 344:	ab 07       	cpc	r26, r27
 346:	b0 e8       	ldi	r27, 0x80	; 128
 348:	09 f0       	breq	.+2      	; 0x34c <__divsf3_pse+0x56>
 34a:	bb 0b       	sbc	r27, r27
 34c:	80 2d       	mov	r24, r0
 34e:	bf 01       	movw	r22, r30
 350:	ff 27       	eor	r31, r31
 352:	93 58       	subi	r25, 0x83	; 131
 354:	5f 4f       	sbci	r21, 0xFF	; 255
 356:	2a f0       	brmi	.+10     	; 0x362 <__divsf3_pse+0x6c>
 358:	9e 3f       	cpi	r25, 0xFE	; 254
 35a:	51 05       	cpc	r21, r1
 35c:	68 f0       	brcs	.+26     	; 0x378 <__divsf3_pse+0x82>
 35e:	a0 c0       	rjmp	.+320    	; 0x4a0 <__fp_inf>
 360:	2a c1       	rjmp	.+596    	; 0x5b6 <__fp_szero>
 362:	5f 3f       	cpi	r21, 0xFF	; 255
 364:	ec f3       	brlt	.-6      	; 0x360 <__divsf3_pse+0x6a>
 366:	98 3e       	cpi	r25, 0xE8	; 232
 368:	dc f3       	brlt	.-10     	; 0x360 <__divsf3_pse+0x6a>
 36a:	86 95       	lsr	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	f7 95       	ror	r31
 374:	9f 5f       	subi	r25, 0xFF	; 255
 376:	c9 f7       	brne	.-14     	; 0x36a <__divsf3_pse+0x74>
 378:	88 0f       	add	r24, r24
 37a:	91 1d       	adc	r25, r1
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	97 f9       	bld	r25, 7
 382:	08 95       	ret
 384:	e1 e0       	ldi	r30, 0x01	; 1
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	bb 1f       	adc	r27, r27
 38e:	62 17       	cp	r22, r18
 390:	73 07       	cpc	r23, r19
 392:	84 07       	cpc	r24, r20
 394:	ba 07       	cpc	r27, r26
 396:	20 f0       	brcs	.+8      	; 0x3a0 <__divsf3_pse+0xaa>
 398:	62 1b       	sub	r22, r18
 39a:	73 0b       	sbc	r23, r19
 39c:	84 0b       	sbc	r24, r20
 39e:	ba 0b       	sbc	r27, r26
 3a0:	ee 1f       	adc	r30, r30
 3a2:	88 f7       	brcc	.-30     	; 0x386 <__divsf3_pse+0x90>
 3a4:	e0 95       	com	r30
 3a6:	08 95       	ret

000003a8 <__fixunssfsi>:
 3a8:	d4 d0       	rcall	.+424    	; 0x552 <__fp_splitA>
 3aa:	88 f0       	brcs	.+34     	; 0x3ce <__fixunssfsi+0x26>
 3ac:	9f 57       	subi	r25, 0x7F	; 127
 3ae:	90 f0       	brcs	.+36     	; 0x3d4 <__fixunssfsi+0x2c>
 3b0:	b9 2f       	mov	r27, r25
 3b2:	99 27       	eor	r25, r25
 3b4:	b7 51       	subi	r27, 0x17	; 23
 3b6:	a0 f0       	brcs	.+40     	; 0x3e0 <__fixunssfsi+0x38>
 3b8:	d1 f0       	breq	.+52     	; 0x3ee <__fixunssfsi+0x46>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a f0       	brmi	.+6      	; 0x3ca <__fixunssfsi+0x22>
 3c4:	ba 95       	dec	r27
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__fixunssfsi+0x12>
 3c8:	12 c0       	rjmp	.+36     	; 0x3ee <__fixunssfsi+0x46>
 3ca:	b1 30       	cpi	r27, 0x01	; 1
 3cc:	81 f0       	breq	.+32     	; 0x3ee <__fixunssfsi+0x46>
 3ce:	f2 d0       	rcall	.+484    	; 0x5b4 <__fp_zero>
 3d0:	b1 e0       	ldi	r27, 0x01	; 1
 3d2:	08 95       	ret
 3d4:	ef c0       	rjmp	.+478    	; 0x5b4 <__fp_zero>
 3d6:	67 2f       	mov	r22, r23
 3d8:	78 2f       	mov	r23, r24
 3da:	88 27       	eor	r24, r24
 3dc:	b8 5f       	subi	r27, 0xF8	; 248
 3de:	39 f0       	breq	.+14     	; 0x3ee <__fixunssfsi+0x46>
 3e0:	b9 3f       	cpi	r27, 0xF9	; 249
 3e2:	cc f3       	brlt	.-14     	; 0x3d6 <__fixunssfsi+0x2e>
 3e4:	86 95       	lsr	r24
 3e6:	77 95       	ror	r23
 3e8:	67 95       	ror	r22
 3ea:	b3 95       	inc	r27
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <__fixunssfsi+0x3c>
 3ee:	3e f4       	brtc	.+14     	; 0x3fe <__fixunssfsi+0x56>
 3f0:	90 95       	com	r25
 3f2:	80 95       	com	r24
 3f4:	70 95       	com	r23
 3f6:	61 95       	neg	r22
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255
 3fa:	8f 4f       	sbci	r24, 0xFF	; 255
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
 3fe:	08 95       	ret

00000400 <__floatunsisf>:
 400:	e8 94       	clt
 402:	09 c0       	rjmp	.+18     	; 0x416 <__floatsisf+0x12>

00000404 <__floatsisf>:
 404:	97 fb       	bst	r25, 7
 406:	3e f4       	brtc	.+14     	; 0x416 <__floatsisf+0x12>
 408:	90 95       	com	r25
 40a:	80 95       	com	r24
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	99 23       	and	r25, r25
 418:	a9 f0       	breq	.+42     	; 0x444 <__floatsisf+0x40>
 41a:	f9 2f       	mov	r31, r25
 41c:	96 e9       	ldi	r25, 0x96	; 150
 41e:	bb 27       	eor	r27, r27
 420:	93 95       	inc	r25
 422:	f6 95       	lsr	r31
 424:	87 95       	ror	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f1 11       	cpse	r31, r1
 42e:	f8 cf       	rjmp	.-16     	; 0x420 <__floatsisf+0x1c>
 430:	fa f4       	brpl	.+62     	; 0x470 <__floatsisf+0x6c>
 432:	bb 0f       	add	r27, r27
 434:	11 f4       	brne	.+4      	; 0x43a <__floatsisf+0x36>
 436:	60 ff       	sbrs	r22, 0
 438:	1b c0       	rjmp	.+54     	; 0x470 <__floatsisf+0x6c>
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	16 c0       	rjmp	.+44     	; 0x470 <__floatsisf+0x6c>
 444:	88 23       	and	r24, r24
 446:	11 f0       	breq	.+4      	; 0x44c <__floatsisf+0x48>
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	11 c0       	rjmp	.+34     	; 0x46e <__floatsisf+0x6a>
 44c:	77 23       	and	r23, r23
 44e:	21 f0       	breq	.+8      	; 0x458 <__floatsisf+0x54>
 450:	9e e8       	ldi	r25, 0x8E	; 142
 452:	87 2f       	mov	r24, r23
 454:	76 2f       	mov	r23, r22
 456:	05 c0       	rjmp	.+10     	; 0x462 <__floatsisf+0x5e>
 458:	66 23       	and	r22, r22
 45a:	71 f0       	breq	.+28     	; 0x478 <__floatsisf+0x74>
 45c:	96 e8       	ldi	r25, 0x86	; 134
 45e:	86 2f       	mov	r24, r22
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	2a f0       	brmi	.+10     	; 0x470 <__floatsisf+0x6c>
 466:	9a 95       	dec	r25
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	da f7       	brpl	.-10     	; 0x466 <__floatsisf+0x62>
 470:	88 0f       	add	r24, r24
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <floor>:
 47a:	85 d0       	rcall	.+266    	; 0x586 <__fp_trunc>
 47c:	80 f0       	brcs	.+32     	; 0x49e <floor+0x24>
 47e:	9f 37       	cpi	r25, 0x7F	; 127
 480:	40 f4       	brcc	.+16     	; 0x492 <floor+0x18>
 482:	91 11       	cpse	r25, r1
 484:	0e f0       	brts	.+2      	; 0x488 <floor+0xe>
 486:	97 c0       	rjmp	.+302    	; 0x5b6 <__fp_szero>
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	9f eb       	ldi	r25, 0xBF	; 191
 490:	08 95       	ret
 492:	26 f4       	brtc	.+8      	; 0x49c <floor+0x22>
 494:	1b 16       	cp	r1, r27
 496:	61 1d       	adc	r22, r1
 498:	71 1d       	adc	r23, r1
 49a:	81 1d       	adc	r24, r1
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <__fp_mintl>
 49e:	21 c0       	rjmp	.+66     	; 0x4e2 <__fp_mpack>

000004a0 <__fp_inf>:
 4a0:	97 f9       	bld	r25, 7
 4a2:	9f 67       	ori	r25, 0x7F	; 127
 4a4:	80 e8       	ldi	r24, 0x80	; 128
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	08 95       	ret

000004ac <__fp_mintl>:
 4ac:	88 23       	and	r24, r24
 4ae:	71 f4       	brne	.+28     	; 0x4cc <__fp_mintl+0x20>
 4b0:	77 23       	and	r23, r23
 4b2:	21 f0       	breq	.+8      	; 0x4bc <__fp_mintl+0x10>
 4b4:	98 50       	subi	r25, 0x08	; 8
 4b6:	87 2b       	or	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__fp_mintl+0x1e>
 4bc:	66 23       	and	r22, r22
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__fp_mintl+0x18>
 4c0:	99 27       	eor	r25, r25
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <__fp_mintl+0x32>
 4c4:	90 51       	subi	r25, 0x10	; 16
 4c6:	86 2b       	or	r24, r22
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	2a f0       	brmi	.+10     	; 0x4d8 <__fp_mintl+0x2c>
 4ce:	9a 95       	dec	r25
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	da f7       	brpl	.-10     	; 0x4ce <__fp_mintl+0x22>
 4d8:	88 0f       	add	r24, r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	97 f9       	bld	r25, 7
 4e0:	08 95       	ret

000004e2 <__fp_mpack>:
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <__fp_mpack_finite+0xc>

000004e6 <__fp_mpack_finite>:
 4e6:	91 50       	subi	r25, 0x01	; 1
 4e8:	20 f4       	brcc	.+8      	; 0x4f2 <__fp_mpack_finite+0xc>
 4ea:	87 95       	ror	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b7 95       	ror	r27
 4f2:	88 0f       	add	r24, r24
 4f4:	91 1d       	adc	r25, r1
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	97 f9       	bld	r25, 7
 4fc:	08 95       	ret

000004fe <__fp_nan>:
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	80 ec       	ldi	r24, 0xC0	; 192
 502:	08 95       	ret

00000504 <__fp_pscA>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	16 16       	cp	r1, r22
 50a:	17 06       	cpc	r1, r23
 50c:	18 06       	cpc	r1, r24
 50e:	09 06       	cpc	r0, r25
 510:	08 95       	ret

00000512 <__fp_pscB>:
 512:	00 24       	eor	r0, r0
 514:	0a 94       	dec	r0
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	05 06       	cpc	r0, r21
 51e:	08 95       	ret

00000520 <__fp_round>:
 520:	09 2e       	mov	r0, r25
 522:	03 94       	inc	r0
 524:	00 0c       	add	r0, r0
 526:	11 f4       	brne	.+4      	; 0x52c <__fp_round+0xc>
 528:	88 23       	and	r24, r24
 52a:	52 f0       	brmi	.+20     	; 0x540 <__fp_round+0x20>
 52c:	bb 0f       	add	r27, r27
 52e:	40 f4       	brcc	.+16     	; 0x540 <__fp_round+0x20>
 530:	bf 2b       	or	r27, r31
 532:	11 f4       	brne	.+4      	; 0x538 <__fp_round+0x18>
 534:	60 ff       	sbrs	r22, 0
 536:	04 c0       	rjmp	.+8      	; 0x540 <__fp_round+0x20>
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__fp_split3>:
 542:	57 fd       	sbrc	r21, 7
 544:	90 58       	subi	r25, 0x80	; 128
 546:	44 0f       	add	r20, r20
 548:	55 1f       	adc	r21, r21
 54a:	59 f0       	breq	.+22     	; 0x562 <__fp_splitA+0x10>
 54c:	5f 3f       	cpi	r21, 0xFF	; 255
 54e:	71 f0       	breq	.+28     	; 0x56c <__fp_splitA+0x1a>
 550:	47 95       	ror	r20

00000552 <__fp_splitA>:
 552:	88 0f       	add	r24, r24
 554:	97 fb       	bst	r25, 7
 556:	99 1f       	adc	r25, r25
 558:	61 f0       	breq	.+24     	; 0x572 <__fp_splitA+0x20>
 55a:	9f 3f       	cpi	r25, 0xFF	; 255
 55c:	79 f0       	breq	.+30     	; 0x57c <__fp_splitA+0x2a>
 55e:	87 95       	ror	r24
 560:	08 95       	ret
 562:	12 16       	cp	r1, r18
 564:	13 06       	cpc	r1, r19
 566:	14 06       	cpc	r1, r20
 568:	55 1f       	adc	r21, r21
 56a:	f2 cf       	rjmp	.-28     	; 0x550 <__fp_split3+0xe>
 56c:	46 95       	lsr	r20
 56e:	f1 df       	rcall	.-30     	; 0x552 <__fp_splitA>
 570:	08 c0       	rjmp	.+16     	; 0x582 <__fp_splitA+0x30>
 572:	16 16       	cp	r1, r22
 574:	17 06       	cpc	r1, r23
 576:	18 06       	cpc	r1, r24
 578:	99 1f       	adc	r25, r25
 57a:	f1 cf       	rjmp	.-30     	; 0x55e <__fp_splitA+0xc>
 57c:	86 95       	lsr	r24
 57e:	71 05       	cpc	r23, r1
 580:	61 05       	cpc	r22, r1
 582:	08 94       	sec
 584:	08 95       	ret

00000586 <__fp_trunc>:
 586:	e5 df       	rcall	.-54     	; 0x552 <__fp_splitA>
 588:	a0 f0       	brcs	.+40     	; 0x5b2 <__fp_trunc+0x2c>
 58a:	be e7       	ldi	r27, 0x7E	; 126
 58c:	b9 17       	cp	r27, r25
 58e:	88 f4       	brcc	.+34     	; 0x5b2 <__fp_trunc+0x2c>
 590:	bb 27       	eor	r27, r27
 592:	9f 38       	cpi	r25, 0x8F	; 143
 594:	60 f4       	brcc	.+24     	; 0x5ae <__fp_trunc+0x28>
 596:	16 16       	cp	r1, r22
 598:	b1 1d       	adc	r27, r1
 59a:	67 2f       	mov	r22, r23
 59c:	78 2f       	mov	r23, r24
 59e:	88 27       	eor	r24, r24
 5a0:	98 5f       	subi	r25, 0xF8	; 248
 5a2:	f7 cf       	rjmp	.-18     	; 0x592 <__fp_trunc+0xc>
 5a4:	86 95       	lsr	r24
 5a6:	77 95       	ror	r23
 5a8:	67 95       	ror	r22
 5aa:	b1 1d       	adc	r27, r1
 5ac:	93 95       	inc	r25
 5ae:	96 39       	cpi	r25, 0x96	; 150
 5b0:	c8 f3       	brcs	.-14     	; 0x5a4 <__fp_trunc+0x1e>
 5b2:	08 95       	ret

000005b4 <__fp_zero>:
 5b4:	e8 94       	clt

000005b6 <__fp_szero>:
 5b6:	bb 27       	eor	r27, r27
 5b8:	66 27       	eor	r22, r22
 5ba:	77 27       	eor	r23, r23
 5bc:	cb 01       	movw	r24, r22
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret

000005c2 <__gesf2>:
 5c2:	66 d0       	rcall	.+204    	; 0x690 <__fp_cmp>
 5c4:	08 f4       	brcc	.+2      	; 0x5c8 <__gesf2+0x6>
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__mulsf3>:
 5ca:	0b d0       	rcall	.+22     	; 0x5e2 <__mulsf3x>
 5cc:	a9 cf       	rjmp	.-174    	; 0x520 <__fp_round>
 5ce:	9a df       	rcall	.-204    	; 0x504 <__fp_pscA>
 5d0:	28 f0       	brcs	.+10     	; 0x5dc <__mulsf3+0x12>
 5d2:	9f df       	rcall	.-194    	; 0x512 <__fp_pscB>
 5d4:	18 f0       	brcs	.+6      	; 0x5dc <__mulsf3+0x12>
 5d6:	95 23       	and	r25, r21
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__mulsf3+0x12>
 5da:	62 cf       	rjmp	.-316    	; 0x4a0 <__fp_inf>
 5dc:	90 cf       	rjmp	.-224    	; 0x4fe <__fp_nan>
 5de:	11 24       	eor	r1, r1
 5e0:	ea cf       	rjmp	.-44     	; 0x5b6 <__fp_szero>

000005e2 <__mulsf3x>:
 5e2:	af df       	rcall	.-162    	; 0x542 <__fp_split3>
 5e4:	a0 f3       	brcs	.-24     	; 0x5ce <__mulsf3+0x4>

000005e6 <__mulsf3_pse>:
 5e6:	95 9f       	mul	r25, r21
 5e8:	d1 f3       	breq	.-12     	; 0x5de <__mulsf3+0x14>
 5ea:	95 0f       	add	r25, r21
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	55 1f       	adc	r21, r21
 5f0:	62 9f       	mul	r22, r18
 5f2:	f0 01       	movw	r30, r0
 5f4:	72 9f       	mul	r23, r18
 5f6:	bb 27       	eor	r27, r27
 5f8:	f0 0d       	add	r31, r0
 5fa:	b1 1d       	adc	r27, r1
 5fc:	63 9f       	mul	r22, r19
 5fe:	aa 27       	eor	r26, r26
 600:	f0 0d       	add	r31, r0
 602:	b1 1d       	adc	r27, r1
 604:	aa 1f       	adc	r26, r26
 606:	64 9f       	mul	r22, r20
 608:	66 27       	eor	r22, r22
 60a:	b0 0d       	add	r27, r0
 60c:	a1 1d       	adc	r26, r1
 60e:	66 1f       	adc	r22, r22
 610:	82 9f       	mul	r24, r18
 612:	22 27       	eor	r18, r18
 614:	b0 0d       	add	r27, r0
 616:	a1 1d       	adc	r26, r1
 618:	62 1f       	adc	r22, r18
 61a:	73 9f       	mul	r23, r19
 61c:	b0 0d       	add	r27, r0
 61e:	a1 1d       	adc	r26, r1
 620:	62 1f       	adc	r22, r18
 622:	83 9f       	mul	r24, r19
 624:	a0 0d       	add	r26, r0
 626:	61 1d       	adc	r22, r1
 628:	22 1f       	adc	r18, r18
 62a:	74 9f       	mul	r23, r20
 62c:	33 27       	eor	r19, r19
 62e:	a0 0d       	add	r26, r0
 630:	61 1d       	adc	r22, r1
 632:	23 1f       	adc	r18, r19
 634:	84 9f       	mul	r24, r20
 636:	60 0d       	add	r22, r0
 638:	21 1d       	adc	r18, r1
 63a:	82 2f       	mov	r24, r18
 63c:	76 2f       	mov	r23, r22
 63e:	6a 2f       	mov	r22, r26
 640:	11 24       	eor	r1, r1
 642:	9f 57       	subi	r25, 0x7F	; 127
 644:	50 40       	sbci	r21, 0x00	; 0
 646:	8a f0       	brmi	.+34     	; 0x66a <__mulsf3_pse+0x84>
 648:	e1 f0       	breq	.+56     	; 0x682 <__mulsf3_pse+0x9c>
 64a:	88 23       	and	r24, r24
 64c:	4a f0       	brmi	.+18     	; 0x660 <__mulsf3_pse+0x7a>
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	bb 1f       	adc	r27, r27
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	50 40       	sbci	r21, 0x00	; 0
 65e:	a9 f7       	brne	.-22     	; 0x64a <__mulsf3_pse+0x64>
 660:	9e 3f       	cpi	r25, 0xFE	; 254
 662:	51 05       	cpc	r21, r1
 664:	70 f0       	brcs	.+28     	; 0x682 <__mulsf3_pse+0x9c>
 666:	1c cf       	rjmp	.-456    	; 0x4a0 <__fp_inf>
 668:	a6 cf       	rjmp	.-180    	; 0x5b6 <__fp_szero>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	ec f3       	brlt	.-6      	; 0x668 <__mulsf3_pse+0x82>
 66e:	98 3e       	cpi	r25, 0xE8	; 232
 670:	dc f3       	brlt	.-10     	; 0x668 <__mulsf3_pse+0x82>
 672:	86 95       	lsr	r24
 674:	77 95       	ror	r23
 676:	67 95       	ror	r22
 678:	b7 95       	ror	r27
 67a:	f7 95       	ror	r31
 67c:	e7 95       	ror	r30
 67e:	9f 5f       	subi	r25, 0xFF	; 255
 680:	c1 f7       	brne	.-16     	; 0x672 <__mulsf3_pse+0x8c>
 682:	fe 2b       	or	r31, r30
 684:	88 0f       	add	r24, r24
 686:	91 1d       	adc	r25, r1
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret

00000690 <__fp_cmp>:
 690:	99 0f       	add	r25, r25
 692:	00 08       	sbc	r0, r0
 694:	55 0f       	add	r21, r21
 696:	aa 0b       	sbc	r26, r26
 698:	e0 e8       	ldi	r30, 0x80	; 128
 69a:	fe ef       	ldi	r31, 0xFE	; 254
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	e8 07       	cpc	r30, r24
 6a2:	f9 07       	cpc	r31, r25
 6a4:	c0 f0       	brcs	.+48     	; 0x6d6 <__fp_cmp+0x46>
 6a6:	12 16       	cp	r1, r18
 6a8:	13 06       	cpc	r1, r19
 6aa:	e4 07       	cpc	r30, r20
 6ac:	f5 07       	cpc	r31, r21
 6ae:	98 f0       	brcs	.+38     	; 0x6d6 <__fp_cmp+0x46>
 6b0:	62 1b       	sub	r22, r18
 6b2:	73 0b       	sbc	r23, r19
 6b4:	84 0b       	sbc	r24, r20
 6b6:	95 0b       	sbc	r25, r21
 6b8:	39 f4       	brne	.+14     	; 0x6c8 <__fp_cmp+0x38>
 6ba:	0a 26       	eor	r0, r26
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <__fp_cmp+0x46>
 6be:	23 2b       	or	r18, r19
 6c0:	24 2b       	or	r18, r20
 6c2:	25 2b       	or	r18, r21
 6c4:	21 f4       	brne	.+8      	; 0x6ce <__fp_cmp+0x3e>
 6c6:	08 95       	ret
 6c8:	0a 26       	eor	r0, r26
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__fp_cmp+0x3e>
 6cc:	a1 40       	sbci	r26, 0x01	; 1
 6ce:	a6 95       	lsr	r26
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	81 1d       	adc	r24, r1
 6d4:	81 1d       	adc	r24, r1
 6d6:	08 95       	ret

000006d8 <_exit>:
 6d8:	f8 94       	cli

000006da <__stop_program>:
 6da:	ff cf       	rjmp	.-2      	; 0x6da <__stop_program>
