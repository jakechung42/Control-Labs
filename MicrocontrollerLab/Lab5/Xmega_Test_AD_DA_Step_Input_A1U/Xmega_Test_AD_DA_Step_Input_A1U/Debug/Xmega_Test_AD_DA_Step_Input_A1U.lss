
Xmega_Test_AD_DA_Step_Input_A1U.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00802006  00802006  00000d16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ee8  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dbc  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a7  00000000  00000000  00009a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000a124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039a6  00000000  00000000  0000a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cb  00000000  00000000  0000db6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000dd39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
   4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
   c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
  fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
 1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
 200:	11 24       	eor	r1, r1
 202:	1f be       	out	0x3f, r1	; 63
 204:	cf ef       	ldi	r28, 0xFF	; 255
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df e3       	ldi	r29, 0x3F	; 63
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	0c bf       	out	0x3c, r16	; 60
 210:	18 be       	out	0x38, r1	; 56
 212:	19 be       	out	0x39, r1	; 57
 214:	1a be       	out	0x3a, r1	; 58
 216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
 218:	10 e2       	ldi	r17, 0x20	; 32
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b0 e2       	ldi	r27, 0x20	; 32
 21e:	ec e7       	ldi	r30, 0x7C	; 124
 220:	fc e0       	ldi	r31, 0x0C	; 12
 222:	00 e0       	ldi	r16, 0x00	; 0
 224:	0b bf       	out	0x3b, r16	; 59
 226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
 228:	07 90       	elpm	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	a6 30       	cpi	r26, 0x06	; 6
 22e:	b1 07       	cpc	r27, r17
 230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
 232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a6 e0       	ldi	r26, 0x06	; 6
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a0 31       	cpi	r26, 0x10	; 16
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
 248:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <_exit>

0000024c <__bad_interrupt>:
 24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:

}


static int put_char(char c, FILE *stream)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);	//add return to newline character for term
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTD1.STATUS & USART_DREIF_bm)); //loop until Tx is ready
 25e:	80 91 b1 09 	lds	r24, 0x09B1	; 0x8009b1 <__TEXT_REGION_LENGTH__+0x7de9b1>
 262:	85 ff       	sbrs	r24, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTD1.DATA = c;
 266:	c0 93 b0 09 	sts	0x09B0, r28	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7de9b0>
	return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 272:	aa ec       	ldi	r26, 0xCA	; 202
 274:	b1 e0       	ldi	r27, 0x01	; 1
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 280:	1c 92       	st	X, r1

	return result;
}
 282:	08 95       	ret

00000284 <DAC_CalibrationValues_Set>:
}



void DAC_CalibrationValues_Set(DAC_t * dac)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	if(&DACA == dac){
 28a:	c1 15       	cp	r28, r1
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	d8 07       	cpc	r29, r24
 290:	89 f4       	brne	.+34     	; 0x2b4 <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 298:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
 29a:	81 e3       	ldi	r24, 0x31	; 49
 29c:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2a0:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
 2a2:	84 e3       	ldi	r24, 0x34	; 52
 2a4:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2a8:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
 2aa:	85 e3       	ldi	r24, 0x35	; 53
 2ac:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2b0:	8a 87       	std	Y+10, r24	; 0x0a
 2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2ba:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2c2:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
 2c4:	86 e3       	ldi	r24, 0x36	; 54
 2c6:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2ca:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
 2cc:	87 e3       	ldi	r24, 0x37	; 55
 2ce:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2d2:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <ADC_CalibrationValues_Set>:


void ADC_CalibrationValues_Set(ADC_t * adc)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
 2e0:	c1 15       	cp	r28, r1
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	d8 07       	cpc	r29, r24
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	8c 87       	std	Y+12, r24	; 0x0c
 2f2:	9d 87       	std	Y+13, r25	; 0x0d
 2f4:	06 c0       	rjmp	.+12     	; 0x302 <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
 2f6:	84 e2       	ldi	r24, 0x24	; 36
 2f8:	0e 94 39 01 	call	0x272	; 0x272 <SP_ReadCalibrationByte>
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	8c 87       	std	Y+12, r24	; 0x0c
 300:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <ioinit>:
}

void ioinit (void)
{

	PORTB_DIRSET = 0b00001100;  // DACB DAC0 and DACB DAC1 Set as Output
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x7de621>
	PORTC_DIRSET = 0b00000001;  // PORT C P0 Set as Output for timing pin toggle
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7de641>
	
	// Set 32MHz clock
	OSC.CTRL = OSC_RC32MEN_bm; 				//enable 32MHz oscillator
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));	//wait for stability
 31a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 31e:	81 ff       	sbrs	r24, 1
 320:	fc cf       	rjmp	.-8      	; 0x31a <ioinit+0x12>
	CCP = CCP_IOREG_gc; 					//secured access
 322:	88 ed       	ldi	r24, 0xD8	; 216
 324:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 						//choose this osc source as clk
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

	// AD

	// Move stored calibration values to ADC A.
	ADC_CalibrationValues_Set(&ADCA);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	0e 94 6d 01 	call	0x2da	; 0x2da <ADC_CalibrationValues_Set>

	// Set up ADC A to have signed (true) or Unsigned (false) conversion mode and 12 bit resolution.
	ADC_ConvMode_and_Resolution_Config(&ADCA, false, ADC_RESOLUTION_12BIT_gc);
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f2 e0       	ldi	r31, 0x02	; 2
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	89 7e       	andi	r24, 0xE9	; 233
 33c:	81 83       	std	Z+1, r24	; 0x01

	// Set reference voltage on ADC A to be Internal 1 volt
	ADC_Referance_Config(&ADCA, ADC_REFSEL_INT1V_gc);
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	8f 78       	andi	r24, 0x8F	; 143
 342:	82 83       	std	Z+2, r24	; 0x02

	// Sample rate is CPUFREQ/256. Allow time for storing data.
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV16_gc);
 344:	84 81       	ldd	r24, Z+4	; 0x04
 346:	88 7f       	andi	r24, 0xF8	; 248
 348:	82 60       	ori	r24, 0x02	; 2
 34a:	84 83       	std	Z+4, r24	; 0x04

	// Setup channel 2  to have single ended input.
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
 34c:	a0 e2       	ldi	r26, 0x20	; 32
 34e:	b2 e0       	ldi	r27, 0x02	; 2
 350:	8c 91       	ld	r24, X
 352:	80 7e       	andi	r24, 0xE0	; 224
 354:	81 60       	ori	r24, 0x01	; 1
 356:	8c 93       	st	X, r24
	ADC_CH_INPUTMODE_SINGLEENDED_gc,
	ADC_CH_GAIN_1X_gc);

	// Set input to the channels in ADC A to be PIN 3
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN3_gc, ADC_CH_MUXNEG_PIN2_gc);
 358:	8a e1       	ldi	r24, 0x1A	; 26
 35a:	11 96       	adiw	r26, 0x01	; 1
 35c:	8c 93       	st	X, r24

	// Enable Enable AD Conversion in ADC A
	ADC_Enable(&ADCA);
 35e:	80 81       	ld	r24, Z
 360:	81 60       	ori	r24, 0x01	; 1
 362:	80 83       	st	Z, r24

	// DA

	// Setup DAC channel B with the DA reference set to the Internal 1 volt supply voltage and DA data left adjust false
	
		DAC_CalibrationValues_Set(&DACB);
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	0e 94 42 01 	call	0x284	; 0x284 <DAC_CalibrationValues_Set>
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
 36c:	e0 e2       	ldi	r30, 0x20	; 32
 36e:	f3 e0       	ldi	r31, 0x03	; 3
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	80 64       	ori	r24, 0x40	; 64
 374:	81 83       	std	Z+1, r24	; 0x01
//		DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. 
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;	// 3.3 volt internal reference.		DACB.CH0DATAH = 0x00;
 376:	82 81       	ldd	r24, Z+2	; 0x02
 378:	88 60       	ori	r24, 0x08	; 8
 37a:	82 83       	std	Z+2, r24	; 0x02
		DACB.CH1DATAH = 0x00;
 37c:	13 8e       	std	Z+27, r1	; 0x1b
		DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
 37e:	80 81       	ld	r24, Z
 380:	8d 60       	ori	r24, 0x0D	; 13
 382:	80 83       	st	Z, r24
 384:	08 95       	ret

00000386 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTD.DIRSET = (1<<7);
 386:	e0 e6       	ldi	r30, 0x60	; 96
 388:	f6 e0       	ldi	r31, 0x06	; 6
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = (1<<6);
 38e:	80 e4       	ldi	r24, 0x40	; 64
 390:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTD1.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
 392:	e0 eb       	ldi	r30, 0xB0	; 176
 394:	f9 e0       	ldi	r31, 0x09	; 9
 396:	85 81       	ldd	r24, Z+5	; 0x05
 398:	83 60       	ori	r24, 0x03	; 3
 39a:	85 83       	std	Z+5, r24	; 0x05
	USARTD1.BAUDCTRLA = (uint8_t)BSEL;
 39c:	8b e4       	ldi	r24, 0x4B	; 75
 39e:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
 3a0:	80 ea       	ldi	r24, 0xA0	; 160
 3a2:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTD1.CTRLB |= USART_TXEN_bm;
 3a4:	84 81       	ldd	r24, Z+4	; 0x04
 3a6:	88 60       	ori	r24, 0x08	; 8
 3a8:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 ad 04 	call	0x95a	; 0x95a <fdevopen>
 3b6:	08 95       	ret

000003b8 <main>:
	
	//float InputTime, DeltaInputTime, SinInput, del_theta, theta, pi, DAC_output, SinAmplitude, StepAmplitude;
	//float InputData[100];
	//int ii, NumInputPoints;
	
	ioinit();       //Setup IO pins and defaults
 3b8:	0e 94 84 01 	call	0x308	; 0x308 <ioinit>
	usart_init();  // Initialize the serial port
 3bc:	0e 94 c3 01 	call	0x386	; 0x386 <usart_init>
		
	// Note if you have print statements active this will slow the control loop dramatically
		
	// Sawtooth and Step Input are in Control Voltage Units (+- 10 volts)
		
    Sawtooth           = -1.0;			// Initial value
 3c0:	0f 2e       	mov	r0, r31
 3c2:	c1 2c       	mov	r12, r1
 3c4:	d1 2c       	mov	r13, r1
 3c6:	f0 e8       	ldi	r31, 0x80	; 128
 3c8:	ef 2e       	mov	r14, r31
 3ca:	ff eb       	ldi	r31, 0xBF	; 191
 3cc:	ff 2e       	mov	r15, r31
 3ce:	f0 2d       	mov	r31, r0

	
	while(1)
	{
		// Digitally generated Input wave form
		Sawtooth += Input_Increment;						// Input_Increment
 3d0:	27 e1       	ldi	r18, 0x17	; 23
 3d2:	37 eb       	ldi	r19, 0xB7	; 183
 3d4:	41 ed       	ldi	r20, 0xD1	; 209
 3d6:	58 e3       	ldi	r21, 0x38	; 56
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__addsf3>
 3e0:	6b 01       	movw	r12, r22
 3e2:	7c 01       	movw	r14, r24
		if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	40 e8       	ldi	r20, 0x80	; 128
 3ea:	5f e3       	ldi	r21, 0x3F	; 63
 3ec:	0e 94 3b 04 	call	0x876	; 0x876 <__gesf2>
 3f0:	88 23       	and	r24, r24
 3f2:	44 f0       	brlt	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f4:	0f 2e       	mov	r0, r31
 3f6:	c1 2c       	mov	r12, r1
 3f8:	d1 2c       	mov	r13, r1
 3fa:	f0 e8       	ldi	r31, 0x80	; 128
 3fc:	ef 2e       	mov	r14, r31
 3fe:	ff eb       	ldi	r31, 0xBF	; 191
 400:	ff 2e       	mov	r15, r31
 402:	f0 2d       	mov	r31, r0
		if(Sawtooth <= 0.0) StepInput = 0.0;                  // Step Input Value     (0 to 1)             
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	a9 01       	movw	r20, r18
 40a:	c7 01       	movw	r24, r14
 40c:	b6 01       	movw	r22, r12
 40e:	0e 94 c8 02 	call	0x590	; 0x590 <__cmpsf2>
 412:	18 16       	cp	r1, r24
 414:	1c f0       	brlt	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	81 2c       	mov	r8, r1
 418:	91 2c       	mov	r9, r1
 41a:	54 01       	movw	r10, r8
		if(Sawtooth > 0.0)  StepInput = 1.0;                  // Step Input Value		(0 to 1)
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	a9 01       	movw	r20, r18
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	0e 94 3b 04 	call	0x876	; 0x876 <__gesf2>
 42a:	18 16       	cp	r1, r24
 42c:	44 f4       	brge	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 42e:	0f 2e       	mov	r0, r31
 430:	81 2c       	mov	r8, r1
 432:	91 2c       	mov	r9, r1
 434:	f0 e8       	ldi	r31, 0x80	; 128
 436:	af 2e       	mov	r10, r31
 438:	ff e3       	ldi	r31, 0x3F	; 63
 43a:	bf 2e       	mov	r11, r31
 43c:	f0 2d       	mov	r31, r0
		
//		Vel_Set_v = Sawtooth*Sawtooth_Amplitude;             // Set Velocity Set Point to either Sawtooth or Step Input Value
		Vel_Set_v = StepInput*Step_Amplitude;                // Set Velocity Set Point to either Sawtooth or Step Input Value
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 ea       	ldi	r20, 0xA0	; 160
 444:	50 e4       	ldi	r21, 0x40	; 64
 446:	c5 01       	movw	r24, r10
 448:	b4 01       	movw	r22, r8
 44a:	0e 94 40 04 	call	0x880	; 0x880 <__mulsf3>
 44e:	2b 01       	movw	r4, r22
 450:	3c 01       	movw	r6, r24
		                                                     // Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)

		//	AD
		ADCA.CTRLA        = ADCA.CTRLA | ADC_CH0START_bm;       // Start Conversion
 452:	e0 e0       	ldi	r30, 0x00	; 0
 454:	f2 e0       	ldi	r31, 0x02	; 2
 456:	80 81       	ld	r24, Z
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	80 83       	st	Z, r24
		while(((ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) == 0x00));   // Is the conversion is complete ?
 45c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <__TEXT_REGION_LENGTH__+0x7de223>
 460:	80 ff       	sbrs	r24, 0
 462:	fc cf       	rjmp	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;					   	// Clear interrupt flag by writing a one
 464:	e0 e0       	ldi	r30, 0x00	; 0
 466:	f2 e0       	ldi	r31, 0x02	; 2
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	83 a3       	std	Z+35, r24	; 0x23
		AD_value = ADCA.CH0.RES;								// Read AD Value
 46c:	24 a1       	ldd	r18, Z+36	; 0x24
 46e:	35 a1       	ldd	r19, Z+37	; 0x25
		
		//	DA
		while ( (DACB.STATUS & DAC_CH0DRE_bm) == false );  // Wait for the DA register to be empty
 470:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
 474:	80 ff       	sbrs	r24, 0
 476:	fc cf       	rjmp	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		DACB.CH0DATA = AD_value;                           // write the DAC Value
 478:	c0 e2       	ldi	r28, 0x20	; 32
 47a:	d3 e0       	ldi	r29, 0x03	; 3
 47c:	28 8f       	std	Y+24, r18	; 0x18
 47e:	39 8f       	std	Y+25, r19	; 0x19

		DAC_output = floor(Vel_Set_v/5.0*4095.0);  	// Convert control voltage to a digital number for output
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 ea       	ldi	r20, 0xA0	; 160
 486:	50 e4       	ldi	r21, 0x40	; 64
 488:	c3 01       	movw	r24, r6
 48a:	b2 01       	movw	r22, r4
 48c:	0e 94 cd 02 	call	0x59a	; 0x59a <__divsf3>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 ef       	ldi	r19, 0xF0	; 240
 494:	4f e7       	ldi	r20, 0x7F	; 127
 496:	55 e4       	ldi	r21, 0x45	; 69
 498:	0e 94 40 04 	call	0x880	; 0x880 <__mulsf3>
 49c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <floor>
		// DAC_output = 4095;	            		// Note the output is +- 10 Volts  which corresponds to 0 to 4095
		DACB.CH1DATA = DAC_output;                     // Write the DAC Value
 4a0:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 4a4:	6a 8f       	std	Y+26, r22	; 0x1a
 4a6:	7b 8f       	std	Y+27, r23	; 0x1b
		
		PORTC_OUT ^= (1 << 0);								// Toggle P0 on port C to check timing
 4a8:	e4 e4       	ldi	r30, 0x44	; 68
 4aa:	f6 e0       	ldi	r31, 0x06	; 6
 4ac:	90 81       	ld	r25, Z
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	89 27       	eor	r24, r25
 4b2:	80 83       	st	Z, r24
															// because the cycle frequency is the time the signal
															// is on or off not the entire cycle
		
		//printf("AD_value = %d\n",AD_value);
		
	}
 4b4:	8d cf       	rjmp	.-230    	; 0x3d0 <main+0x18>

000004b6 <__subsf3>:
 4b6:	50 58       	subi	r21, 0x80	; 128

000004b8 <__addsf3>:
 4b8:	bb 27       	eor	r27, r27
 4ba:	aa 27       	eor	r26, r26
 4bc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3x>
 4c0:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 4c4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 4c8:	38 f0       	brcs	.+14     	; 0x4d8 <__addsf3+0x20>
 4ca:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__addsf3+0x20>
 4d0:	39 f4       	brne	.+14     	; 0x4e0 <__addsf3+0x28>
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	19 f4       	brne	.+6      	; 0x4dc <__addsf3+0x24>
 4d6:	26 f4       	brtc	.+8      	; 0x4e0 <__addsf3+0x28>
 4d8:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>
 4dc:	0e f4       	brtc	.+2      	; 0x4e0 <__addsf3+0x28>
 4de:	e0 95       	com	r30
 4e0:	e7 fb       	bst	r30, 7
 4e2:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>

000004e6 <__addsf3x>:
 4e6:	e9 2f       	mov	r30, r25
 4e8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 4ec:	58 f3       	brcs	.-42     	; 0x4c4 <__addsf3+0xc>
 4ee:	ba 17       	cp	r27, r26
 4f0:	62 07       	cpc	r22, r18
 4f2:	73 07       	cpc	r23, r19
 4f4:	84 07       	cpc	r24, r20
 4f6:	95 07       	cpc	r25, r21
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__addsf3x+0x1c>
 4fa:	79 f4       	brne	.+30     	; 0x51a <__addsf3x+0x34>
 4fc:	a6 f5       	brtc	.+104    	; 0x566 <__addsf3x+0x80>
 4fe:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 502:	0e f4       	brtc	.+2      	; 0x506 <__addsf3x+0x20>
 504:	e0 95       	com	r30
 506:	0b 2e       	mov	r0, r27
 508:	ba 2f       	mov	r27, r26
 50a:	a0 2d       	mov	r26, r0
 50c:	0b 01       	movw	r0, r22
 50e:	b9 01       	movw	r22, r18
 510:	90 01       	movw	r18, r0
 512:	0c 01       	movw	r0, r24
 514:	ca 01       	movw	r24, r20
 516:	a0 01       	movw	r20, r0
 518:	11 24       	eor	r1, r1
 51a:	ff 27       	eor	r31, r31
 51c:	59 1b       	sub	r21, r25
 51e:	99 f0       	breq	.+38     	; 0x546 <__addsf3x+0x60>
 520:	59 3f       	cpi	r21, 0xF9	; 249
 522:	50 f4       	brcc	.+20     	; 0x538 <__addsf3x+0x52>
 524:	50 3e       	cpi	r21, 0xE0	; 224
 526:	68 f1       	brcs	.+90     	; 0x582 <__addsf3x+0x9c>
 528:	1a 16       	cp	r1, r26
 52a:	f0 40       	sbci	r31, 0x00	; 0
 52c:	a2 2f       	mov	r26, r18
 52e:	23 2f       	mov	r18, r19
 530:	34 2f       	mov	r19, r20
 532:	44 27       	eor	r20, r20
 534:	58 5f       	subi	r21, 0xF8	; 248
 536:	f3 cf       	rjmp	.-26     	; 0x51e <__addsf3x+0x38>
 538:	46 95       	lsr	r20
 53a:	37 95       	ror	r19
 53c:	27 95       	ror	r18
 53e:	a7 95       	ror	r26
 540:	f0 40       	sbci	r31, 0x00	; 0
 542:	53 95       	inc	r21
 544:	c9 f7       	brne	.-14     	; 0x538 <__addsf3x+0x52>
 546:	7e f4       	brtc	.+30     	; 0x566 <__addsf3x+0x80>
 548:	1f 16       	cp	r1, r31
 54a:	ba 0b       	sbc	r27, r26
 54c:	62 0b       	sbc	r22, r18
 54e:	73 0b       	sbc	r23, r19
 550:	84 0b       	sbc	r24, r20
 552:	ba f0       	brmi	.+46     	; 0x582 <__addsf3x+0x9c>
 554:	91 50       	subi	r25, 0x01	; 1
 556:	a1 f0       	breq	.+40     	; 0x580 <__addsf3x+0x9a>
 558:	ff 0f       	add	r31, r31
 55a:	bb 1f       	adc	r27, r27
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	c2 f7       	brpl	.-16     	; 0x554 <__addsf3x+0x6e>
 564:	0e c0       	rjmp	.+28     	; 0x582 <__addsf3x+0x9c>
 566:	ba 0f       	add	r27, r26
 568:	62 1f       	adc	r22, r18
 56a:	73 1f       	adc	r23, r19
 56c:	84 1f       	adc	r24, r20
 56e:	48 f4       	brcc	.+18     	; 0x582 <__addsf3x+0x9c>
 570:	87 95       	ror	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f7 95       	ror	r31
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	08 f0       	brcs	.+2      	; 0x580 <__addsf3x+0x9a>
 57e:	b0 cf       	rjmp	.-160    	; 0x4e0 <__addsf3+0x28>
 580:	93 95       	inc	r25
 582:	88 0f       	add	r24, r24
 584:	08 f0       	brcs	.+2      	; 0x588 <__addsf3x+0xa2>
 586:	99 27       	eor	r25, r25
 588:	ee 0f       	add	r30, r30
 58a:	97 95       	ror	r25
 58c:	87 95       	ror	r24
 58e:	08 95       	ret

00000590 <__cmpsf2>:
 590:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_cmp>
 594:	08 f4       	brcc	.+2      	; 0x598 <__cmpsf2+0x8>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	08 95       	ret

0000059a <__divsf3>:
 59a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divsf3x>
 59e:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 5a2:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 5a6:	58 f0       	brcs	.+22     	; 0x5be <__divsf3+0x24>
 5a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 5ac:	40 f0       	brcs	.+16     	; 0x5be <__divsf3+0x24>
 5ae:	29 f4       	brne	.+10     	; 0x5ba <__divsf3+0x20>
 5b0:	5f 3f       	cpi	r21, 0xFF	; 255
 5b2:	29 f0       	breq	.+10     	; 0x5be <__divsf3+0x24>
 5b4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 5b8:	51 11       	cpse	r21, r1
 5ba:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 5be:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>

000005c2 <__divsf3x>:
 5c2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 5c6:	68 f3       	brcs	.-38     	; 0x5a2 <__divsf3+0x8>

000005c8 <__divsf3_pse>:
 5c8:	99 23       	and	r25, r25
 5ca:	b1 f3       	breq	.-20     	; 0x5b8 <__divsf3+0x1e>
 5cc:	55 23       	and	r21, r21
 5ce:	91 f3       	breq	.-28     	; 0x5b4 <__divsf3+0x1a>
 5d0:	95 1b       	sub	r25, r21
 5d2:	55 0b       	sbc	r21, r21
 5d4:	bb 27       	eor	r27, r27
 5d6:	aa 27       	eor	r26, r26
 5d8:	62 17       	cp	r22, r18
 5da:	73 07       	cpc	r23, r19
 5dc:	84 07       	cpc	r24, r20
 5de:	38 f0       	brcs	.+14     	; 0x5ee <__divsf3_pse+0x26>
 5e0:	9f 5f       	subi	r25, 0xFF	; 255
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	22 0f       	add	r18, r18
 5e6:	33 1f       	adc	r19, r19
 5e8:	44 1f       	adc	r20, r20
 5ea:	aa 1f       	adc	r26, r26
 5ec:	a9 f3       	breq	.-22     	; 0x5d8 <__divsf3_pse+0x10>
 5ee:	35 d0       	rcall	.+106    	; 0x65a <__divsf3_pse+0x92>
 5f0:	0e 2e       	mov	r0, r30
 5f2:	3a f0       	brmi	.+14     	; 0x602 <__divsf3_pse+0x3a>
 5f4:	e0 e8       	ldi	r30, 0x80	; 128
 5f6:	32 d0       	rcall	.+100    	; 0x65c <__divsf3_pse+0x94>
 5f8:	91 50       	subi	r25, 0x01	; 1
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	e6 95       	lsr	r30
 5fe:	00 1c       	adc	r0, r0
 600:	ca f7       	brpl	.-14     	; 0x5f4 <__divsf3_pse+0x2c>
 602:	2b d0       	rcall	.+86     	; 0x65a <__divsf3_pse+0x92>
 604:	fe 2f       	mov	r31, r30
 606:	29 d0       	rcall	.+82     	; 0x65a <__divsf3_pse+0x92>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	bb 1f       	adc	r27, r27
 610:	26 17       	cp	r18, r22
 612:	37 07       	cpc	r19, r23
 614:	48 07       	cpc	r20, r24
 616:	ab 07       	cpc	r26, r27
 618:	b0 e8       	ldi	r27, 0x80	; 128
 61a:	09 f0       	breq	.+2      	; 0x61e <__divsf3_pse+0x56>
 61c:	bb 0b       	sbc	r27, r27
 61e:	80 2d       	mov	r24, r0
 620:	bf 01       	movw	r22, r30
 622:	ff 27       	eor	r31, r31
 624:	93 58       	subi	r25, 0x83	; 131
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	3a f0       	brmi	.+14     	; 0x638 <__divsf3_pse+0x70>
 62a:	9e 3f       	cpi	r25, 0xFE	; 254
 62c:	51 05       	cpc	r21, r1
 62e:	78 f0       	brcs	.+30     	; 0x64e <__divsf3_pse+0x86>
 630:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 634:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 638:	5f 3f       	cpi	r21, 0xFF	; 255
 63a:	e4 f3       	brlt	.-8      	; 0x634 <__divsf3_pse+0x6c>
 63c:	98 3e       	cpi	r25, 0xE8	; 232
 63e:	d4 f3       	brlt	.-12     	; 0x634 <__divsf3_pse+0x6c>
 640:	86 95       	lsr	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b7 95       	ror	r27
 648:	f7 95       	ror	r31
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	c9 f7       	brne	.-14     	; 0x640 <__divsf3_pse+0x78>
 64e:	88 0f       	add	r24, r24
 650:	91 1d       	adc	r25, r1
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret
 65a:	e1 e0       	ldi	r30, 0x01	; 1
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	bb 1f       	adc	r27, r27
 664:	62 17       	cp	r22, r18
 666:	73 07       	cpc	r23, r19
 668:	84 07       	cpc	r24, r20
 66a:	ba 07       	cpc	r27, r26
 66c:	20 f0       	brcs	.+8      	; 0x676 <__divsf3_pse+0xae>
 66e:	62 1b       	sub	r22, r18
 670:	73 0b       	sbc	r23, r19
 672:	84 0b       	sbc	r24, r20
 674:	ba 0b       	sbc	r27, r26
 676:	ee 1f       	adc	r30, r30
 678:	88 f7       	brcc	.-30     	; 0x65c <__divsf3_pse+0x94>
 67a:	e0 95       	com	r30
 67c:	08 95       	ret

0000067e <__fixunssfsi>:
 67e:	0e 94 02 04 	call	0x804	; 0x804 <__fp_splitA>
 682:	88 f0       	brcs	.+34     	; 0x6a6 <__fixunssfsi+0x28>
 684:	9f 57       	subi	r25, 0x7F	; 127
 686:	98 f0       	brcs	.+38     	; 0x6ae <__fixunssfsi+0x30>
 688:	b9 2f       	mov	r27, r25
 68a:	99 27       	eor	r25, r25
 68c:	b7 51       	subi	r27, 0x17	; 23
 68e:	b0 f0       	brcs	.+44     	; 0x6bc <__fixunssfsi+0x3e>
 690:	e1 f0       	breq	.+56     	; 0x6ca <__fixunssfsi+0x4c>
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	1a f0       	brmi	.+6      	; 0x6a2 <__fixunssfsi+0x24>
 69c:	ba 95       	dec	r27
 69e:	c9 f7       	brne	.-14     	; 0x692 <__fixunssfsi+0x14>
 6a0:	14 c0       	rjmp	.+40     	; 0x6ca <__fixunssfsi+0x4c>
 6a2:	b1 30       	cpi	r27, 0x01	; 1
 6a4:	91 f0       	breq	.+36     	; 0x6ca <__fixunssfsi+0x4c>
 6a6:	0e 94 34 04 	call	0x868	; 0x868 <__fp_zero>
 6aa:	b1 e0       	ldi	r27, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_zero>
 6b2:	67 2f       	mov	r22, r23
 6b4:	78 2f       	mov	r23, r24
 6b6:	88 27       	eor	r24, r24
 6b8:	b8 5f       	subi	r27, 0xF8	; 248
 6ba:	39 f0       	breq	.+14     	; 0x6ca <__fixunssfsi+0x4c>
 6bc:	b9 3f       	cpi	r27, 0xF9	; 249
 6be:	cc f3       	brlt	.-14     	; 0x6b2 <__fixunssfsi+0x34>
 6c0:	86 95       	lsr	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b3 95       	inc	r27
 6c8:	d9 f7       	brne	.-10     	; 0x6c0 <__fixunssfsi+0x42>
 6ca:	3e f4       	brtc	.+14     	; 0x6da <__fixunssfsi+0x5c>
 6cc:	90 95       	com	r25
 6ce:	80 95       	com	r24
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <floor>:
 6dc:	0e 94 1c 04 	call	0x838	; 0x838 <__fp_trunc>
 6e0:	90 f0       	brcs	.+36     	; 0x706 <floor+0x2a>
 6e2:	9f 37       	cpi	r25, 0x7F	; 127
 6e4:	48 f4       	brcc	.+18     	; 0x6f8 <floor+0x1c>
 6e6:	91 11       	cpse	r25, r1
 6e8:	16 f0       	brts	.+4      	; 0x6ee <floor+0x12>
 6ea:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	9f eb       	ldi	r25, 0xBF	; 191
 6f6:	08 95       	ret
 6f8:	26 f4       	brtc	.+8      	; 0x702 <floor+0x26>
 6fa:	1b 16       	cp	r1, r27
 6fc:	61 1d       	adc	r22, r1
 6fe:	71 1d       	adc	r23, r1
 700:	81 1d       	adc	r24, r1
 702:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_mintl>
 706:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_mpack>

0000070a <__fp_cmp>:
 70a:	99 0f       	add	r25, r25
 70c:	00 08       	sbc	r0, r0
 70e:	55 0f       	add	r21, r21
 710:	aa 0b       	sbc	r26, r26
 712:	e0 e8       	ldi	r30, 0x80	; 128
 714:	fe ef       	ldi	r31, 0xFE	; 254
 716:	16 16       	cp	r1, r22
 718:	17 06       	cpc	r1, r23
 71a:	e8 07       	cpc	r30, r24
 71c:	f9 07       	cpc	r31, r25
 71e:	c0 f0       	brcs	.+48     	; 0x750 <__fp_cmp+0x46>
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	e4 07       	cpc	r30, r20
 726:	f5 07       	cpc	r31, r21
 728:	98 f0       	brcs	.+38     	; 0x750 <__fp_cmp+0x46>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	95 0b       	sbc	r25, r21
 732:	39 f4       	brne	.+14     	; 0x742 <__fp_cmp+0x38>
 734:	0a 26       	eor	r0, r26
 736:	61 f0       	breq	.+24     	; 0x750 <__fp_cmp+0x46>
 738:	23 2b       	or	r18, r19
 73a:	24 2b       	or	r18, r20
 73c:	25 2b       	or	r18, r21
 73e:	21 f4       	brne	.+8      	; 0x748 <__fp_cmp+0x3e>
 740:	08 95       	ret
 742:	0a 26       	eor	r0, r26
 744:	09 f4       	brne	.+2      	; 0x748 <__fp_cmp+0x3e>
 746:	a1 40       	sbci	r26, 0x01	; 1
 748:	a6 95       	lsr	r26
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	81 1d       	adc	r24, r1
 74e:	81 1d       	adc	r24, r1
 750:	08 95       	ret

00000752 <__fp_inf>:
 752:	97 f9       	bld	r25, 7
 754:	9f 67       	ori	r25, 0x7F	; 127
 756:	80 e8       	ldi	r24, 0x80	; 128
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	08 95       	ret

0000075e <__fp_mintl>:
 75e:	88 23       	and	r24, r24
 760:	71 f4       	brne	.+28     	; 0x77e <__fp_mintl+0x20>
 762:	77 23       	and	r23, r23
 764:	21 f0       	breq	.+8      	; 0x76e <__fp_mintl+0x10>
 766:	98 50       	subi	r25, 0x08	; 8
 768:	87 2b       	or	r24, r23
 76a:	76 2f       	mov	r23, r22
 76c:	07 c0       	rjmp	.+14     	; 0x77c <__fp_mintl+0x1e>
 76e:	66 23       	and	r22, r22
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_mintl+0x18>
 772:	99 27       	eor	r25, r25
 774:	0d c0       	rjmp	.+26     	; 0x790 <__fp_mintl+0x32>
 776:	90 51       	subi	r25, 0x10	; 16
 778:	86 2b       	or	r24, r22
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	2a f0       	brmi	.+10     	; 0x78a <__fp_mintl+0x2c>
 780:	9a 95       	dec	r25
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	da f7       	brpl	.-10     	; 0x780 <__fp_mintl+0x22>
 78a:	88 0f       	add	r24, r24
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__fp_mpack>:
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	31 f0       	breq	.+12     	; 0x7a4 <__fp_mpack_finite+0xc>

00000798 <__fp_mpack_finite>:
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	20 f4       	brcc	.+8      	; 0x7a4 <__fp_mpack_finite+0xc>
 79c:	87 95       	ror	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	88 0f       	add	r24, r24
 7a6:	91 1d       	adc	r25, r1
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	97 f9       	bld	r25, 7
 7ae:	08 95       	ret

000007b0 <__fp_nan>:
 7b0:	9f ef       	ldi	r25, 0xFF	; 255
 7b2:	80 ec       	ldi	r24, 0xC0	; 192
 7b4:	08 95       	ret

000007b6 <__fp_pscA>:
 7b6:	00 24       	eor	r0, r0
 7b8:	0a 94       	dec	r0
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	18 06       	cpc	r1, r24
 7c0:	09 06       	cpc	r0, r25
 7c2:	08 95       	ret

000007c4 <__fp_pscB>:
 7c4:	00 24       	eor	r0, r0
 7c6:	0a 94       	dec	r0
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	14 06       	cpc	r1, r20
 7ce:	05 06       	cpc	r0, r21
 7d0:	08 95       	ret

000007d2 <__fp_round>:
 7d2:	09 2e       	mov	r0, r25
 7d4:	03 94       	inc	r0
 7d6:	00 0c       	add	r0, r0
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0xc>
 7da:	88 23       	and	r24, r24
 7dc:	52 f0       	brmi	.+20     	; 0x7f2 <__fp_round+0x20>
 7de:	bb 0f       	add	r27, r27
 7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__fp_round+0x20>
 7e2:	bf 2b       	or	r27, r31
 7e4:	11 f4       	brne	.+4      	; 0x7ea <__fp_round+0x18>
 7e6:	60 ff       	sbrs	r22, 0
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fp_round+0x20>
 7ea:	6f 5f       	subi	r22, 0xFF	; 255
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__fp_split3>:
 7f4:	57 fd       	sbrc	r21, 7
 7f6:	90 58       	subi	r25, 0x80	; 128
 7f8:	44 0f       	add	r20, r20
 7fa:	55 1f       	adc	r21, r21
 7fc:	59 f0       	breq	.+22     	; 0x814 <__fp_splitA+0x10>
 7fe:	5f 3f       	cpi	r21, 0xFF	; 255
 800:	71 f0       	breq	.+28     	; 0x81e <__fp_splitA+0x1a>
 802:	47 95       	ror	r20

00000804 <__fp_splitA>:
 804:	88 0f       	add	r24, r24
 806:	97 fb       	bst	r25, 7
 808:	99 1f       	adc	r25, r25
 80a:	61 f0       	breq	.+24     	; 0x824 <__fp_splitA+0x20>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	79 f0       	breq	.+30     	; 0x82e <__fp_splitA+0x2a>
 810:	87 95       	ror	r24
 812:	08 95       	ret
 814:	12 16       	cp	r1, r18
 816:	13 06       	cpc	r1, r19
 818:	14 06       	cpc	r1, r20
 81a:	55 1f       	adc	r21, r21
 81c:	f2 cf       	rjmp	.-28     	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
 81e:	46 95       	lsr	r20
 820:	f1 df       	rcall	.-30     	; 0x804 <__fp_splitA>
 822:	08 c0       	rjmp	.+16     	; 0x834 <__fp_splitA+0x30>
 824:	16 16       	cp	r1, r22
 826:	17 06       	cpc	r1, r23
 828:	18 06       	cpc	r1, r24
 82a:	99 1f       	adc	r25, r25
 82c:	f1 cf       	rjmp	.-30     	; 0x810 <__fp_splitA+0xc>
 82e:	86 95       	lsr	r24
 830:	71 05       	cpc	r23, r1
 832:	61 05       	cpc	r22, r1
 834:	08 94       	sec
 836:	08 95       	ret

00000838 <__fp_trunc>:
 838:	0e 94 02 04 	call	0x804	; 0x804 <__fp_splitA>
 83c:	a0 f0       	brcs	.+40     	; 0x866 <__fp_trunc+0x2e>
 83e:	be e7       	ldi	r27, 0x7E	; 126
 840:	b9 17       	cp	r27, r25
 842:	88 f4       	brcc	.+34     	; 0x866 <__fp_trunc+0x2e>
 844:	bb 27       	eor	r27, r27
 846:	9f 38       	cpi	r25, 0x8F	; 143
 848:	60 f4       	brcc	.+24     	; 0x862 <__fp_trunc+0x2a>
 84a:	16 16       	cp	r1, r22
 84c:	b1 1d       	adc	r27, r1
 84e:	67 2f       	mov	r22, r23
 850:	78 2f       	mov	r23, r24
 852:	88 27       	eor	r24, r24
 854:	98 5f       	subi	r25, 0xF8	; 248
 856:	f7 cf       	rjmp	.-18     	; 0x846 <__fp_trunc+0xe>
 858:	86 95       	lsr	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b1 1d       	adc	r27, r1
 860:	93 95       	inc	r25
 862:	96 39       	cpi	r25, 0x96	; 150
 864:	c8 f3       	brcs	.-14     	; 0x858 <__fp_trunc+0x20>
 866:	08 95       	ret

00000868 <__fp_zero>:
 868:	e8 94       	clt

0000086a <__fp_szero>:
 86a:	bb 27       	eor	r27, r27
 86c:	66 27       	eor	r22, r22
 86e:	77 27       	eor	r23, r23
 870:	cb 01       	movw	r24, r22
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

00000876 <__gesf2>:
 876:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_cmp>
 87a:	08 f4       	brcc	.+2      	; 0x87e <__gesf2+0x8>
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__mulsf3>:
 880:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3x>
 884:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 888:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 88c:	38 f0       	brcs	.+14     	; 0x89c <__mulsf3+0x1c>
 88e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 892:	20 f0       	brcs	.+8      	; 0x89c <__mulsf3+0x1c>
 894:	95 23       	and	r25, r21
 896:	11 f0       	breq	.+4      	; 0x89c <__mulsf3+0x1c>
 898:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 89c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>
 8a0:	11 24       	eor	r1, r1
 8a2:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>

000008a6 <__mulsf3x>:
 8a6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 8aa:	70 f3       	brcs	.-36     	; 0x888 <__mulsf3+0x8>

000008ac <__mulsf3_pse>:
 8ac:	95 9f       	mul	r25, r21
 8ae:	c1 f3       	breq	.-16     	; 0x8a0 <__mulsf3+0x20>
 8b0:	95 0f       	add	r25, r21
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	55 1f       	adc	r21, r21
 8b6:	62 9f       	mul	r22, r18
 8b8:	f0 01       	movw	r30, r0
 8ba:	72 9f       	mul	r23, r18
 8bc:	bb 27       	eor	r27, r27
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	63 9f       	mul	r22, r19
 8c4:	aa 27       	eor	r26, r26
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	aa 1f       	adc	r26, r26
 8cc:	64 9f       	mul	r22, r20
 8ce:	66 27       	eor	r22, r22
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	66 1f       	adc	r22, r22
 8d6:	82 9f       	mul	r24, r18
 8d8:	22 27       	eor	r18, r18
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	73 9f       	mul	r23, r19
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	83 9f       	mul	r24, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	22 1f       	adc	r18, r18
 8f0:	74 9f       	mul	r23, r20
 8f2:	33 27       	eor	r19, r19
 8f4:	a0 0d       	add	r26, r0
 8f6:	61 1d       	adc	r22, r1
 8f8:	23 1f       	adc	r18, r19
 8fa:	84 9f       	mul	r24, r20
 8fc:	60 0d       	add	r22, r0
 8fe:	21 1d       	adc	r18, r1
 900:	82 2f       	mov	r24, r18
 902:	76 2f       	mov	r23, r22
 904:	6a 2f       	mov	r22, r26
 906:	11 24       	eor	r1, r1
 908:	9f 57       	subi	r25, 0x7F	; 127
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	9a f0       	brmi	.+38     	; 0x934 <__mulsf3_pse+0x88>
 90e:	f1 f0       	breq	.+60     	; 0x94c <__mulsf3_pse+0xa0>
 910:	88 23       	and	r24, r24
 912:	4a f0       	brmi	.+18     	; 0x926 <__mulsf3_pse+0x7a>
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	bb 1f       	adc	r27, r27
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	91 50       	subi	r25, 0x01	; 1
 922:	50 40       	sbci	r21, 0x00	; 0
 924:	a9 f7       	brne	.-22     	; 0x910 <__mulsf3_pse+0x64>
 926:	9e 3f       	cpi	r25, 0xFE	; 254
 928:	51 05       	cpc	r21, r1
 92a:	80 f0       	brcs	.+32     	; 0x94c <__mulsf3_pse+0xa0>
 92c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 930:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	e4 f3       	brlt	.-8      	; 0x930 <__mulsf3_pse+0x84>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	d4 f3       	brlt	.-12     	; 0x930 <__mulsf3_pse+0x84>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	e7 95       	ror	r30
 948:	9f 5f       	subi	r25, 0xFF	; 255
 94a:	c1 f7       	brne	.-16     	; 0x93c <__mulsf3_pse+0x90>
 94c:	fe 2b       	or	r31, r30
 94e:	88 0f       	add	r24, r24
 950:	91 1d       	adc	r25, r1
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <fdevopen>:
 95a:	0f 93       	push	r16
 95c:	1f 93       	push	r17
 95e:	cf 93       	push	r28
 960:	df 93       	push	r29
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	31 f4       	brne	.+12     	; 0x972 <fdevopen+0x18>
 966:	61 15       	cp	r22, r1
 968:	71 05       	cpc	r23, r1
 96a:	19 f4       	brne	.+6      	; 0x972 <fdevopen+0x18>
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	3a c0       	rjmp	.+116    	; 0x9e6 <fdevopen+0x8c>
 972:	8b 01       	movw	r16, r22
 974:	ec 01       	movw	r28, r24
 976:	6e e0       	ldi	r22, 0x0E	; 14
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <calloc>
 982:	fc 01       	movw	r30, r24
 984:	89 2b       	or	r24, r25
 986:	91 f3       	breq	.-28     	; 0x96c <fdevopen+0x12>
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	83 83       	std	Z+3, r24	; 0x03
 98c:	01 15       	cp	r16, r1
 98e:	11 05       	cpc	r17, r1
 990:	71 f0       	breq	.+28     	; 0x9ae <fdevopen+0x54>
 992:	02 87       	std	Z+10, r16	; 0x0a
 994:	13 87       	std	Z+11, r17	; 0x0b
 996:	81 e8       	ldi	r24, 0x81	; 129
 998:	83 83       	std	Z+3, r24	; 0x03
 99a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 99e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 9a2:	89 2b       	or	r24, r25
 9a4:	21 f4       	brne	.+8      	; 0x9ae <fdevopen+0x54>
 9a6:	e0 93 06 20 	sts	0x2006, r30	; 0x802006 <__data_end>
 9aa:	f0 93 07 20 	sts	0x2007, r31	; 0x802007 <__data_end+0x1>
 9ae:	20 97       	sbiw	r28, 0x00	; 0
 9b0:	c9 f0       	breq	.+50     	; 0x9e4 <fdevopen+0x8a>
 9b2:	c0 87       	std	Z+8, r28	; 0x08
 9b4:	d1 87       	std	Z+9, r29	; 0x09
 9b6:	83 81       	ldd	r24, Z+3	; 0x03
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	83 83       	std	Z+3, r24	; 0x03
 9bc:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <__data_end+0x2>
 9c0:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <__data_end+0x3>
 9c4:	89 2b       	or	r24, r25
 9c6:	71 f4       	brne	.+28     	; 0x9e4 <fdevopen+0x8a>
 9c8:	e0 93 08 20 	sts	0x2008, r30	; 0x802008 <__data_end+0x2>
 9cc:	f0 93 09 20 	sts	0x2009, r31	; 0x802009 <__data_end+0x3>
 9d0:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <__data_end+0x4>
 9d4:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <__data_end+0x5>
 9d8:	89 2b       	or	r24, r25
 9da:	21 f4       	brne	.+8      	; 0x9e4 <fdevopen+0x8a>
 9dc:	e0 93 0a 20 	sts	0x200A, r30	; 0x80200a <__data_end+0x4>
 9e0:	f0 93 0b 20 	sts	0x200B, r31	; 0x80200b <__data_end+0x5>
 9e4:	cf 01       	movw	r24, r30
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	1f 91       	pop	r17
 9ec:	0f 91       	pop	r16
 9ee:	08 95       	ret

000009f0 <calloc>:
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	86 9f       	mul	r24, r22
 9fa:	80 01       	movw	r16, r0
 9fc:	87 9f       	mul	r24, r23
 9fe:	10 0d       	add	r17, r0
 a00:	96 9f       	mul	r25, r22
 a02:	10 0d       	add	r17, r0
 a04:	11 24       	eor	r1, r1
 a06:	c8 01       	movw	r24, r16
 a08:	0e 94 14 05 	call	0xa28	; 0xa28 <malloc>
 a0c:	ec 01       	movw	r28, r24
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	29 f0       	breq	.+10     	; 0xa1c <calloc+0x2c>
 a12:	a8 01       	movw	r20, r16
 a14:	60 e0       	ldi	r22, 0x00	; 0
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	0e 94 35 06 	call	0xc6a	; 0xc6a <memset>
 a1c:	ce 01       	movw	r24, r28
 a1e:	df 91       	pop	r29
 a20:	cf 91       	pop	r28
 a22:	1f 91       	pop	r17
 a24:	0f 91       	pop	r16
 a26:	08 95       	ret

00000a28 <malloc>:
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	82 30       	cpi	r24, 0x02	; 2
 a32:	91 05       	cpc	r25, r1
 a34:	10 f4       	brcc	.+4      	; 0xa3a <malloc+0x12>
 a36:	82 e0       	ldi	r24, 0x02	; 2
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__flp>
 a3e:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__flp+0x1>
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	a0 e0       	ldi	r26, 0x00	; 0
 a48:	b0 e0       	ldi	r27, 0x00	; 0
 a4a:	30 97       	sbiw	r30, 0x00	; 0
 a4c:	19 f1       	breq	.+70     	; 0xa94 <malloc+0x6c>
 a4e:	40 81       	ld	r20, Z
 a50:	51 81       	ldd	r21, Z+1	; 0x01
 a52:	02 81       	ldd	r16, Z+2	; 0x02
 a54:	13 81       	ldd	r17, Z+3	; 0x03
 a56:	48 17       	cp	r20, r24
 a58:	59 07       	cpc	r21, r25
 a5a:	c8 f0       	brcs	.+50     	; 0xa8e <malloc+0x66>
 a5c:	84 17       	cp	r24, r20
 a5e:	95 07       	cpc	r25, r21
 a60:	69 f4       	brne	.+26     	; 0xa7c <malloc+0x54>
 a62:	10 97       	sbiw	r26, 0x00	; 0
 a64:	31 f0       	breq	.+12     	; 0xa72 <malloc+0x4a>
 a66:	12 96       	adiw	r26, 0x02	; 2
 a68:	0c 93       	st	X, r16
 a6a:	12 97       	sbiw	r26, 0x02	; 2
 a6c:	13 96       	adiw	r26, 0x03	; 3
 a6e:	1c 93       	st	X, r17
 a70:	27 c0       	rjmp	.+78     	; 0xac0 <malloc+0x98>
 a72:	00 93 0e 20 	sts	0x200E, r16	; 0x80200e <__flp>
 a76:	10 93 0f 20 	sts	0x200F, r17	; 0x80200f <__flp+0x1>
 a7a:	22 c0       	rjmp	.+68     	; 0xac0 <malloc+0x98>
 a7c:	21 15       	cp	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	19 f0       	breq	.+6      	; 0xa88 <malloc+0x60>
 a82:	42 17       	cp	r20, r18
 a84:	53 07       	cpc	r21, r19
 a86:	18 f4       	brcc	.+6      	; 0xa8e <malloc+0x66>
 a88:	9a 01       	movw	r18, r20
 a8a:	bd 01       	movw	r22, r26
 a8c:	ef 01       	movw	r28, r30
 a8e:	df 01       	movw	r26, r30
 a90:	f8 01       	movw	r30, r16
 a92:	db cf       	rjmp	.-74     	; 0xa4a <malloc+0x22>
 a94:	21 15       	cp	r18, r1
 a96:	31 05       	cpc	r19, r1
 a98:	f9 f0       	breq	.+62     	; 0xad8 <malloc+0xb0>
 a9a:	28 1b       	sub	r18, r24
 a9c:	39 0b       	sbc	r19, r25
 a9e:	24 30       	cpi	r18, 0x04	; 4
 aa0:	31 05       	cpc	r19, r1
 aa2:	80 f4       	brcc	.+32     	; 0xac4 <malloc+0x9c>
 aa4:	8a 81       	ldd	r24, Y+2	; 0x02
 aa6:	9b 81       	ldd	r25, Y+3	; 0x03
 aa8:	61 15       	cp	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	21 f0       	breq	.+8      	; 0xab6 <malloc+0x8e>
 aae:	fb 01       	movw	r30, r22
 ab0:	82 83       	std	Z+2, r24	; 0x02
 ab2:	93 83       	std	Z+3, r25	; 0x03
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <malloc+0x96>
 ab6:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__flp>
 aba:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__flp+0x1>
 abe:	fe 01       	movw	r30, r28
 ac0:	32 96       	adiw	r30, 0x02	; 2
 ac2:	44 c0       	rjmp	.+136    	; 0xb4c <malloc+0x124>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e2 0f       	add	r30, r18
 ac8:	f3 1f       	adc	r31, r19
 aca:	81 93       	st	Z+, r24
 acc:	91 93       	st	Z+, r25
 ace:	22 50       	subi	r18, 0x02	; 2
 ad0:	31 09       	sbc	r19, r1
 ad2:	28 83       	st	Y, r18
 ad4:	39 83       	std	Y+1, r19	; 0x01
 ad6:	3a c0       	rjmp	.+116    	; 0xb4c <malloc+0x124>
 ad8:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 adc:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 ae0:	23 2b       	or	r18, r19
 ae2:	41 f4       	brne	.+16     	; 0xaf4 <malloc+0xcc>
 ae4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 ae8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 aec:	20 93 0c 20 	sts	0x200C, r18	; 0x80200c <__brkval>
 af0:	30 93 0d 20 	sts	0x200D, r19	; 0x80200d <__brkval+0x1>
 af4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 af8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 afc:	21 15       	cp	r18, r1
 afe:	31 05       	cpc	r19, r1
 b00:	41 f4       	brne	.+16     	; 0xb12 <malloc+0xea>
 b02:	2d b7       	in	r18, 0x3d	; 61
 b04:	3e b7       	in	r19, 0x3e	; 62
 b06:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 b0a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 b0e:	24 1b       	sub	r18, r20
 b10:	35 0b       	sbc	r19, r21
 b12:	e0 91 0c 20 	lds	r30, 0x200C	; 0x80200c <__brkval>
 b16:	f0 91 0d 20 	lds	r31, 0x200D	; 0x80200d <__brkval+0x1>
 b1a:	e2 17       	cp	r30, r18
 b1c:	f3 07       	cpc	r31, r19
 b1e:	a0 f4       	brcc	.+40     	; 0xb48 <malloc+0x120>
 b20:	2e 1b       	sub	r18, r30
 b22:	3f 0b       	sbc	r19, r31
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	78 f0       	brcs	.+30     	; 0xb48 <malloc+0x120>
 b2a:	ac 01       	movw	r20, r24
 b2c:	4e 5f       	subi	r20, 0xFE	; 254
 b2e:	5f 4f       	sbci	r21, 0xFF	; 255
 b30:	24 17       	cp	r18, r20
 b32:	35 07       	cpc	r19, r21
 b34:	48 f0       	brcs	.+18     	; 0xb48 <malloc+0x120>
 b36:	4e 0f       	add	r20, r30
 b38:	5f 1f       	adc	r21, r31
 b3a:	40 93 0c 20 	sts	0x200C, r20	; 0x80200c <__brkval>
 b3e:	50 93 0d 20 	sts	0x200D, r21	; 0x80200d <__brkval+0x1>
 b42:	81 93       	st	Z+, r24
 b44:	91 93       	st	Z+, r25
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <malloc+0x124>
 b48:	e0 e0       	ldi	r30, 0x00	; 0
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	cf 01       	movw	r24, r30
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	08 95       	ret

00000b58 <free>:
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	00 97       	sbiw	r24, 0x00	; 0
 b5e:	09 f4       	brne	.+2      	; 0xb62 <free+0xa>
 b60:	81 c0       	rjmp	.+258    	; 0xc64 <free+0x10c>
 b62:	fc 01       	movw	r30, r24
 b64:	32 97       	sbiw	r30, 0x02	; 2
 b66:	12 82       	std	Z+2, r1	; 0x02
 b68:	13 82       	std	Z+3, r1	; 0x03
 b6a:	a0 91 0e 20 	lds	r26, 0x200E	; 0x80200e <__flp>
 b6e:	b0 91 0f 20 	lds	r27, 0x200F	; 0x80200f <__flp+0x1>
 b72:	10 97       	sbiw	r26, 0x00	; 0
 b74:	81 f4       	brne	.+32     	; 0xb96 <free+0x3e>
 b76:	20 81       	ld	r18, Z
 b78:	31 81       	ldd	r19, Z+1	; 0x01
 b7a:	82 0f       	add	r24, r18
 b7c:	93 1f       	adc	r25, r19
 b7e:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 b82:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 b86:	28 17       	cp	r18, r24
 b88:	39 07       	cpc	r19, r25
 b8a:	51 f5       	brne	.+84     	; 0xbe0 <free+0x88>
 b8c:	e0 93 0c 20 	sts	0x200C, r30	; 0x80200c <__brkval>
 b90:	f0 93 0d 20 	sts	0x200D, r31	; 0x80200d <__brkval+0x1>
 b94:	67 c0       	rjmp	.+206    	; 0xc64 <free+0x10c>
 b96:	ed 01       	movw	r28, r26
 b98:	20 e0       	ldi	r18, 0x00	; 0
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	ce 17       	cp	r28, r30
 b9e:	df 07       	cpc	r29, r31
 ba0:	40 f4       	brcc	.+16     	; 0xbb2 <free+0x5a>
 ba2:	4a 81       	ldd	r20, Y+2	; 0x02
 ba4:	5b 81       	ldd	r21, Y+3	; 0x03
 ba6:	9e 01       	movw	r18, r28
 ba8:	41 15       	cp	r20, r1
 baa:	51 05       	cpc	r21, r1
 bac:	f1 f0       	breq	.+60     	; 0xbea <free+0x92>
 bae:	ea 01       	movw	r28, r20
 bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <free+0x44>
 bb2:	c2 83       	std	Z+2, r28	; 0x02
 bb4:	d3 83       	std	Z+3, r29	; 0x03
 bb6:	40 81       	ld	r20, Z
 bb8:	51 81       	ldd	r21, Z+1	; 0x01
 bba:	84 0f       	add	r24, r20
 bbc:	95 1f       	adc	r25, r21
 bbe:	c8 17       	cp	r28, r24
 bc0:	d9 07       	cpc	r29, r25
 bc2:	59 f4       	brne	.+22     	; 0xbda <free+0x82>
 bc4:	88 81       	ld	r24, Y
 bc6:	99 81       	ldd	r25, Y+1	; 0x01
 bc8:	84 0f       	add	r24, r20
 bca:	95 1f       	adc	r25, r21
 bcc:	02 96       	adiw	r24, 0x02	; 2
 bce:	80 83       	st	Z, r24
 bd0:	91 83       	std	Z+1, r25	; 0x01
 bd2:	8a 81       	ldd	r24, Y+2	; 0x02
 bd4:	9b 81       	ldd	r25, Y+3	; 0x03
 bd6:	82 83       	std	Z+2, r24	; 0x02
 bd8:	93 83       	std	Z+3, r25	; 0x03
 bda:	21 15       	cp	r18, r1
 bdc:	31 05       	cpc	r19, r1
 bde:	29 f4       	brne	.+10     	; 0xbea <free+0x92>
 be0:	e0 93 0e 20 	sts	0x200E, r30	; 0x80200e <__flp>
 be4:	f0 93 0f 20 	sts	0x200F, r31	; 0x80200f <__flp+0x1>
 be8:	3d c0       	rjmp	.+122    	; 0xc64 <free+0x10c>
 bea:	e9 01       	movw	r28, r18
 bec:	ea 83       	std	Y+2, r30	; 0x02
 bee:	fb 83       	std	Y+3, r31	; 0x03
 bf0:	49 91       	ld	r20, Y+
 bf2:	59 91       	ld	r21, Y+
 bf4:	c4 0f       	add	r28, r20
 bf6:	d5 1f       	adc	r29, r21
 bf8:	ec 17       	cp	r30, r28
 bfa:	fd 07       	cpc	r31, r29
 bfc:	61 f4       	brne	.+24     	; 0xc16 <free+0xbe>
 bfe:	80 81       	ld	r24, Z
 c00:	91 81       	ldd	r25, Z+1	; 0x01
 c02:	84 0f       	add	r24, r20
 c04:	95 1f       	adc	r25, r21
 c06:	02 96       	adiw	r24, 0x02	; 2
 c08:	e9 01       	movw	r28, r18
 c0a:	88 83       	st	Y, r24
 c0c:	99 83       	std	Y+1, r25	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	8a 83       	std	Y+2, r24	; 0x02
 c14:	9b 83       	std	Y+3, r25	; 0x03
 c16:	e0 e0       	ldi	r30, 0x00	; 0
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	12 96       	adiw	r26, 0x02	; 2
 c1c:	8d 91       	ld	r24, X+
 c1e:	9c 91       	ld	r25, X
 c20:	13 97       	sbiw	r26, 0x03	; 3
 c22:	00 97       	sbiw	r24, 0x00	; 0
 c24:	19 f0       	breq	.+6      	; 0xc2c <free+0xd4>
 c26:	fd 01       	movw	r30, r26
 c28:	dc 01       	movw	r26, r24
 c2a:	f7 cf       	rjmp	.-18     	; 0xc1a <free+0xc2>
 c2c:	8d 91       	ld	r24, X+
 c2e:	9c 91       	ld	r25, X
 c30:	11 97       	sbiw	r26, 0x01	; 1
 c32:	9d 01       	movw	r18, r26
 c34:	2e 5f       	subi	r18, 0xFE	; 254
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	82 0f       	add	r24, r18
 c3a:	93 1f       	adc	r25, r19
 c3c:	20 91 0c 20 	lds	r18, 0x200C	; 0x80200c <__brkval>
 c40:	30 91 0d 20 	lds	r19, 0x200D	; 0x80200d <__brkval+0x1>
 c44:	28 17       	cp	r18, r24
 c46:	39 07       	cpc	r19, r25
 c48:	69 f4       	brne	.+26     	; 0xc64 <free+0x10c>
 c4a:	30 97       	sbiw	r30, 0x00	; 0
 c4c:	29 f4       	brne	.+10     	; 0xc58 <free+0x100>
 c4e:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <__flp>
 c52:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <__flp+0x1>
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <free+0x104>
 c58:	12 82       	std	Z+2, r1	; 0x02
 c5a:	13 82       	std	Z+3, r1	; 0x03
 c5c:	a0 93 0c 20 	sts	0x200C, r26	; 0x80200c <__brkval>
 c60:	b0 93 0d 20 	sts	0x200D, r27	; 0x80200d <__brkval+0x1>
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <memset>:
 c6a:	dc 01       	movw	r26, r24
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <memset+0x6>
 c6e:	6d 93       	st	X+, r22
 c70:	41 50       	subi	r20, 0x01	; 1
 c72:	50 40       	sbci	r21, 0x00	; 0
 c74:	e0 f7       	brcc	.-8      	; 0xc6e <memset+0x4>
 c76:	08 95       	ret

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
