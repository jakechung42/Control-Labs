
Mega88_Test_AD_DA_Step_Input_P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c0  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b6  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ed       	ldi	r30, 0xD8	; 216
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	18 d0       	rcall	.+48     	; 0x98 <main>
  68:	35 c3       	rjmp	.+1642   	; 0x6d4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:


// USART Functions

static int uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
  7c:	85 ff       	sbrs	r24, 5
  7e:	fc cf       	rjmp	.-8      	; 0x78 <uart_putchar+0xc>
	UDR0 = c;
  80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	return 0;
}
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <spi_write_read>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0); // Wait until the data transfer is complete
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_write_read+0x2>
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:
	float	adc_input_v;
	float	Error;
	float	Sawtooth, StepInput,Sawtooth_Amplitude, Step_Amplitude, Input_Increment, DAC_output;
	
	//USART Setup
	UBRR0H = MYUBRR >> 8;
  98:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L = MYUBRR;
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	stdout = &mystdout; //Required for printf init
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
  b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>


	// AD initialization
	ADMUX  = 0b00000000; //Input on AD Channel 0
  b4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	ADCSRA = 0b10000111; // ADC on, /128 for a 16 MHz clock, interrupt off
  b8:	87 e8       	ldi	r24, 0x87	; 135
  ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>

	DDRB=0b00101100; //Set Output Ports for the SPI Interface
  be:	8c e2       	ldi	r24, 0x2C	; 44
  c0:	84 b9       	out	0x04, r24	; 4
	DDRD=0b10000010; //Set Output Ports for the Chip select and USART
  c2:	82 e8       	ldi	r24, 0x82	; 130
  c4:	8a b9       	out	0x0a, r24	; 10
	
	// SPI initialization
	SPCR=0b01010010;
  c6:	82 e5       	ldi	r24, 0x52	; 82
  c8:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  ca:	1d bc       	out	0x2d, r1	; 45
	
	// Note if you have print statements active this will slow the control loop dramatically
	
	// Sawtooth and Step Input are in Control Voltage Units (+- 10 volts)
	
	Sawtooth           = -1.0;			// Initial value
  cc:	0f 2e       	mov	r0, r31
  ce:	c1 2c       	mov	r12, r1
  d0:	d1 2c       	mov	r13, r1
  d2:	f0 e8       	ldi	r31, 0x80	; 128
  d4:	ef 2e       	mov	r14, r31
  d6:	ff eb       	ldi	r31, 0xBF	; 191
  d8:	ff 2e       	mov	r15, r31
  da:	f0 2d       	mov	r31, r0
	
	
	while(1)
	{
		// Digitally generated Input wave form
		Sawtooth += Input_Increment;						// Input_Increment
  dc:	2f e6       	ldi	r18, 0x6F	; 111
  de:	32 e1       	ldi	r19, 0x12	; 18
  e0:	43 e8       	ldi	r20, 0x83	; 131
  e2:	5a e3       	ldi	r21, 0x3A	; 58
  e4:	c7 01       	movw	r24, r14
  e6:	b6 01       	movw	r22, r12
  e8:	8d d0       	rcall	.+282    	; 0x204 <__addsf3>
  ea:	6b 01       	movw	r12, r22
  ec:	7c 01       	movw	r14, r24
		if(Sawtooth >= 1.0) Sawtooth = -1.0;                // Sawtooth Input Value (-1 to 1)
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e8       	ldi	r20, 0x80	; 128
  f4:	5f e3       	ldi	r21, 0x3F	; 63
  f6:	87 d2       	rcall	.+1294   	; 0x606 <__gesf2>
  f8:	88 23       	and	r24, r24
  fa:	44 f0       	brlt	.+16     	; 0x10c <main+0x74>
  fc:	0f 2e       	mov	r0, r31
  fe:	c1 2c       	mov	r12, r1
 100:	d1 2c       	mov	r13, r1
 102:	f0 e8       	ldi	r31, 0x80	; 128
 104:	ef 2e       	mov	r14, r31
 106:	ff eb       	ldi	r31, 0xBF	; 191
 108:	ff 2e       	mov	r15, r31
 10a:	f0 2d       	mov	r31, r0
		if(Sawtooth <= 0.0) StepInput = 0;                  // Step Input Value     (0 to 1)
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	a9 01       	movw	r20, r18
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	da d0       	rcall	.+436    	; 0x2cc <__cmpsf2>
 118:	18 16       	cp	r1, r24
 11a:	1c f0       	brlt	.+6      	; 0x122 <main+0x8a>
 11c:	81 2c       	mov	r8, r1
 11e:	91 2c       	mov	r9, r1
 120:	54 01       	movw	r10, r8
		if(Sawtooth > 0.0)  StepInput = 1;                  // Step Input Value		(0 to 1)
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	a9 01       	movw	r20, r18
 128:	c7 01       	movw	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	6c d2       	rcall	.+1240   	; 0x606 <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	44 f4       	brge	.+16     	; 0x142 <main+0xaa>
 132:	0f 2e       	mov	r0, r31
 134:	81 2c       	mov	r8, r1
 136:	91 2c       	mov	r9, r1
 138:	f0 e8       	ldi	r31, 0x80	; 128
 13a:	af 2e       	mov	r10, r31
 13c:	ff e3       	ldi	r31, 0x3F	; 63
 13e:	bf 2e       	mov	r11, r31
 140:	f0 2d       	mov	r31, r0
				
		// Vel_Set_v = Sawtooth*Sawtooth_Amplitude;            // Set Velocity Set Point to either Sawtooth or Step Input Value
		Vel_Set_v = StepInput*Step_Amplitude;						// Set Velocity Set Point to either Sawtooth or Step Input Value
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 ea       	ldi	r20, 0xA0	; 160
 148:	50 e4       	ldi	r21, 0x40	; 64
 14a:	c5 01       	movw	r24, r10
 14c:	b4 01       	movw	r22, r8
 14e:	5f d2       	rcall	.+1214   	; 0x60e <__mulsf3>
 150:	2b 01       	movw	r4, r22
 152:	3c 01       	movw	r6, r24
																	// Note the Velocity Set Point is in Control Voltage Units (+- 10 volts)
		
		ADCSRA = ADCSRA | 0b01000000;  						// Start AD conversion
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
		while ((ADCSRA & 0b01000000) == 0b01000000); 		// Wait while AD conversion is executed
 15e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 162:	86 fd       	sbrc	r24, 6
 164:	fc cf       	rjmp	.-8      	; 0x15e <main+0xc6>

		adc_input = ADCW; 									// Read AD value
 166:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 16a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
		adc_input_v = (float) adc_input*(20./1024.)- 10.0;	// Convert the adc_input digital value (0 to 1024) to a voltage
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	44 d1       	rcall	.+648    	; 0x3fc <__floatunsisf>
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 ea       	ldi	r20, 0xA0	; 160
 17a:	5c e3       	ldi	r21, 0x3C	; 60
 17c:	48 d2       	rcall	.+1168   	; 0x60e <__mulsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e2       	ldi	r20, 0x20	; 32
 184:	51 e4       	ldi	r21, 0x41	; 65
 186:	3d d0       	rcall	.+122    	; 0x202 <__subsf3>
 188:	9b 01       	movw	r18, r22
 18a:	ac 01       	movw	r20, r24
															// Note the input is bipolar +- 10 volts
															// Note that the (20./1024.) term needs the decimal point
															// or else it is interrupted as an integer and the result is zero

		// Control Equation
		Error   = (Vel_Set_v - adc_input_v);			// Error (units are voltage +- 10 volts)
 18c:	c3 01       	movw	r24, r6
 18e:	b2 01       	movw	r22, r4
 190:	38 d0       	rcall	.+112    	; 0x202 <__subsf3>
 192:	2b 01       	movw	r4, r22
 194:	3c 01       	movw	r6, r24
		Control = Kp * Error;  						    // Control (units are voltage  +- 10 volts)

		if(fabs(Control) >= Max_Voltage)				// Check Maximum voltage
 196:	9f 77       	andi	r25, 0x7F	; 127
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 ec       	ldi	r20, 0xC0	; 192
 19e:	50 e4       	ldi	r21, 0x40	; 64
 1a0:	32 d2       	rcall	.+1124   	; 0x606 <__gesf2>
 1a2:	88 23       	and	r24, r24
 1a4:	54 f0       	brlt	.+20     	; 0x1ba <main+0x122>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	a0 ec       	ldi	r26, 0xC0	; 192
 1ac:	b0 e4       	ldi	r27, 0x40	; 64
 1ae:	9c 01       	movw	r18, r24
 1b0:	ad 01       	movw	r20, r26
 1b2:	77 fa       	bst	r7, 7
 1b4:	57 f9       	bld	r21, 7
 1b6:	29 01       	movw	r4, r18
 1b8:	3a 01       	movw	r6, r20
		Control = copysign(Max_Voltage,Control);

		adc_output = floor((Control + 10.)*4096./20.);  			// Convert control voltage to a digital number for output
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e2       	ldi	r20, 0x20	; 32
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	c3 01       	movw	r24, r6
 1c4:	b2 01       	movw	r22, r4
 1c6:	1e d0       	rcall	.+60     	; 0x204 <__addsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e8       	ldi	r20, 0x80	; 128
 1ce:	55 e4       	ldi	r21, 0x45	; 69
 1d0:	1e d2       	rcall	.+1084   	; 0x60e <__mulsf3>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 ea       	ldi	r20, 0xA0	; 160
 1d8:	51 e4       	ldi	r21, 0x41	; 65
 1da:	7c d0       	rcall	.+248    	; 0x2d4 <__divsf3>
 1dc:	4c d1       	rcall	.+664    	; 0x476 <floor>
 1de:	e2 d0       	rcall	.+452    	; 0x3a4 <__fixunssfsi>
 1e0:	2b 01       	movw	r4, r22
 1e2:	3c 01       	movw	r6, r24
		
		// adc_output = floor((Vel_Set_v + 10.)*4096./20.);			// Uncomment this line to temporarily check the input function by outputting it to the DAC
		
		// Output adc_output to DAC
		spi_data_0 = 0x00; 								// Zero spi_data_0
		spi_data_0 = (adc_output & 0x0F00) >> 8; 		// Set up the first byte to write by mapping bits 8-11
 1e4:	cb 01       	movw	r24, r22
 1e6:	88 27       	eor	r24, r24
 1e8:	9f 70       	andi	r25, 0x0F	; 15
		// to the lower 4 bit positions and
		spi_data_0 = spi_data_0 + 0b00110000; 			// Adding the upper 4 DA control bits
		spi_data_1 = (adc_output & 0xFF); 				// Set up the second byte to write by mapping
		// bits 0-7 to the lower 8 bit positions
		cbi(PORTD,7); 									// Activate the chip - set chip select to zero
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	8b b9       	out	0x0b, r24	; 11
		dummy_read = spi_write_read(spi_data_0); 		// Write/Read first byte
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	89 0f       	add	r24, r25
 1f4:	4b df       	rcall	.-362    	; 0x8c <spi_write_read>
		dummy_read = spi_write_read(spi_data_1); 		// Write/Read second byte
 1f6:	84 2d       	mov	r24, r4
 1f8:	49 df       	rcall	.-366    	; 0x8c <spi_write_read>
		sbi(PORTD,7); 									// Release the chip - set chip select to one
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8b b9       	out	0x0b, r24	; 11
	}
 200:	6d cf       	rjmp	.-294    	; 0xdc <main+0x44>

00000202 <__subsf3>:
 202:	50 58       	subi	r21, 0x80	; 128

00000204 <__addsf3>:
 204:	bb 27       	eor	r27, r27
 206:	aa 27       	eor	r26, r26
 208:	0e d0       	rcall	.+28     	; 0x226 <__addsf3x>
 20a:	ac c1       	rjmp	.+856    	; 0x564 <__fp_round>
 20c:	9d d1       	rcall	.+826    	; 0x548 <__fp_pscA>
 20e:	30 f0       	brcs	.+12     	; 0x21c <__addsf3+0x18>
 210:	a2 d1       	rcall	.+836    	; 0x556 <__fp_pscB>
 212:	20 f0       	brcs	.+8      	; 0x21c <__addsf3+0x18>
 214:	31 f4       	brne	.+12     	; 0x222 <__addsf3+0x1e>
 216:	9f 3f       	cpi	r25, 0xFF	; 255
 218:	11 f4       	brne	.+4      	; 0x21e <__addsf3+0x1a>
 21a:	1e f4       	brtc	.+6      	; 0x222 <__addsf3+0x1e>
 21c:	92 c1       	rjmp	.+804    	; 0x542 <__fp_nan>
 21e:	0e f4       	brtc	.+2      	; 0x222 <__addsf3+0x1e>
 220:	e0 95       	com	r30
 222:	e7 fb       	bst	r30, 7
 224:	5f c1       	rjmp	.+702    	; 0x4e4 <__fp_inf>

00000226 <__addsf3x>:
 226:	e9 2f       	mov	r30, r25
 228:	ae d1       	rcall	.+860    	; 0x586 <__fp_split3>
 22a:	80 f3       	brcs	.-32     	; 0x20c <__addsf3+0x8>
 22c:	ba 17       	cp	r27, r26
 22e:	62 07       	cpc	r22, r18
 230:	73 07       	cpc	r23, r19
 232:	84 07       	cpc	r24, r20
 234:	95 07       	cpc	r25, r21
 236:	18 f0       	brcs	.+6      	; 0x23e <__addsf3x+0x18>
 238:	71 f4       	brne	.+28     	; 0x256 <__addsf3x+0x30>
 23a:	9e f5       	brtc	.+102    	; 0x2a2 <__addsf3x+0x7c>
 23c:	dd c1       	rjmp	.+954    	; 0x5f8 <__fp_zero>
 23e:	0e f4       	brtc	.+2      	; 0x242 <__addsf3x+0x1c>
 240:	e0 95       	com	r30
 242:	0b 2e       	mov	r0, r27
 244:	ba 2f       	mov	r27, r26
 246:	a0 2d       	mov	r26, r0
 248:	0b 01       	movw	r0, r22
 24a:	b9 01       	movw	r22, r18
 24c:	90 01       	movw	r18, r0
 24e:	0c 01       	movw	r0, r24
 250:	ca 01       	movw	r24, r20
 252:	a0 01       	movw	r20, r0
 254:	11 24       	eor	r1, r1
 256:	ff 27       	eor	r31, r31
 258:	59 1b       	sub	r21, r25
 25a:	99 f0       	breq	.+38     	; 0x282 <__addsf3x+0x5c>
 25c:	59 3f       	cpi	r21, 0xF9	; 249
 25e:	50 f4       	brcc	.+20     	; 0x274 <__addsf3x+0x4e>
 260:	50 3e       	cpi	r21, 0xE0	; 224
 262:	68 f1       	brcs	.+90     	; 0x2be <__addsf3x+0x98>
 264:	1a 16       	cp	r1, r26
 266:	f0 40       	sbci	r31, 0x00	; 0
 268:	a2 2f       	mov	r26, r18
 26a:	23 2f       	mov	r18, r19
 26c:	34 2f       	mov	r19, r20
 26e:	44 27       	eor	r20, r20
 270:	58 5f       	subi	r21, 0xF8	; 248
 272:	f3 cf       	rjmp	.-26     	; 0x25a <__addsf3x+0x34>
 274:	46 95       	lsr	r20
 276:	37 95       	ror	r19
 278:	27 95       	ror	r18
 27a:	a7 95       	ror	r26
 27c:	f0 40       	sbci	r31, 0x00	; 0
 27e:	53 95       	inc	r21
 280:	c9 f7       	brne	.-14     	; 0x274 <__addsf3x+0x4e>
 282:	7e f4       	brtc	.+30     	; 0x2a2 <__addsf3x+0x7c>
 284:	1f 16       	cp	r1, r31
 286:	ba 0b       	sbc	r27, r26
 288:	62 0b       	sbc	r22, r18
 28a:	73 0b       	sbc	r23, r19
 28c:	84 0b       	sbc	r24, r20
 28e:	ba f0       	brmi	.+46     	; 0x2be <__addsf3x+0x98>
 290:	91 50       	subi	r25, 0x01	; 1
 292:	a1 f0       	breq	.+40     	; 0x2bc <__addsf3x+0x96>
 294:	ff 0f       	add	r31, r31
 296:	bb 1f       	adc	r27, r27
 298:	66 1f       	adc	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	88 1f       	adc	r24, r24
 29e:	c2 f7       	brpl	.-16     	; 0x290 <__addsf3x+0x6a>
 2a0:	0e c0       	rjmp	.+28     	; 0x2be <__addsf3x+0x98>
 2a2:	ba 0f       	add	r27, r26
 2a4:	62 1f       	adc	r22, r18
 2a6:	73 1f       	adc	r23, r19
 2a8:	84 1f       	adc	r24, r20
 2aa:	48 f4       	brcc	.+18     	; 0x2be <__addsf3x+0x98>
 2ac:	87 95       	ror	r24
 2ae:	77 95       	ror	r23
 2b0:	67 95       	ror	r22
 2b2:	b7 95       	ror	r27
 2b4:	f7 95       	ror	r31
 2b6:	9e 3f       	cpi	r25, 0xFE	; 254
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <__addsf3x+0x96>
 2ba:	b3 cf       	rjmp	.-154    	; 0x222 <__addsf3+0x1e>
 2bc:	93 95       	inc	r25
 2be:	88 0f       	add	r24, r24
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <__addsf3x+0x9e>
 2c2:	99 27       	eor	r25, r25
 2c4:	ee 0f       	add	r30, r30
 2c6:	97 95       	ror	r25
 2c8:	87 95       	ror	r24
 2ca:	08 95       	ret

000002cc <__cmpsf2>:
 2cc:	e7 d0       	rcall	.+462    	; 0x49c <__fp_cmp>
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <__cmpsf2+0x6>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret

000002d4 <__divsf3>:
 2d4:	0c d0       	rcall	.+24     	; 0x2ee <__divsf3x>
 2d6:	46 c1       	rjmp	.+652    	; 0x564 <__fp_round>
 2d8:	3e d1       	rcall	.+636    	; 0x556 <__fp_pscB>
 2da:	40 f0       	brcs	.+16     	; 0x2ec <__divsf3+0x18>
 2dc:	35 d1       	rcall	.+618    	; 0x548 <__fp_pscA>
 2de:	30 f0       	brcs	.+12     	; 0x2ec <__divsf3+0x18>
 2e0:	21 f4       	brne	.+8      	; 0x2ea <__divsf3+0x16>
 2e2:	5f 3f       	cpi	r21, 0xFF	; 255
 2e4:	19 f0       	breq	.+6      	; 0x2ec <__divsf3+0x18>
 2e6:	fe c0       	rjmp	.+508    	; 0x4e4 <__fp_inf>
 2e8:	51 11       	cpse	r21, r1
 2ea:	87 c1       	rjmp	.+782    	; 0x5fa <__fp_szero>
 2ec:	2a c1       	rjmp	.+596    	; 0x542 <__fp_nan>

000002ee <__divsf3x>:
 2ee:	4b d1       	rcall	.+662    	; 0x586 <__fp_split3>
 2f0:	98 f3       	brcs	.-26     	; 0x2d8 <__divsf3+0x4>

000002f2 <__divsf3_pse>:
 2f2:	99 23       	and	r25, r25
 2f4:	c9 f3       	breq	.-14     	; 0x2e8 <__divsf3+0x14>
 2f6:	55 23       	and	r21, r21
 2f8:	b1 f3       	breq	.-20     	; 0x2e6 <__divsf3+0x12>
 2fa:	95 1b       	sub	r25, r21
 2fc:	55 0b       	sbc	r21, r21
 2fe:	bb 27       	eor	r27, r27
 300:	aa 27       	eor	r26, r26
 302:	62 17       	cp	r22, r18
 304:	73 07       	cpc	r23, r19
 306:	84 07       	cpc	r24, r20
 308:	38 f0       	brcs	.+14     	; 0x318 <__divsf3_pse+0x26>
 30a:	9f 5f       	subi	r25, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	44 1f       	adc	r20, r20
 314:	aa 1f       	adc	r26, r26
 316:	a9 f3       	breq	.-22     	; 0x302 <__divsf3_pse+0x10>
 318:	33 d0       	rcall	.+102    	; 0x380 <__divsf3_pse+0x8e>
 31a:	0e 2e       	mov	r0, r30
 31c:	3a f0       	brmi	.+14     	; 0x32c <__divsf3_pse+0x3a>
 31e:	e0 e8       	ldi	r30, 0x80	; 128
 320:	30 d0       	rcall	.+96     	; 0x382 <__divsf3_pse+0x90>
 322:	91 50       	subi	r25, 0x01	; 1
 324:	50 40       	sbci	r21, 0x00	; 0
 326:	e6 95       	lsr	r30
 328:	00 1c       	adc	r0, r0
 32a:	ca f7       	brpl	.-14     	; 0x31e <__divsf3_pse+0x2c>
 32c:	29 d0       	rcall	.+82     	; 0x380 <__divsf3_pse+0x8e>
 32e:	fe 2f       	mov	r31, r30
 330:	27 d0       	rcall	.+78     	; 0x380 <__divsf3_pse+0x8e>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	bb 1f       	adc	r27, r27
 33a:	26 17       	cp	r18, r22
 33c:	37 07       	cpc	r19, r23
 33e:	48 07       	cpc	r20, r24
 340:	ab 07       	cpc	r26, r27
 342:	b0 e8       	ldi	r27, 0x80	; 128
 344:	09 f0       	breq	.+2      	; 0x348 <__divsf3_pse+0x56>
 346:	bb 0b       	sbc	r27, r27
 348:	80 2d       	mov	r24, r0
 34a:	bf 01       	movw	r22, r30
 34c:	ff 27       	eor	r31, r31
 34e:	93 58       	subi	r25, 0x83	; 131
 350:	5f 4f       	sbci	r21, 0xFF	; 255
 352:	2a f0       	brmi	.+10     	; 0x35e <__divsf3_pse+0x6c>
 354:	9e 3f       	cpi	r25, 0xFE	; 254
 356:	51 05       	cpc	r21, r1
 358:	68 f0       	brcs	.+26     	; 0x374 <__divsf3_pse+0x82>
 35a:	c4 c0       	rjmp	.+392    	; 0x4e4 <__fp_inf>
 35c:	4e c1       	rjmp	.+668    	; 0x5fa <__fp_szero>
 35e:	5f 3f       	cpi	r21, 0xFF	; 255
 360:	ec f3       	brlt	.-6      	; 0x35c <__divsf3_pse+0x6a>
 362:	98 3e       	cpi	r25, 0xE8	; 232
 364:	dc f3       	brlt	.-10     	; 0x35c <__divsf3_pse+0x6a>
 366:	86 95       	lsr	r24
 368:	77 95       	ror	r23
 36a:	67 95       	ror	r22
 36c:	b7 95       	ror	r27
 36e:	f7 95       	ror	r31
 370:	9f 5f       	subi	r25, 0xFF	; 255
 372:	c9 f7       	brne	.-14     	; 0x366 <__divsf3_pse+0x74>
 374:	88 0f       	add	r24, r24
 376:	91 1d       	adc	r25, r1
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	97 f9       	bld	r25, 7
 37e:	08 95       	ret
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	bb 1f       	adc	r27, r27
 38a:	62 17       	cp	r22, r18
 38c:	73 07       	cpc	r23, r19
 38e:	84 07       	cpc	r24, r20
 390:	ba 07       	cpc	r27, r26
 392:	20 f0       	brcs	.+8      	; 0x39c <__divsf3_pse+0xaa>
 394:	62 1b       	sub	r22, r18
 396:	73 0b       	sbc	r23, r19
 398:	84 0b       	sbc	r24, r20
 39a:	ba 0b       	sbc	r27, r26
 39c:	ee 1f       	adc	r30, r30
 39e:	88 f7       	brcc	.-30     	; 0x382 <__divsf3_pse+0x90>
 3a0:	e0 95       	com	r30
 3a2:	08 95       	ret

000003a4 <__fixunssfsi>:
 3a4:	f8 d0       	rcall	.+496    	; 0x596 <__fp_splitA>
 3a6:	88 f0       	brcs	.+34     	; 0x3ca <__fixunssfsi+0x26>
 3a8:	9f 57       	subi	r25, 0x7F	; 127
 3aa:	90 f0       	brcs	.+36     	; 0x3d0 <__fixunssfsi+0x2c>
 3ac:	b9 2f       	mov	r27, r25
 3ae:	99 27       	eor	r25, r25
 3b0:	b7 51       	subi	r27, 0x17	; 23
 3b2:	a0 f0       	brcs	.+40     	; 0x3dc <__fixunssfsi+0x38>
 3b4:	d1 f0       	breq	.+52     	; 0x3ea <__fixunssfsi+0x46>
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	1a f0       	brmi	.+6      	; 0x3c6 <__fixunssfsi+0x22>
 3c0:	ba 95       	dec	r27
 3c2:	c9 f7       	brne	.-14     	; 0x3b6 <__fixunssfsi+0x12>
 3c4:	12 c0       	rjmp	.+36     	; 0x3ea <__fixunssfsi+0x46>
 3c6:	b1 30       	cpi	r27, 0x01	; 1
 3c8:	81 f0       	breq	.+32     	; 0x3ea <__fixunssfsi+0x46>
 3ca:	16 d1       	rcall	.+556    	; 0x5f8 <__fp_zero>
 3cc:	b1 e0       	ldi	r27, 0x01	; 1
 3ce:	08 95       	ret
 3d0:	13 c1       	rjmp	.+550    	; 0x5f8 <__fp_zero>
 3d2:	67 2f       	mov	r22, r23
 3d4:	78 2f       	mov	r23, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	b8 5f       	subi	r27, 0xF8	; 248
 3da:	39 f0       	breq	.+14     	; 0x3ea <__fixunssfsi+0x46>
 3dc:	b9 3f       	cpi	r27, 0xF9	; 249
 3de:	cc f3       	brlt	.-14     	; 0x3d2 <__fixunssfsi+0x2e>
 3e0:	86 95       	lsr	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b3 95       	inc	r27
 3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__fixunssfsi+0x3c>
 3ea:	3e f4       	brtc	.+14     	; 0x3fa <__fixunssfsi+0x56>
 3ec:	90 95       	com	r25
 3ee:	80 95       	com	r24
 3f0:	70 95       	com	r23
 3f2:	61 95       	neg	r22
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	8f 4f       	sbci	r24, 0xFF	; 255
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	08 95       	ret

000003fc <__floatunsisf>:
 3fc:	e8 94       	clt
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <__floatsisf+0x12>

00000400 <__floatsisf>:
 400:	97 fb       	bst	r25, 7
 402:	3e f4       	brtc	.+14     	; 0x412 <__floatsisf+0x12>
 404:	90 95       	com	r25
 406:	80 95       	com	r24
 408:	70 95       	com	r23
 40a:	61 95       	neg	r22
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	99 23       	and	r25, r25
 414:	a9 f0       	breq	.+42     	; 0x440 <__floatsisf+0x40>
 416:	f9 2f       	mov	r31, r25
 418:	96 e9       	ldi	r25, 0x96	; 150
 41a:	bb 27       	eor	r27, r27
 41c:	93 95       	inc	r25
 41e:	f6 95       	lsr	r31
 420:	87 95       	ror	r24
 422:	77 95       	ror	r23
 424:	67 95       	ror	r22
 426:	b7 95       	ror	r27
 428:	f1 11       	cpse	r31, r1
 42a:	f8 cf       	rjmp	.-16     	; 0x41c <__floatsisf+0x1c>
 42c:	fa f4       	brpl	.+62     	; 0x46c <__floatsisf+0x6c>
 42e:	bb 0f       	add	r27, r27
 430:	11 f4       	brne	.+4      	; 0x436 <__floatsisf+0x36>
 432:	60 ff       	sbrs	r22, 0
 434:	1b c0       	rjmp	.+54     	; 0x46c <__floatsisf+0x6c>
 436:	6f 5f       	subi	r22, 0xFF	; 255
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	16 c0       	rjmp	.+44     	; 0x46c <__floatsisf+0x6c>
 440:	88 23       	and	r24, r24
 442:	11 f0       	breq	.+4      	; 0x448 <__floatsisf+0x48>
 444:	96 e9       	ldi	r25, 0x96	; 150
 446:	11 c0       	rjmp	.+34     	; 0x46a <__floatsisf+0x6a>
 448:	77 23       	and	r23, r23
 44a:	21 f0       	breq	.+8      	; 0x454 <__floatsisf+0x54>
 44c:	9e e8       	ldi	r25, 0x8E	; 142
 44e:	87 2f       	mov	r24, r23
 450:	76 2f       	mov	r23, r22
 452:	05 c0       	rjmp	.+10     	; 0x45e <__floatsisf+0x5e>
 454:	66 23       	and	r22, r22
 456:	71 f0       	breq	.+28     	; 0x474 <__floatsisf+0x74>
 458:	96 e8       	ldi	r25, 0x86	; 134
 45a:	86 2f       	mov	r24, r22
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	2a f0       	brmi	.+10     	; 0x46c <__floatsisf+0x6c>
 462:	9a 95       	dec	r25
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	da f7       	brpl	.-10     	; 0x462 <__floatsisf+0x62>
 46c:	88 0f       	add	r24, r24
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	97 f9       	bld	r25, 7
 474:	08 95       	ret

00000476 <floor>:
 476:	a9 d0       	rcall	.+338    	; 0x5ca <__fp_trunc>
 478:	80 f0       	brcs	.+32     	; 0x49a <floor+0x24>
 47a:	9f 37       	cpi	r25, 0x7F	; 127
 47c:	40 f4       	brcc	.+16     	; 0x48e <floor+0x18>
 47e:	91 11       	cpse	r25, r1
 480:	0e f0       	brts	.+2      	; 0x484 <floor+0xe>
 482:	bb c0       	rjmp	.+374    	; 0x5fa <__fp_szero>
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	9f eb       	ldi	r25, 0xBF	; 191
 48c:	08 95       	ret
 48e:	26 f4       	brtc	.+8      	; 0x498 <floor+0x22>
 490:	1b 16       	cp	r1, r27
 492:	61 1d       	adc	r22, r1
 494:	71 1d       	adc	r23, r1
 496:	81 1d       	adc	r24, r1
 498:	2b c0       	rjmp	.+86     	; 0x4f0 <__fp_mintl>
 49a:	45 c0       	rjmp	.+138    	; 0x526 <__fp_mpack>

0000049c <__fp_cmp>:
 49c:	99 0f       	add	r25, r25
 49e:	00 08       	sbc	r0, r0
 4a0:	55 0f       	add	r21, r21
 4a2:	aa 0b       	sbc	r26, r26
 4a4:	e0 e8       	ldi	r30, 0x80	; 128
 4a6:	fe ef       	ldi	r31, 0xFE	; 254
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	e8 07       	cpc	r30, r24
 4ae:	f9 07       	cpc	r31, r25
 4b0:	c0 f0       	brcs	.+48     	; 0x4e2 <__fp_cmp+0x46>
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	e4 07       	cpc	r30, r20
 4b8:	f5 07       	cpc	r31, r21
 4ba:	98 f0       	brcs	.+38     	; 0x4e2 <__fp_cmp+0x46>
 4bc:	62 1b       	sub	r22, r18
 4be:	73 0b       	sbc	r23, r19
 4c0:	84 0b       	sbc	r24, r20
 4c2:	95 0b       	sbc	r25, r21
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <__fp_cmp+0x38>
 4c6:	0a 26       	eor	r0, r26
 4c8:	61 f0       	breq	.+24     	; 0x4e2 <__fp_cmp+0x46>
 4ca:	23 2b       	or	r18, r19
 4cc:	24 2b       	or	r18, r20
 4ce:	25 2b       	or	r18, r21
 4d0:	21 f4       	brne	.+8      	; 0x4da <__fp_cmp+0x3e>
 4d2:	08 95       	ret
 4d4:	0a 26       	eor	r0, r26
 4d6:	09 f4       	brne	.+2      	; 0x4da <__fp_cmp+0x3e>
 4d8:	a1 40       	sbci	r26, 0x01	; 1
 4da:	a6 95       	lsr	r26
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	81 1d       	adc	r24, r1
 4e0:	81 1d       	adc	r24, r1
 4e2:	08 95       	ret

000004e4 <__fp_inf>:
 4e4:	97 f9       	bld	r25, 7
 4e6:	9f 67       	ori	r25, 0x7F	; 127
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__fp_mintl>:
 4f0:	88 23       	and	r24, r24
 4f2:	71 f4       	brne	.+28     	; 0x510 <__stack+0x11>
 4f4:	77 23       	and	r23, r23
 4f6:	21 f0       	breq	.+8      	; 0x500 <__stack+0x1>
 4f8:	98 50       	subi	r25, 0x08	; 8
 4fa:	87 2b       	or	r24, r23
 4fc:	76 2f       	mov	r23, r22
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <__stack+0xf>
 500:	66 23       	and	r22, r22
 502:	11 f4       	brne	.+4      	; 0x508 <__stack+0x9>
 504:	99 27       	eor	r25, r25
 506:	0d c0       	rjmp	.+26     	; 0x522 <__stack+0x23>
 508:	90 51       	subi	r25, 0x10	; 16
 50a:	86 2b       	or	r24, r22
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	2a f0       	brmi	.+10     	; 0x51c <__stack+0x1d>
 512:	9a 95       	dec	r25
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	da f7       	brpl	.-10     	; 0x512 <__stack+0x13>
 51c:	88 0f       	add	r24, r24
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__fp_mpack>:
 526:	9f 3f       	cpi	r25, 0xFF	; 255
 528:	31 f0       	breq	.+12     	; 0x536 <__fp_mpack_finite+0xc>

0000052a <__fp_mpack_finite>:
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	20 f4       	brcc	.+8      	; 0x536 <__fp_mpack_finite+0xc>
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	88 0f       	add	r24, r24
 538:	91 1d       	adc	r25, r1
 53a:	96 95       	lsr	r25
 53c:	87 95       	ror	r24
 53e:	97 f9       	bld	r25, 7
 540:	08 95       	ret

00000542 <__fp_nan>:
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	80 ec       	ldi	r24, 0xC0	; 192
 546:	08 95       	ret

00000548 <__fp_pscA>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	09 06       	cpc	r0, r25
 554:	08 95       	ret

00000556 <__fp_pscB>:
 556:	00 24       	eor	r0, r0
 558:	0a 94       	dec	r0
 55a:	12 16       	cp	r1, r18
 55c:	13 06       	cpc	r1, r19
 55e:	14 06       	cpc	r1, r20
 560:	05 06       	cpc	r0, r21
 562:	08 95       	ret

00000564 <__fp_round>:
 564:	09 2e       	mov	r0, r25
 566:	03 94       	inc	r0
 568:	00 0c       	add	r0, r0
 56a:	11 f4       	brne	.+4      	; 0x570 <__fp_round+0xc>
 56c:	88 23       	and	r24, r24
 56e:	52 f0       	brmi	.+20     	; 0x584 <__fp_round+0x20>
 570:	bb 0f       	add	r27, r27
 572:	40 f4       	brcc	.+16     	; 0x584 <__fp_round+0x20>
 574:	bf 2b       	or	r27, r31
 576:	11 f4       	brne	.+4      	; 0x57c <__fp_round+0x18>
 578:	60 ff       	sbrs	r22, 0
 57a:	04 c0       	rjmp	.+8      	; 0x584 <__fp_round+0x20>
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__fp_split3>:
 586:	57 fd       	sbrc	r21, 7
 588:	90 58       	subi	r25, 0x80	; 128
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	59 f0       	breq	.+22     	; 0x5a6 <__fp_splitA+0x10>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	71 f0       	breq	.+28     	; 0x5b0 <__fp_splitA+0x1a>
 594:	47 95       	ror	r20

00000596 <__fp_splitA>:
 596:	88 0f       	add	r24, r24
 598:	97 fb       	bst	r25, 7
 59a:	99 1f       	adc	r25, r25
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__fp_splitA+0x20>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__fp_splitA+0x2a>
 5a2:	87 95       	ror	r24
 5a4:	08 95       	ret
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	f2 cf       	rjmp	.-28     	; 0x594 <__fp_split3+0xe>
 5b0:	46 95       	lsr	r20
 5b2:	f1 df       	rcall	.-30     	; 0x596 <__fp_splitA>
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__fp_splitA+0x30>
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	f1 cf       	rjmp	.-30     	; 0x5a2 <__fp_splitA+0xc>
 5c0:	86 95       	lsr	r24
 5c2:	71 05       	cpc	r23, r1
 5c4:	61 05       	cpc	r22, r1
 5c6:	08 94       	sec
 5c8:	08 95       	ret

000005ca <__fp_trunc>:
 5ca:	e5 df       	rcall	.-54     	; 0x596 <__fp_splitA>
 5cc:	a0 f0       	brcs	.+40     	; 0x5f6 <__fp_trunc+0x2c>
 5ce:	be e7       	ldi	r27, 0x7E	; 126
 5d0:	b9 17       	cp	r27, r25
 5d2:	88 f4       	brcc	.+34     	; 0x5f6 <__fp_trunc+0x2c>
 5d4:	bb 27       	eor	r27, r27
 5d6:	9f 38       	cpi	r25, 0x8F	; 143
 5d8:	60 f4       	brcc	.+24     	; 0x5f2 <__fp_trunc+0x28>
 5da:	16 16       	cp	r1, r22
 5dc:	b1 1d       	adc	r27, r1
 5de:	67 2f       	mov	r22, r23
 5e0:	78 2f       	mov	r23, r24
 5e2:	88 27       	eor	r24, r24
 5e4:	98 5f       	subi	r25, 0xF8	; 248
 5e6:	f7 cf       	rjmp	.-18     	; 0x5d6 <__fp_trunc+0xc>
 5e8:	86 95       	lsr	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b1 1d       	adc	r27, r1
 5f0:	93 95       	inc	r25
 5f2:	96 39       	cpi	r25, 0x96	; 150
 5f4:	c8 f3       	brcs	.-14     	; 0x5e8 <__fp_trunc+0x1e>
 5f6:	08 95       	ret

000005f8 <__fp_zero>:
 5f8:	e8 94       	clt

000005fa <__fp_szero>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	66 27       	eor	r22, r22
 5fe:	77 27       	eor	r23, r23
 600:	cb 01       	movw	r24, r22
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__gesf2>:
 606:	4a df       	rcall	.-364    	; 0x49c <__fp_cmp>
 608:	08 f4       	brcc	.+2      	; 0x60c <__gesf2+0x6>
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0b d0       	rcall	.+22     	; 0x626 <__mulsf3x>
 610:	a9 cf       	rjmp	.-174    	; 0x564 <__fp_round>
 612:	9a df       	rcall	.-204    	; 0x548 <__fp_pscA>
 614:	28 f0       	brcs	.+10     	; 0x620 <__mulsf3+0x12>
 616:	9f df       	rcall	.-194    	; 0x556 <__fp_pscB>
 618:	18 f0       	brcs	.+6      	; 0x620 <__mulsf3+0x12>
 61a:	95 23       	and	r25, r21
 61c:	09 f0       	breq	.+2      	; 0x620 <__mulsf3+0x12>
 61e:	62 cf       	rjmp	.-316    	; 0x4e4 <__fp_inf>
 620:	90 cf       	rjmp	.-224    	; 0x542 <__fp_nan>
 622:	11 24       	eor	r1, r1
 624:	ea cf       	rjmp	.-44     	; 0x5fa <__fp_szero>

00000626 <__mulsf3x>:
 626:	af df       	rcall	.-162    	; 0x586 <__fp_split3>
 628:	a0 f3       	brcs	.-24     	; 0x612 <__mulsf3+0x4>

0000062a <__mulsf3_pse>:
 62a:	95 9f       	mul	r25, r21
 62c:	d1 f3       	breq	.-12     	; 0x622 <__mulsf3+0x14>
 62e:	95 0f       	add	r25, r21
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	55 1f       	adc	r21, r21
 634:	62 9f       	mul	r22, r18
 636:	f0 01       	movw	r30, r0
 638:	72 9f       	mul	r23, r18
 63a:	bb 27       	eor	r27, r27
 63c:	f0 0d       	add	r31, r0
 63e:	b1 1d       	adc	r27, r1
 640:	63 9f       	mul	r22, r19
 642:	aa 27       	eor	r26, r26
 644:	f0 0d       	add	r31, r0
 646:	b1 1d       	adc	r27, r1
 648:	aa 1f       	adc	r26, r26
 64a:	64 9f       	mul	r22, r20
 64c:	66 27       	eor	r22, r22
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	66 1f       	adc	r22, r22
 654:	82 9f       	mul	r24, r18
 656:	22 27       	eor	r18, r18
 658:	b0 0d       	add	r27, r0
 65a:	a1 1d       	adc	r26, r1
 65c:	62 1f       	adc	r22, r18
 65e:	73 9f       	mul	r23, r19
 660:	b0 0d       	add	r27, r0
 662:	a1 1d       	adc	r26, r1
 664:	62 1f       	adc	r22, r18
 666:	83 9f       	mul	r24, r19
 668:	a0 0d       	add	r26, r0
 66a:	61 1d       	adc	r22, r1
 66c:	22 1f       	adc	r18, r18
 66e:	74 9f       	mul	r23, r20
 670:	33 27       	eor	r19, r19
 672:	a0 0d       	add	r26, r0
 674:	61 1d       	adc	r22, r1
 676:	23 1f       	adc	r18, r19
 678:	84 9f       	mul	r24, r20
 67a:	60 0d       	add	r22, r0
 67c:	21 1d       	adc	r18, r1
 67e:	82 2f       	mov	r24, r18
 680:	76 2f       	mov	r23, r22
 682:	6a 2f       	mov	r22, r26
 684:	11 24       	eor	r1, r1
 686:	9f 57       	subi	r25, 0x7F	; 127
 688:	50 40       	sbci	r21, 0x00	; 0
 68a:	8a f0       	brmi	.+34     	; 0x6ae <__mulsf3_pse+0x84>
 68c:	e1 f0       	breq	.+56     	; 0x6c6 <__mulsf3_pse+0x9c>
 68e:	88 23       	and	r24, r24
 690:	4a f0       	brmi	.+18     	; 0x6a4 <__mulsf3_pse+0x7a>
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	bb 1f       	adc	r27, r27
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	50 40       	sbci	r21, 0x00	; 0
 6a2:	a9 f7       	brne	.-22     	; 0x68e <__mulsf3_pse+0x64>
 6a4:	9e 3f       	cpi	r25, 0xFE	; 254
 6a6:	51 05       	cpc	r21, r1
 6a8:	70 f0       	brcs	.+28     	; 0x6c6 <__mulsf3_pse+0x9c>
 6aa:	1c cf       	rjmp	.-456    	; 0x4e4 <__fp_inf>
 6ac:	a6 cf       	rjmp	.-180    	; 0x5fa <__fp_szero>
 6ae:	5f 3f       	cpi	r21, 0xFF	; 255
 6b0:	ec f3       	brlt	.-6      	; 0x6ac <__mulsf3_pse+0x82>
 6b2:	98 3e       	cpi	r25, 0xE8	; 232
 6b4:	dc f3       	brlt	.-10     	; 0x6ac <__mulsf3_pse+0x82>
 6b6:	86 95       	lsr	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b7 95       	ror	r27
 6be:	f7 95       	ror	r31
 6c0:	e7 95       	ror	r30
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	c1 f7       	brne	.-16     	; 0x6b6 <__mulsf3_pse+0x8c>
 6c6:	fe 2b       	or	r31, r30
 6c8:	88 0f       	add	r24, r24
 6ca:	91 1d       	adc	r25, r1
 6cc:	96 95       	lsr	r25
 6ce:	87 95       	ror	r24
 6d0:	97 f9       	bld	r25, 7
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
