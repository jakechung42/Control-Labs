
xmega_HDD_StateSpace_fullObs_Integrator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00802000  00001482  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080205a  0080205a  00001570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006058  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e88  00000000  00000000  000076b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000887  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000bdc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049d8  00000000  00000000  0000bf24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033a  00000000  00000000  000108fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00010c36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	e2 e8       	ldi	r30, 0x82	; 130
     220:	f4 e1       	ldi	r31, 0x14	; 20
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	aa 35       	cpi	r26, 0x5A	; 90
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	aa e5       	ldi	r26, 0x5A	; 90
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a6 3b       	cpi	r26, 0xB6	; 182
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 21 06 	call	0xc42	; 0xc42 <main>
     248:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
     266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
	//read value input
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
     2b6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     2ba:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     2be:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <adcIn>
     2c2:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <adcIn+0x1>
	setPoint = (adcIn/4095.)-0.030;		//convert to voltage
     2c6:	60 91 82 20 	lds	r22, 0x2082	; 0x802082 <adcIn>
     2ca:	70 91 83 20 	lds	r23, 0x2083	; 0x802083 <adcIn+0x1>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 8c 07 	call	0xf18	; 0xf18 <__floatunsisf>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 ef       	ldi	r19, 0xF0	; 240
     2da:	4f e7       	ldi	r20, 0x7F	; 127
     2dc:	55 e4       	ldi	r21, 0x45	; 69
     2de:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     2e2:	2f e8       	ldi	r18, 0x8F	; 143
     2e4:	32 ec       	ldi	r19, 0xC2	; 194
     2e6:	45 ef       	ldi	r20, 0xF5	; 245
     2e8:	5c e3       	ldi	r21, 0x3C	; 60
     2ea:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     2ee:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <setPoint>
     2f2:	70 93 7f 20 	sts	0x207F, r23	; 0x80207f <setPoint+0x1>
     2f6:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <setPoint+0x2>
     2fa:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <setPoint+0x3>
    Rin      = setPoint;
     2fe:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <setPoint>
     302:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <setPoint+0x1>
     306:	a0 91 80 20 	lds	r26, 0x2080	; 0x802080 <setPoint+0x2>
     30a:	b0 91 81 20 	lds	r27, 0x2081	; 0x802081 <setPoint+0x3>
     30e:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <Rin>
     312:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <Rin+0x1>
     316:	a0 93 9a 20 	sts	0x209A, r26	; 0x80209a <Rin+0x2>
     31a:	b0 93 9b 20 	sts	0x209B, r27	; 0x80209b <Rin+0x3>
	
    //handle the encoder
	encCount = TCC0.CNT;			//read encoder
     31e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
     322:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
     326:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <encCount>
     32a:	90 93 8d 20 	sts	0x208D, r25	; 0x80208d <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
     32e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <encCount>
     332:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <encCount+0x1>
     336:	99 23       	and	r25, r25
     338:	24 f4       	brge	.+8      	; 0x342 <__vector_20+0xd0>
     33a:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <encCount>
     33e:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
     342:	60 91 8c 20 	lds	r22, 0x208C	; 0x80208c <encCount>
     346:	70 91 8d 20 	lds	r23, 0x208D	; 0x80208d <encCount+0x1>
     34a:	07 2e       	mov	r0, r23
     34c:	00 0c       	add	r0, r0
     34e:	88 0b       	sbc	r24, r24
     350:	99 0b       	sbc	r25, r25
     352:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__floatsisf>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	4f e2       	ldi	r20, 0x2F	; 47
     35c:	54 e4       	ldi	r21, 0x44	; 68
     35e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     362:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <position>
     366:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <position+0x1>
     36a:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <position+0x2>
     36e:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
     372:	60 91 88 20 	lds	r22, 0x2088	; 0x802088 <position>
     376:	70 91 89 20 	lds	r23, 0x2089	; 0x802089 <position+0x1>
     37a:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <position+0x2>
     37e:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <position+0x3>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 ef       	ldi	r19, 0xF0	; 240
     386:	4f e7       	ldi	r20, 0x7F	; 127
     388:	55 e4       	ldi	r21, 0x45	; 69
     38a:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     38e:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <positionDAC>
     392:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <positionDAC+0x1>
     396:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <positionDAC+0x2>
     39a:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <positionDAC+0x3>
	if(positionDAC < 0) positionDAC = 0;	//rollover check
     39e:	60 91 84 20 	lds	r22, 0x2084	; 0x802084 <positionDAC>
     3a2:	70 91 85 20 	lds	r23, 0x2085	; 0x802085 <positionDAC+0x1>
     3a6:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <positionDAC+0x2>
     3aa:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <positionDAC+0x3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	a9 01       	movw	r20, r18
     3b4:	0e 94 df 06 	call	0xdbe	; 0xdbe <__cmpsf2>
     3b8:	88 23       	and	r24, r24
     3ba:	44 f4       	brge	.+16     	; 0x3cc <__vector_20+0x15a>
     3bc:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <positionDAC>
     3c0:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <positionDAC+0x1>
     3c4:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <positionDAC+0x2>
     3c8:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <positionDAC+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = 0.4;  // Initial value
     3cc:	8d ec       	ldi	r24, 0xCD	; 205
     3ce:	9c ec       	ldi	r25, 0xCC	; 204
     3d0:	ac ec       	ldi	r26, 0xCC	; 204
     3d2:	be e3       	ldi	r27, 0x3E	; 62
     3d4:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <ctrlCorrection>
     3d8:	90 93 73 20 	sts	0x2073, r25	; 0x802073 <ctrlCorrection+0x1>
     3dc:	a0 93 74 20 	sts	0x2074, r26	; 0x802074 <ctrlCorrection+0x2>
     3e0:	b0 93 75 20 	sts	0x2075, r27	; 0x802075 <ctrlCorrection+0x3>
	// when the control input (ctrlOut = 0.0) equalled 0.
	
	/*
    State Space equations
    */
    xI_k = xI_km1 + Rin - C_k;
     3e4:	60 91 5e 20 	lds	r22, 0x205E	; 0x80205e <xI_km1>
     3e8:	70 91 5f 20 	lds	r23, 0x205F	; 0x80205f <xI_km1+0x1>
     3ec:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <xI_km1+0x2>
     3f0:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <xI_km1+0x3>
     3f4:	20 91 98 20 	lds	r18, 0x2098	; 0x802098 <Rin>
     3f8:	30 91 99 20 	lds	r19, 0x2099	; 0x802099 <Rin+0x1>
     3fc:	40 91 9a 20 	lds	r20, 0x209A	; 0x80209a <Rin+0x2>
     400:	50 91 9b 20 	lds	r21, 0x209B	; 0x80209b <Rin+0x3>
     404:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     408:	20 91 9c 20 	lds	r18, 0x209C	; 0x80209c <C_k>
     40c:	30 91 9d 20 	lds	r19, 0x209D	; 0x80209d <C_k+0x1>
     410:	40 91 9e 20 	lds	r20, 0x209E	; 0x80209e <C_k+0x2>
     414:	50 91 9f 20 	lds	r21, 0x209F	; 0x80209f <C_k+0x3>
     418:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     41c:	60 93 a0 20 	sts	0x20A0, r22	; 0x8020a0 <xI_k>
     420:	70 93 a1 20 	sts	0x20A1, r23	; 0x8020a1 <xI_k+0x1>
     424:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <xI_k+0x2>
     428:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <xI_k+0x3>

    rk_m1 = Ki * xI_km1;
     42c:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <Ki>
     430:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <Ki+0x1>
     434:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <Ki+0x2>
     438:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <Ki+0x3>
     43c:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     440:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     444:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     448:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     44c:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     450:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <rk_m1>
     454:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <rk_m1+0x1>
     458:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <rk_m1+0x2>
     45c:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <rk_m1+0x3>

    x1_k = (A1_11*x1_km1 + A1_12*x2_km1 + A1_13*x3_km1) + B1*rk_m1 + L1*C_km1;
     460:	60 91 4e 20 	lds	r22, 0x204E	; 0x80204e <A1_11>
     464:	70 91 4f 20 	lds	r23, 0x204F	; 0x80204f <A1_11+0x1>
     468:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <A1_11+0x2>
     46c:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <A1_11+0x3>
     470:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     474:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     478:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     47c:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     480:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     484:	6b 01       	movw	r12, r22
     486:	7c 01       	movw	r14, r24
     488:	60 91 4a 20 	lds	r22, 0x204A	; 0x80204a <A1_12>
     48c:	70 91 4b 20 	lds	r23, 0x204B	; 0x80204b <A1_12+0x1>
     490:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <A1_12+0x2>
     494:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <A1_12+0x3>
     498:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     49c:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     4a0:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     4a4:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     4a8:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     4ac:	9b 01       	movw	r18, r22
     4ae:	ac 01       	movw	r20, r24
     4b0:	c7 01       	movw	r24, r14
     4b2:	b6 01       	movw	r22, r12
     4b4:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     4b8:	6b 01       	movw	r12, r22
     4ba:	7c 01       	movw	r14, r24
     4bc:	60 91 46 20 	lds	r22, 0x2046	; 0x802046 <A1_13>
     4c0:	70 91 47 20 	lds	r23, 0x2047	; 0x802047 <A1_13+0x1>
     4c4:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <A1_13+0x2>
     4c8:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <A1_13+0x3>
     4cc:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     4d0:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     4d4:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     4d8:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     4dc:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     4ec:	6b 01       	movw	r12, r22
     4ee:	7c 01       	movw	r14, r24
     4f0:	60 91 2a 20 	lds	r22, 0x202A	; 0x80202a <B1>
     4f4:	70 91 2b 20 	lds	r23, 0x202B	; 0x80202b <B1+0x1>
     4f8:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <B1+0x2>
     4fc:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <B1+0x3>
     500:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <rk_m1>
     504:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <rk_m1+0x1>
     508:	40 91 92 20 	lds	r20, 0x2092	; 0x802092 <rk_m1+0x2>
     50c:	50 91 93 20 	lds	r21, 0x2093	; 0x802093 <rk_m1+0x3>
     510:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     514:	9b 01       	movw	r18, r22
     516:	ac 01       	movw	r20, r24
     518:	c7 01       	movw	r24, r14
     51a:	b6 01       	movw	r22, r12
     51c:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     520:	6b 01       	movw	r12, r22
     522:	7c 01       	movw	r14, r24
     524:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <L1>
     528:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <L1+0x1>
     52c:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <L1+0x2>
     530:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <L1+0x3>
     534:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     538:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     53c:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     540:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     544:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     548:	9b 01       	movw	r18, r22
     54a:	ac 01       	movw	r20, r24
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     554:	60 93 a8 20 	sts	0x20A8, r22	; 0x8020a8 <x1_k>
     558:	70 93 a9 20 	sts	0x20A9, r23	; 0x8020a9 <x1_k+0x1>
     55c:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <x1_k+0x2>
     560:	90 93 ab 20 	sts	0x20AB, r25	; 0x8020ab <x1_k+0x3>
    x2_k = (A1_21*x1_km1 + A1_22*x2_km1 + A1_23*x3_km1) + B2*rk_m1 + L2*C_km1;
     564:	60 91 42 20 	lds	r22, 0x2042	; 0x802042 <A1_21>
     568:	70 91 43 20 	lds	r23, 0x2043	; 0x802043 <A1_21+0x1>
     56c:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <A1_21+0x2>
     570:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <A1_21+0x3>
     574:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     578:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     57c:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     580:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     584:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
     58c:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <A1_22>
     590:	70 91 3f 20 	lds	r23, 0x203F	; 0x80203f <A1_22+0x1>
     594:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <A1_22+0x2>
     598:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <A1_22+0x3>
     59c:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     5a0:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     5a4:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     5a8:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     5ac:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	c7 01       	movw	r24, r14
     5b6:	b6 01       	movw	r22, r12
     5b8:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24
     5c0:	60 91 3a 20 	lds	r22, 0x203A	; 0x80203a <A1_23>
     5c4:	70 91 3b 20 	lds	r23, 0x203B	; 0x80203b <A1_23+0x1>
     5c8:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <A1_23+0x2>
     5cc:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <A1_23+0x3>
     5d0:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     5d4:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     5d8:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     5dc:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     5e0:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     5f0:	6b 01       	movw	r12, r22
     5f2:	7c 01       	movw	r14, r24
     5f4:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <B2>
     5f8:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <B2+0x1>
     5fc:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <B2+0x2>
     600:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <B2+0x3>
     604:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <rk_m1>
     608:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <rk_m1+0x1>
     60c:	40 91 92 20 	lds	r20, 0x2092	; 0x802092 <rk_m1+0x2>
     610:	50 91 93 20 	lds	r21, 0x2093	; 0x802093 <rk_m1+0x3>
     614:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     624:	6b 01       	movw	r12, r22
     626:	7c 01       	movw	r14, r24
     628:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <L2>
     62c:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <L2+0x1>
     630:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <L2+0x2>
     634:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <L2+0x3>
     638:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     63c:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     640:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     644:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     648:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     64c:	9b 01       	movw	r18, r22
     64e:	ac 01       	movw	r20, r24
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     658:	60 93 a4 20 	sts	0x20A4, r22	; 0x8020a4 <x2_k>
     65c:	70 93 a5 20 	sts	0x20A5, r23	; 0x8020a5 <x2_k+0x1>
     660:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <x2_k+0x2>
     664:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <x2_k+0x3>
    x3_k = (A1_31*x1_km1 + A1_32*x2_km1 + A1_33*x3_km1) + B3*rk_m1 + L3*C_km1;
     668:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <A1_31>
     66c:	70 91 37 20 	lds	r23, 0x2037	; 0x802037 <A1_31+0x1>
     670:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <A1_31+0x2>
     674:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <A1_31+0x3>
     678:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     67c:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     680:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     684:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     688:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
     690:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <A1_32>
     694:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <A1_32+0x1>
     698:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <A1_32+0x2>
     69c:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <A1_32+0x3>
     6a0:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     6a4:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     6a8:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     6ac:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     6b0:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     6b4:	9b 01       	movw	r18, r22
     6b6:	ac 01       	movw	r20, r24
     6b8:	c7 01       	movw	r24, r14
     6ba:	b6 01       	movw	r22, r12
     6bc:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     6c0:	6b 01       	movw	r12, r22
     6c2:	7c 01       	movw	r14, r24
     6c4:	60 91 2e 20 	lds	r22, 0x202E	; 0x80202e <A1_33>
     6c8:	70 91 2f 20 	lds	r23, 0x202F	; 0x80202f <A1_33+0x1>
     6cc:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <A1_33+0x2>
     6d0:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <A1_33+0x3>
     6d4:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     6d8:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     6dc:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     6e0:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     6e4:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <B3>
     6fc:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <B3+0x1>
     700:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <B3+0x2>
     704:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <B3+0x3>
     708:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <rk_m1>
     70c:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <rk_m1+0x1>
     710:	40 91 92 20 	lds	r20, 0x2092	; 0x802092 <rk_m1+0x2>
     714:	50 91 93 20 	lds	r21, 0x2093	; 0x802093 <rk_m1+0x3>
     718:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
     72c:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <L3>
     730:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <L3+0x1>
     734:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <L3+0x2>
     738:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <L3+0x3>
     73c:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     740:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     744:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     748:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     74c:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     750:	9b 01       	movw	r18, r22
     752:	ac 01       	movw	r20, r24
     754:	c7 01       	movw	r24, r14
     756:	b6 01       	movw	r22, r12
     758:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     75c:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <x3_k>
     760:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <x3_k+0x1>
     764:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <x3_k+0x2>
     768:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <x3_k+0x3>

    ctrlOut = Ki*xI_k - (K1*x1_k + K2*x2_k + K3*x3_k);
     76c:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <Ki>
     770:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <Ki+0x1>
     774:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <Ki+0x2>
     778:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <Ki+0x3>
     77c:	20 91 a0 20 	lds	r18, 0x20A0	; 0x8020a0 <xI_k>
     780:	30 91 a1 20 	lds	r19, 0x20A1	; 0x8020a1 <xI_k+0x1>
     784:	40 91 a2 20 	lds	r20, 0x20A2	; 0x8020a2 <xI_k+0x2>
     788:	50 91 a3 20 	lds	r21, 0x20A3	; 0x8020a3 <xI_k+0x3>
     78c:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     790:	6b 01       	movw	r12, r22
     792:	7c 01       	movw	r14, r24
     794:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <K1>
     798:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <K1+0x1>
     79c:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <K1+0x2>
     7a0:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <K1+0x3>
     7a4:	20 91 a8 20 	lds	r18, 0x20A8	; 0x8020a8 <x1_k>
     7a8:	30 91 a9 20 	lds	r19, 0x20A9	; 0x8020a9 <x1_k+0x1>
     7ac:	40 91 aa 20 	lds	r20, 0x20AA	; 0x8020aa <x1_k+0x2>
     7b0:	50 91 ab 20 	lds	r21, 0x20AB	; 0x8020ab <x1_k+0x3>
     7b4:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     7b8:	4b 01       	movw	r8, r22
     7ba:	5c 01       	movw	r10, r24
     7bc:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <K2>
     7c0:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <K2+0x1>
     7c4:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <K2+0x2>
     7c8:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <K2+0x3>
     7cc:	20 91 a4 20 	lds	r18, 0x20A4	; 0x8020a4 <x2_k>
     7d0:	30 91 a5 20 	lds	r19, 0x20A5	; 0x8020a5 <x2_k+0x1>
     7d4:	40 91 a6 20 	lds	r20, 0x20A6	; 0x8020a6 <x2_k+0x2>
     7d8:	50 91 a7 20 	lds	r21, 0x20A7	; 0x8020a7 <x2_k+0x3>
     7dc:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	c5 01       	movw	r24, r10
     7e6:	b4 01       	movw	r22, r8
     7e8:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     7ec:	4b 01       	movw	r8, r22
     7ee:	5c 01       	movw	r10, r24
     7f0:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <K3>
     7f4:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <K3+0x1>
     7f8:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <K3+0x2>
     7fc:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <K3+0x3>
     800:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <x3_k>
     804:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <x3_k+0x1>
     808:	40 91 96 20 	lds	r20, 0x2096	; 0x802096 <x3_k+0x2>
     80c:	50 91 97 20 	lds	r21, 0x2097	; 0x802097 <x3_k+0x3>
     810:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	c7 01       	movw	r24, r14
     826:	b6 01       	movw	r22, r12
     828:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     82c:	60 93 7a 20 	sts	0x207A, r22	; 0x80207a <ctrlOut>
     830:	70 93 7b 20 	sts	0x207B, r23	; 0x80207b <ctrlOut+0x1>
     834:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <ctrlOut+0x2>
     838:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <ctrlOut+0x3>
    
    //Update variables
    x1_km1 = x1_k;
     83c:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <x1_k>
     840:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <x1_k+0x1>
     844:	a0 91 aa 20 	lds	r26, 0x20AA	; 0x8020aa <x1_k+0x2>
     848:	b0 91 ab 20 	lds	r27, 0x20AB	; 0x8020ab <x1_k+0x3>
     84c:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <x1_km1>
     850:	90 93 6b 20 	sts	0x206B, r25	; 0x80206b <x1_km1+0x1>
     854:	a0 93 6c 20 	sts	0x206C, r26	; 0x80206c <x1_km1+0x2>
     858:	b0 93 6d 20 	sts	0x206D, r27	; 0x80206d <x1_km1+0x3>
    x2_km1 = x2_k;
     85c:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <x2_k>
     860:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <x2_k+0x1>
     864:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <x2_k+0x2>
     868:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <x2_k+0x3>
     86c:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <x2_km1>
     870:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <x2_km1+0x1>
     874:	a0 93 68 20 	sts	0x2068, r26	; 0x802068 <x2_km1+0x2>
     878:	b0 93 69 20 	sts	0x2069, r27	; 0x802069 <x2_km1+0x3>
    x3_km1 = x3_k;
     87c:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <x3_k>
     880:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <x3_k+0x1>
     884:	a0 91 96 20 	lds	r26, 0x2096	; 0x802096 <x3_k+0x2>
     888:	b0 91 97 20 	lds	r27, 0x2097	; 0x802097 <x3_k+0x3>
     88c:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <x3_km1>
     890:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <x3_km1+0x1>
     894:	a0 93 64 20 	sts	0x2064, r26	; 0x802064 <x3_km1+0x2>
     898:	b0 93 65 20 	sts	0x2065, r27	; 0x802065 <x3_km1+0x3>

    xI_km1 = xI_k;
     89c:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <xI_k>
     8a0:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <xI_k+0x1>
     8a4:	a0 91 a2 20 	lds	r26, 0x20A2	; 0x8020a2 <xI_k+0x2>
     8a8:	b0 91 a3 20 	lds	r27, 0x20A3	; 0x8020a3 <xI_k+0x3>
     8ac:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <xI_km1>
     8b0:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <xI_km1+0x1>
     8b4:	a0 93 60 20 	sts	0x2060, r26	; 0x802060 <xI_km1+0x2>
     8b8:	b0 93 61 20 	sts	0x2061, r27	; 0x802061 <xI_km1+0x3>

    C_km1 = C_k;
     8bc:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <C_k>
     8c0:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <C_k+0x1>
     8c4:	a0 91 9e 20 	lds	r26, 0x209E	; 0x80209e <C_k+0x2>
     8c8:	b0 91 9f 20 	lds	r27, 0x209F	; 0x80209f <C_k+0x3>
     8cc:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <C_km1>
     8d0:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <C_km1+0x1>
     8d4:	a0 93 70 20 	sts	0x2070, r26	; 0x802070 <C_km1+0x2>
     8d8:	b0 93 71 20 	sts	0x2071, r27	; 0x802071 <C_km1+0x3>
    C_k = position; //encoder data
     8dc:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <position>
     8e0:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <position+0x1>
     8e4:	a0 91 8a 20 	lds	r26, 0x208A	; 0x80208a <position+0x2>
     8e8:	b0 91 8b 20 	lds	r27, 0x208B	; 0x80208b <position+0x3>
     8ec:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <C_k>
     8f0:	90 93 9d 20 	sts	0x209D, r25	; 0x80209d <C_k+0x1>
     8f4:	a0 93 9e 20 	sts	0x209E, r26	; 0x80209e <C_k+0x2>
     8f8:	b0 93 9f 20 	sts	0x209F, r27	; 0x80209f <C_k+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
     8fc:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <ctrlOut>
     900:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <ctrlOut+0x1>
     904:	a0 91 7c 20 	lds	r26, 0x207C	; 0x80207c <ctrlOut+0x2>
     908:	b0 91 7d 20 	lds	r27, 0x207D	; 0x80207d <ctrlOut+0x3>
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	9f 77       	andi	r25, 0x7F	; 127
     912:	20 91 52 20 	lds	r18, 0x2052	; 0x802052 <maxVoltage>
     916:	30 91 53 20 	lds	r19, 0x2053	; 0x802053 <maxVoltage+0x1>
     91a:	40 91 54 20 	lds	r20, 0x2054	; 0x802054 <maxVoltage+0x2>
     91e:	50 91 55 20 	lds	r21, 0x2055	; 0x802055 <maxVoltage+0x3>
     922:	0e 94 3e 08 	call	0x107c	; 0x107c <__gesf2>
     926:	88 23       	and	r24, r24
     928:	d4 f0       	brlt	.+52     	; 0x95e <__EEPROM_REGION_LENGTH__+0x15e>
	ctrlOut = copysign(maxVoltage, ctrlOut);
     92a:	40 91 7a 20 	lds	r20, 0x207A	; 0x80207a <ctrlOut>
     92e:	50 91 7b 20 	lds	r21, 0x207B	; 0x80207b <ctrlOut+0x1>
     932:	60 91 7c 20 	lds	r22, 0x207C	; 0x80207c <ctrlOut+0x2>
     936:	70 91 7d 20 	lds	r23, 0x207D	; 0x80207d <ctrlOut+0x3>
     93a:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <maxVoltage>
     93e:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <maxVoltage+0x1>
     942:	a0 91 54 20 	lds	r26, 0x2054	; 0x802054 <maxVoltage+0x2>
     946:	b0 91 55 20 	lds	r27, 0x2055	; 0x802055 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     94a:	77 fb       	bst	r23, 7
     94c:	b7 f9       	bld	r27, 7
     94e:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <ctrlOut>
     952:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <ctrlOut+0x1>
     956:	a0 93 7c 20 	sts	0x207C, r26	; 0x80207c <ctrlOut+0x2>
     95a:	b0 93 7d 20 	sts	0x207D, r27	; 0x80207d <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
     95e:	60 91 7a 20 	lds	r22, 0x207A	; 0x80207a <ctrlOut>
     962:	70 91 7b 20 	lds	r23, 0x207B	; 0x80207b <ctrlOut+0x1>
     966:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <ctrlOut+0x2>
     96a:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <ctrlOut+0x3>
     96e:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <ctrlCorrection>
     972:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <ctrlCorrection+0x1>
     976:	40 91 74 20 	lds	r20, 0x2074	; 0x802074 <ctrlCorrection+0x2>
     97a:	50 91 75 20 	lds	r21, 0x2075	; 0x802075 <ctrlCorrection+0x3>
     97e:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     982:	20 91 5a 20 	lds	r18, 0x205A	; 0x80205a <__data_end>
     986:	30 91 5b 20 	lds	r19, 0x205B	; 0x80205b <__data_end+0x1>
     98a:	40 91 5c 20 	lds	r20, 0x205C	; 0x80205c <__data_end+0x2>
     98e:	50 91 5d 20 	lds	r21, 0x205D	; 0x80205d <__data_end+0x3>
     992:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	55 e4       	ldi	r21, 0x45	; 69
     99e:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     9a2:	60 93 76 20 	sts	0x2076, r22	; 0x802076 <ctrlDAC>
     9a6:	70 93 77 20 	sts	0x2077, r23	; 0x802077 <ctrlDAC+0x1>
     9aa:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <ctrlDAC+0x2>
     9ae:	90 93 79 20 	sts	0x2079, r25	; 0x802079 <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
     9b2:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     9b6:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     9ba:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     9be:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	a9 01       	movw	r20, r18
     9c8:	0e 94 df 06 	call	0xdbe	; 0xdbe <__cmpsf2>
     9cc:	88 23       	and	r24, r24
     9ce:	44 f4       	brge	.+16     	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
     9d0:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <ctrlDAC>
     9d4:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <ctrlDAC+0x1>
     9d8:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <ctrlDAC+0x2>
     9dc:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
     9e0:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     9e4:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     9e8:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     9ec:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 ef       	ldi	r19, 0xF0	; 240
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	55 e4       	ldi	r21, 0x45	; 69
     9f8:	0e 94 3e 08 	call	0x107c	; 0x107c <__gesf2>
     9fc:	18 16       	cp	r1, r24
     9fe:	64 f4       	brge	.+24     	; 0xa18 <__EEPROM_REGION_LENGTH__+0x218>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 ef       	ldi	r25, 0xF0	; 240
     a04:	af e7       	ldi	r26, 0x7F	; 127
     a06:	b5 e4       	ldi	r27, 0x45	; 69
     a08:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <ctrlDAC>
     a0c:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <ctrlDAC+0x1>
     a10:	a0 93 78 20 	sts	0x2078, r26	; 0x802078 <ctrlDAC+0x2>
     a14:	b0 93 79 20 	sts	0x2079, r27	; 0x802079 <ctrlDAC+0x3>
	// while((DACB.STATUS & DAC_CH1DRE_bm)==0);
	// DACB.CH1DATA = (int)positionDAC;					//Write arm position to DACB channel 1

	// flip the order to check channel 0 and channel 1
	// printf("positionDAC = %d\n", (int)(positionDAC));
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
     a18:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     a1c:	80 ff       	sbrs	r24, 0
     a1e:	fc cf       	rjmp	.-8      	; 0xa18 <__EEPROM_REGION_LENGTH__+0x218>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
     a20:	60 91 84 20 	lds	r22, 0x2084	; 0x802084 <positionDAC>
     a24:	70 91 85 20 	lds	r23, 0x2085	; 0x802085 <positionDAC+0x1>
     a28:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <positionDAC+0x2>
     a2c:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <positionDAC+0x3>
     a30:	0e 94 56 07 	call	0xeac	; 0xeac <__fixsfsi>
     a34:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     a38:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
     a3c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     a40:	81 ff       	sbrs	r24, 1
     a42:	fc cf       	rjmp	.-8      	; 0xa3c <__EEPROM_REGION_LENGTH__+0x23c>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
     a44:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     a48:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     a4c:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     a50:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     a54:	0e 94 56 07 	call	0xeac	; 0xeac <__fixsfsi>
     a58:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
     a5c:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>

	
	// printf("Error = %d, ctrlOut = %d, Position = %d, ctrlDac = %d, PositionDac = %d\n", (int)(error*100), (int)(ctrlOut*100), (int)(position*100), (int)ctrlDAC, (int)positionDAC);
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>
}
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	0f 90       	pop	r0
     a90:	0b be       	out	0x3b, r0	; 59
     a92:	0f 90       	pop	r0
     a94:	09 be       	out	0x39, r0	; 57
     a96:	0f 90       	pop	r0
     a98:	08 be       	out	0x38, r0	; 56
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     aa4:	e0 e5       	ldi	r30, 0x50	; 80
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
     aae:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     ab2:	81 ff       	sbrs	r24, 1
     ab4:	fc cf       	rjmp	.-8      	; 0xaae <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
     ab6:	88 ed       	ldi	r24, 0xD8	; 216
     ab8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
     ac0:	08 95       	ret

00000ac2 <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
     ac2:	e0 e4       	ldi	r30, 0x40	; 64
     ac4:	f6 e0       	ldi	r31, 0x06	; 6
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     ace:	e0 ea       	ldi	r30, 0xA0	; 160
     ad0:	f8 e0       	ldi	r31, 0x08	; 8
     ad2:	85 81       	ldd	r24, Z+5	; 0x05
     ad4:	83 60       	ori	r24, 0x03	; 3
     ad6:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     ad8:	8b e6       	ldi	r24, 0x6B	; 107
     ada:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     adc:	80 eb       	ldi	r24, 0xB0	; 176
     ade:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	88 60       	ori	r24, 0x08	; 8
     ae4:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	88 e2       	ldi	r24, 0x28	; 40
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 b0 08 	call	0x1160	; 0x1160 <fdevopen>
     af2:	08 95       	ret

00000af4 <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
     af4:	e0 e6       	ldi	r30, 0x60	; 96
     af6:	f6 e0       	ldi	r31, 0x06	; 6
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
     afc:	80 89       	ldd	r24, Z+16	; 0x10
     afe:	83 60       	ori	r24, 0x03	; 3
     b00:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
     b02:	e0 e8       	ldi	r30, 0x80	; 128
     b04:	f1 e0       	ldi	r31, 0x01	; 1
     b06:	88 e6       	ldi	r24, 0x68	; 104
     b08:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
     b0a:	80 85       	ldd	r24, Z+8	; 0x08
     b0c:	89 60       	ori	r24, 0x09	; 9
     b0e:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
     b10:	e0 e0       	ldi	r30, 0x00	; 0
     b12:	f8 e0       	ldi	r31, 0x08	; 8
     b14:	83 81       	ldd	r24, Z+3	; 0x03
     b16:	88 66       	ori	r24, 0x68	; 104
     b18:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
     b1a:	80 81       	ld	r24, Z
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24
     b20:	08 95       	ret

00000b22 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     b22:	aa ec       	ldi	r26, 0xCA	; 202
     b24:	b1 e0       	ldi	r27, 0x01	; 1
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     b2a:	e8 2f       	mov	r30, r24
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     b30:	1c 92       	st	X, r1

	return result;
}
     b32:	08 95       	ret

00000b34 <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     b3a:	c1 15       	cp	r28, r1
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	d8 07       	cpc	r29, r24
     b40:	39 f4       	brne	.+14     	; 0xb50 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     b42:	80 e2       	ldi	r24, 0x20	; 32
     b44:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	8c 87       	std	Y+12, r24	; 0x0c
     b4c:	9d 87       	std	Y+13, r25	; 0x0d
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     b50:	84 e2       	ldi	r24, 0x24	; 36
     b52:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	8c 87       	std	Y+12, r24	; 0x0c
     b5a:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 9a 05 	call	0xb34	; 0xb34 <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
     b6a:	e0 e0       	ldi	r30, 0x00	; 0
     b6c:	f2 e0       	ldi	r31, 0x02	; 2
     b6e:	81 81       	ldd	r24, Z+1	; 0x01
     b70:	88 60       	ori	r24, 0x08	; 8
     b72:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
     b7a:	80 a1       	ldd	r24, Z+32	; 0x20
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
     b80:	84 81       	ldd	r24, Z+4	; 0x04
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
     b86:	80 81       	ld	r24, Z
     b88:	81 60       	ori	r24, 0x01	; 1
     b8a:	80 83       	st	Z, r24
     b8c:	08 95       	ret

00000b8e <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     b94:	c1 15       	cp	r28, r1
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	d8 07       	cpc	r29, r24
     b9a:	89 f4       	brne	.+34     	; 0xbbe <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     b9c:	80 e3       	ldi	r24, 0x30	; 48
     b9e:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     ba2:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     ba4:	81 e3       	ldi	r24, 0x31	; 49
     ba6:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     baa:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     bac:	84 e3       	ldi	r24, 0x34	; 52
     bae:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bb2:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     bb4:	85 e3       	ldi	r24, 0x35	; 53
     bb6:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bba:	8a 87       	std	Y+10, r24	; 0x0a
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bc4:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     bc6:	83 e3       	ldi	r24, 0x33	; 51
     bc8:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bcc:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     bce:	86 e3       	ldi	r24, 0x36	; 54
     bd0:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bd4:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     bd6:	87 e3       	ldi	r24, 0x37	; 55
     bd8:	0e 94 91 05 	call	0xb22	; 0xb22 <SP_ReadCalibrationByte>
     bdc:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
     bec:	e0 e2       	ldi	r30, 0x20	; 32
     bee:	f3 e0       	ldi	r31, 0x03	; 3
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
     bfa:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
     bfc:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     bfe:	80 81       	ld	r24, Z
     c00:	8d 60       	ori	r24, 0x0D	; 13
     c02:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
     c0c:	e0 e0       	ldi	r30, 0x00	; 0
     c0e:	f3 e0       	ldi	r31, 0x03	; 3
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
     c1a:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
     c1c:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     c1e:	80 81       	ld	r24, Z
     c20:	8d 60       	ori	r24, 0x0D	; 13
     c22:	80 83       	st	Z, r24
     c24:	08 95       	ret

00000c26 <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
     c26:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     c28:	e0 e4       	ldi	r30, 0x40	; 64
     c2a:	f8 e0       	ldi	r31, 0x08	; 8
     c2c:	81 81       	ldd	r24, Z+1	; 0x01
     c2e:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     c30:	96 81       	ldd	r25, Z+6	; 0x06
     c32:	91 60       	ori	r25, 0x01	; 1
     c34:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     c36:	26 a3       	std	Z+38, r18	; 0x26
     c38:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     c3a:	80 81       	ld	r24, Z
     c3c:	83 60       	ori	r24, 0x03	; 3
     c3e:	80 83       	st	Z, r24
     c40:	08 95       	ret

00000c42 <main>:


int main(void)
{
	
	clk_init();
     c42:	0e 94 52 05 	call	0xaa4	; 0xaa4 <clk_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c46:	2f ef       	ldi	r18, 0xFF	; 255
     c48:	83 ed       	ldi	r24, 0xD3	; 211
     c4a:	90 e3       	ldi	r25, 0x30	; 48
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <main+0xa>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <main+0x14>
     c56:	00 00       	nop
    _delay_ms(500); //add a delay 0.5 for the encoder to stablize
	encoder_init();
     c58:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <encoder_init>
	usart_init();
     c5c:	0e 94 61 05 	call	0xac2	; 0xac2 <usart_init>
	dac_init();
     c60:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <dac_init>
	adc_init();
     c64:	0e 94 b1 05 	call	0xb62	; 0xb62 <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
     c68:	80 e8       	ldi	r24, 0x80	; 128
     c6a:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
     c6e:	60 91 52 20 	lds	r22, 0x2052	; 0x802052 <maxVoltage>
     c72:	70 91 53 20 	lds	r23, 0x2053	; 0x802053 <maxVoltage+0x1>
     c76:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <maxVoltage+0x2>
     c7a:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <maxVoltage+0x3>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 ef       	ldi	r23, 0xF0	; 240
     c8e:	8f e7       	ldi	r24, 0x7F	; 127
     c90:	95 e4       	ldi	r25, 0x45	; 69
     c92:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     c96:	60 93 5a 20 	sts	0x205A, r22	; 0x80205a <__data_end>
     c9a:	70 93 5b 20 	sts	0x205B, r23	; 0x80205b <__data_end+0x1>
     c9e:	80 93 5c 20 	sts	0x205C, r24	; 0x80205c <__data_end+0x2>
     ca2:	90 93 5d 20 	sts	0x205D, r25	; 0x80205d <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
     ca6:	60 91 56 20 	lds	r22, 0x2056	; 0x802056 <Ts>
     caa:	70 91 57 20 	lds	r23, 0x2057	; 0x802057 <Ts+0x1>
     cae:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <Ts+0x2>
     cb2:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <Ts+0x3>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	34 e2       	ldi	r19, 0x24	; 36
     cba:	44 ef       	ldi	r20, 0xF4	; 244
     cbc:	5a e4       	ldi	r21, 0x4A	; 74
     cbe:	0e 94 43 08 	call	0x1086	; 0x1086 <__mulsf3>
     cc2:	0e 94 5d 07 	call	0xeba	; 0xeba <__fixunssfsi>
     cc6:	60 93 8e 20 	sts	0x208E, r22	; 0x80208e <topCount>
     cca:	70 93 8f 20 	sts	0x208F, r23	; 0x80208f <topCount+0x1>
	
	timer_init(topCount);
     cce:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <topCount>
     cd2:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <topCount+0x1>
     cd6:	0e 94 13 06 	call	0xc26	; 0xc26 <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     ce0:	78 94       	sei
     ce2:	ff cf       	rjmp	.-2      	; 0xce2 <main+0xa0>

00000ce4 <__subsf3>:
     ce4:	50 58       	subi	r21, 0x80	; 128

00000ce6 <__addsf3>:
     ce6:	bb 27       	eor	r27, r27
     ce8:	aa 27       	eor	r26, r26
     cea:	0e 94 8a 06 	call	0xd14	; 0xd14 <__addsf3x>
     cee:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_round>
     cf2:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
     cf6:	38 f0       	brcs	.+14     	; 0xd06 <__addsf3+0x20>
     cf8:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__addsf3+0x20>
     cfe:	39 f4       	brne	.+14     	; 0xd0e <__addsf3+0x28>
     d00:	9f 3f       	cpi	r25, 0xFF	; 255
     d02:	19 f4       	brne	.+6      	; 0xd0a <__addsf3+0x24>
     d04:	26 f4       	brtc	.+8      	; 0xd0e <__addsf3+0x28>
     d06:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
     d0a:	0e f4       	brtc	.+2      	; 0xd0e <__addsf3+0x28>
     d0c:	e0 95       	com	r30
     d0e:	e7 fb       	bst	r30, 7
     d10:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>

00000d14 <__addsf3x>:
     d14:	e9 2f       	mov	r30, r25
     d16:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_split3>
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__addsf3+0xc>
     d1c:	ba 17       	cp	r27, r26
     d1e:	62 07       	cpc	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	95 07       	cpc	r25, r21
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__addsf3x+0x1c>
     d28:	79 f4       	brne	.+30     	; 0xd48 <__addsf3x+0x34>
     d2a:	a6 f5       	brtc	.+104    	; 0xd94 <__addsf3x+0x80>
     d2c:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_zero>
     d30:	0e f4       	brtc	.+2      	; 0xd34 <__addsf3x+0x20>
     d32:	e0 95       	com	r30
     d34:	0b 2e       	mov	r0, r27
     d36:	ba 2f       	mov	r27, r26
     d38:	a0 2d       	mov	r26, r0
     d3a:	0b 01       	movw	r0, r22
     d3c:	b9 01       	movw	r22, r18
     d3e:	90 01       	movw	r18, r0
     d40:	0c 01       	movw	r0, r24
     d42:	ca 01       	movw	r24, r20
     d44:	a0 01       	movw	r20, r0
     d46:	11 24       	eor	r1, r1
     d48:	ff 27       	eor	r31, r31
     d4a:	59 1b       	sub	r21, r25
     d4c:	99 f0       	breq	.+38     	; 0xd74 <__addsf3x+0x60>
     d4e:	59 3f       	cpi	r21, 0xF9	; 249
     d50:	50 f4       	brcc	.+20     	; 0xd66 <__addsf3x+0x52>
     d52:	50 3e       	cpi	r21, 0xE0	; 224
     d54:	68 f1       	brcs	.+90     	; 0xdb0 <__addsf3x+0x9c>
     d56:	1a 16       	cp	r1, r26
     d58:	f0 40       	sbci	r31, 0x00	; 0
     d5a:	a2 2f       	mov	r26, r18
     d5c:	23 2f       	mov	r18, r19
     d5e:	34 2f       	mov	r19, r20
     d60:	44 27       	eor	r20, r20
     d62:	58 5f       	subi	r21, 0xF8	; 248
     d64:	f3 cf       	rjmp	.-26     	; 0xd4c <__addsf3x+0x38>
     d66:	46 95       	lsr	r20
     d68:	37 95       	ror	r19
     d6a:	27 95       	ror	r18
     d6c:	a7 95       	ror	r26
     d6e:	f0 40       	sbci	r31, 0x00	; 0
     d70:	53 95       	inc	r21
     d72:	c9 f7       	brne	.-14     	; 0xd66 <__addsf3x+0x52>
     d74:	7e f4       	brtc	.+30     	; 0xd94 <__addsf3x+0x80>
     d76:	1f 16       	cp	r1, r31
     d78:	ba 0b       	sbc	r27, r26
     d7a:	62 0b       	sbc	r22, r18
     d7c:	73 0b       	sbc	r23, r19
     d7e:	84 0b       	sbc	r24, r20
     d80:	ba f0       	brmi	.+46     	; 0xdb0 <__addsf3x+0x9c>
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	a1 f0       	breq	.+40     	; 0xdae <__addsf3x+0x9a>
     d86:	ff 0f       	add	r31, r31
     d88:	bb 1f       	adc	r27, r27
     d8a:	66 1f       	adc	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	c2 f7       	brpl	.-16     	; 0xd82 <__addsf3x+0x6e>
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <__addsf3x+0x9c>
     d94:	ba 0f       	add	r27, r26
     d96:	62 1f       	adc	r22, r18
     d98:	73 1f       	adc	r23, r19
     d9a:	84 1f       	adc	r24, r20
     d9c:	48 f4       	brcc	.+18     	; 0xdb0 <__addsf3x+0x9c>
     d9e:	87 95       	ror	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	08 f0       	brcs	.+2      	; 0xdae <__addsf3x+0x9a>
     dac:	b0 cf       	rjmp	.-160    	; 0xd0e <__addsf3+0x28>
     dae:	93 95       	inc	r25
     db0:	88 0f       	add	r24, r24
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <__addsf3x+0xa2>
     db4:	99 27       	eor	r25, r25
     db6:	ee 0f       	add	r30, r30
     db8:	97 95       	ror	r25
     dba:	87 95       	ror	r24
     dbc:	08 95       	ret

00000dbe <__cmpsf2>:
     dbe:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_cmp>
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__cmpsf2+0x8>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	08 95       	ret

00000dc8 <__divsf3>:
     dc8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3x>
     dcc:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_round>
     dd0:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
     dd4:	58 f0       	brcs	.+22     	; 0xdec <__divsf3+0x24>
     dd6:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
     dda:	40 f0       	brcs	.+16     	; 0xdec <__divsf3+0x24>
     ddc:	29 f4       	brne	.+10     	; 0xde8 <__divsf3+0x20>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	29 f0       	breq	.+10     	; 0xdec <__divsf3+0x24>
     de2:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
     de6:	51 11       	cpse	r21, r1
     de8:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_szero>
     dec:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>

00000df0 <__divsf3x>:
     df0:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_split3>
     df4:	68 f3       	brcs	.-38     	; 0xdd0 <__divsf3+0x8>

00000df6 <__divsf3_pse>:
     df6:	99 23       	and	r25, r25
     df8:	b1 f3       	breq	.-20     	; 0xde6 <__divsf3+0x1e>
     dfa:	55 23       	and	r21, r21
     dfc:	91 f3       	breq	.-28     	; 0xde2 <__divsf3+0x1a>
     dfe:	95 1b       	sub	r25, r21
     e00:	55 0b       	sbc	r21, r21
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__divsf3_pse+0x26>
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	44 1f       	adc	r20, r20
     e18:	aa 1f       	adc	r26, r26
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <__divsf3_pse+0x10>
     e1c:	35 d0       	rcall	.+106    	; 0xe88 <__divsf3_pse+0x92>
     e1e:	0e 2e       	mov	r0, r30
     e20:	3a f0       	brmi	.+14     	; 0xe30 <__divsf3_pse+0x3a>
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	32 d0       	rcall	.+100    	; 0xe8a <__divsf3_pse+0x94>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	e6 95       	lsr	r30
     e2c:	00 1c       	adc	r0, r0
     e2e:	ca f7       	brpl	.-14     	; 0xe22 <__divsf3_pse+0x2c>
     e30:	2b d0       	rcall	.+86     	; 0xe88 <__divsf3_pse+0x92>
     e32:	fe 2f       	mov	r31, r30
     e34:	29 d0       	rcall	.+82     	; 0xe88 <__divsf3_pse+0x92>
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	bb 1f       	adc	r27, r27
     e3e:	26 17       	cp	r18, r22
     e40:	37 07       	cpc	r19, r23
     e42:	48 07       	cpc	r20, r24
     e44:	ab 07       	cpc	r26, r27
     e46:	b0 e8       	ldi	r27, 0x80	; 128
     e48:	09 f0       	breq	.+2      	; 0xe4c <__divsf3_pse+0x56>
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	80 2d       	mov	r24, r0
     e4e:	bf 01       	movw	r22, r30
     e50:	ff 27       	eor	r31, r31
     e52:	93 58       	subi	r25, 0x83	; 131
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	3a f0       	brmi	.+14     	; 0xe66 <__divsf3_pse+0x70>
     e58:	9e 3f       	cpi	r25, 0xFE	; 254
     e5a:	51 05       	cpc	r21, r1
     e5c:	78 f0       	brcs	.+30     	; 0xe7c <__divsf3_pse+0x86>
     e5e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
     e62:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_szero>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	e4 f3       	brlt	.-8      	; 0xe62 <__divsf3_pse+0x6c>
     e6a:	98 3e       	cpi	r25, 0xE8	; 232
     e6c:	d4 f3       	brlt	.-12     	; 0xe62 <__divsf3_pse+0x6c>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f7 95       	ror	r31
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <__divsf3_pse+0x78>
     e7c:	88 0f       	add	r24, r24
     e7e:	91 1d       	adc	r25, r1
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret
     e88:	e1 e0       	ldi	r30, 0x01	; 1
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	bb 1f       	adc	r27, r27
     e92:	62 17       	cp	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	ba 07       	cpc	r27, r26
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__divsf3_pse+0xae>
     e9c:	62 1b       	sub	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	ee 1f       	adc	r30, r30
     ea6:	88 f7       	brcc	.-30     	; 0xe8a <__divsf3_pse+0x94>
     ea8:	e0 95       	com	r30
     eaa:	08 95       	ret

00000eac <__fixsfsi>:
     eac:	0e 94 5d 07 	call	0xeba	; 0xeba <__fixunssfsi>
     eb0:	68 94       	set
     eb2:	b1 11       	cpse	r27, r1
     eb4:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_szero>
     eb8:	08 95       	ret

00000eba <__fixunssfsi>:
     eba:	0e 94 1d 08 	call	0x103a	; 0x103a <__fp_splitA>
     ebe:	88 f0       	brcs	.+34     	; 0xee2 <__fixunssfsi+0x28>
     ec0:	9f 57       	subi	r25, 0x7F	; 127
     ec2:	98 f0       	brcs	.+38     	; 0xeea <__fixunssfsi+0x30>
     ec4:	b9 2f       	mov	r27, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	b7 51       	subi	r27, 0x17	; 23
     eca:	b0 f0       	brcs	.+44     	; 0xef8 <__fixunssfsi+0x3e>
     ecc:	e1 f0       	breq	.+56     	; 0xf06 <__fixunssfsi+0x4c>
     ece:	66 0f       	add	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	1a f0       	brmi	.+6      	; 0xede <__fixunssfsi+0x24>
     ed8:	ba 95       	dec	r27
     eda:	c9 f7       	brne	.-14     	; 0xece <__fixunssfsi+0x14>
     edc:	14 c0       	rjmp	.+40     	; 0xf06 <__fixunssfsi+0x4c>
     ede:	b1 30       	cpi	r27, 0x01	; 1
     ee0:	91 f0       	breq	.+36     	; 0xf06 <__fixunssfsi+0x4c>
     ee2:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_zero>
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	08 95       	ret
     eea:	0c 94 37 08 	jmp	0x106e	; 0x106e <__fp_zero>
     eee:	67 2f       	mov	r22, r23
     ef0:	78 2f       	mov	r23, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	b8 5f       	subi	r27, 0xF8	; 248
     ef6:	39 f0       	breq	.+14     	; 0xf06 <__fixunssfsi+0x4c>
     ef8:	b9 3f       	cpi	r27, 0xF9	; 249
     efa:	cc f3       	brlt	.-14     	; 0xeee <__fixunssfsi+0x34>
     efc:	86 95       	lsr	r24
     efe:	77 95       	ror	r23
     f00:	67 95       	ror	r22
     f02:	b3 95       	inc	r27
     f04:	d9 f7       	brne	.-10     	; 0xefc <__fixunssfsi+0x42>
     f06:	3e f4       	brtc	.+14     	; 0xf16 <__fixunssfsi+0x5c>
     f08:	90 95       	com	r25
     f0a:	80 95       	com	r24
     f0c:	70 95       	com	r23
     f0e:	61 95       	neg	r22
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	08 95       	ret

00000f18 <__floatunsisf>:
     f18:	e8 94       	clt
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <__floatsisf+0x12>

00000f1c <__floatsisf>:
     f1c:	97 fb       	bst	r25, 7
     f1e:	3e f4       	brtc	.+14     	; 0xf2e <__floatsisf+0x12>
     f20:	90 95       	com	r25
     f22:	80 95       	com	r24
     f24:	70 95       	com	r23
     f26:	61 95       	neg	r22
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	99 23       	and	r25, r25
     f30:	a9 f0       	breq	.+42     	; 0xf5c <__floatsisf+0x40>
     f32:	f9 2f       	mov	r31, r25
     f34:	96 e9       	ldi	r25, 0x96	; 150
     f36:	bb 27       	eor	r27, r27
     f38:	93 95       	inc	r25
     f3a:	f6 95       	lsr	r31
     f3c:	87 95       	ror	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f1 11       	cpse	r31, r1
     f46:	f8 cf       	rjmp	.-16     	; 0xf38 <__floatsisf+0x1c>
     f48:	fa f4       	brpl	.+62     	; 0xf88 <__floatsisf+0x6c>
     f4a:	bb 0f       	add	r27, r27
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__floatsisf+0x36>
     f4e:	60 ff       	sbrs	r22, 0
     f50:	1b c0       	rjmp	.+54     	; 0xf88 <__floatsisf+0x6c>
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <__floatsisf+0x6c>
     f5c:	88 23       	and	r24, r24
     f5e:	11 f0       	breq	.+4      	; 0xf64 <__floatsisf+0x48>
     f60:	96 e9       	ldi	r25, 0x96	; 150
     f62:	11 c0       	rjmp	.+34     	; 0xf86 <__floatsisf+0x6a>
     f64:	77 23       	and	r23, r23
     f66:	21 f0       	breq	.+8      	; 0xf70 <__floatsisf+0x54>
     f68:	9e e8       	ldi	r25, 0x8E	; 142
     f6a:	87 2f       	mov	r24, r23
     f6c:	76 2f       	mov	r23, r22
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <__floatsisf+0x5e>
     f70:	66 23       	and	r22, r22
     f72:	71 f0       	breq	.+28     	; 0xf90 <__floatsisf+0x74>
     f74:	96 e8       	ldi	r25, 0x86	; 134
     f76:	86 2f       	mov	r24, r22
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	2a f0       	brmi	.+10     	; 0xf88 <__floatsisf+0x6c>
     f7e:	9a 95       	dec	r25
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	da f7       	brpl	.-10     	; 0xf7e <__floatsisf+0x62>
     f88:	88 0f       	add	r24, r24
     f8a:	96 95       	lsr	r25
     f8c:	87 95       	ror	r24
     f8e:	97 f9       	bld	r25, 7
     f90:	08 95       	ret

00000f92 <__fp_cmp>:
     f92:	99 0f       	add	r25, r25
     f94:	00 08       	sbc	r0, r0
     f96:	55 0f       	add	r21, r21
     f98:	aa 0b       	sbc	r26, r26
     f9a:	e0 e8       	ldi	r30, 0x80	; 128
     f9c:	fe ef       	ldi	r31, 0xFE	; 254
     f9e:	16 16       	cp	r1, r22
     fa0:	17 06       	cpc	r1, r23
     fa2:	e8 07       	cpc	r30, r24
     fa4:	f9 07       	cpc	r31, r25
     fa6:	c0 f0       	brcs	.+48     	; 0xfd8 <__fp_cmp+0x46>
     fa8:	12 16       	cp	r1, r18
     faa:	13 06       	cpc	r1, r19
     fac:	e4 07       	cpc	r30, r20
     fae:	f5 07       	cpc	r31, r21
     fb0:	98 f0       	brcs	.+38     	; 0xfd8 <__fp_cmp+0x46>
     fb2:	62 1b       	sub	r22, r18
     fb4:	73 0b       	sbc	r23, r19
     fb6:	84 0b       	sbc	r24, r20
     fb8:	95 0b       	sbc	r25, r21
     fba:	39 f4       	brne	.+14     	; 0xfca <__fp_cmp+0x38>
     fbc:	0a 26       	eor	r0, r26
     fbe:	61 f0       	breq	.+24     	; 0xfd8 <__fp_cmp+0x46>
     fc0:	23 2b       	or	r18, r19
     fc2:	24 2b       	or	r18, r20
     fc4:	25 2b       	or	r18, r21
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <__fp_cmp+0x3e>
     fc8:	08 95       	ret
     fca:	0a 26       	eor	r0, r26
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <__fp_cmp+0x3e>
     fce:	a1 40       	sbci	r26, 0x01	; 1
     fd0:	a6 95       	lsr	r26
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	81 1d       	adc	r24, r1
     fd6:	81 1d       	adc	r24, r1
     fd8:	08 95       	ret

00000fda <__fp_inf>:
     fda:	97 f9       	bld	r25, 7
     fdc:	9f 67       	ori	r25, 0x7F	; 127
     fde:	80 e8       	ldi	r24, 0x80	; 128
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	08 95       	ret

00000fe6 <__fp_nan>:
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	80 ec       	ldi	r24, 0xC0	; 192
     fea:	08 95       	ret

00000fec <__fp_pscA>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	18 06       	cpc	r1, r24
     ff6:	09 06       	cpc	r0, r25
     ff8:	08 95       	ret

00000ffa <__fp_pscB>:
     ffa:	00 24       	eor	r0, r0
     ffc:	0a 94       	dec	r0
     ffe:	12 16       	cp	r1, r18
    1000:	13 06       	cpc	r1, r19
    1002:	14 06       	cpc	r1, r20
    1004:	05 06       	cpc	r0, r21
    1006:	08 95       	ret

00001008 <__fp_round>:
    1008:	09 2e       	mov	r0, r25
    100a:	03 94       	inc	r0
    100c:	00 0c       	add	r0, r0
    100e:	11 f4       	brne	.+4      	; 0x1014 <__fp_round+0xc>
    1010:	88 23       	and	r24, r24
    1012:	52 f0       	brmi	.+20     	; 0x1028 <__fp_round+0x20>
    1014:	bb 0f       	add	r27, r27
    1016:	40 f4       	brcc	.+16     	; 0x1028 <__fp_round+0x20>
    1018:	bf 2b       	or	r27, r31
    101a:	11 f4       	brne	.+4      	; 0x1020 <__fp_round+0x18>
    101c:	60 ff       	sbrs	r22, 0
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <__fp_round+0x20>
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	08 95       	ret

0000102a <__fp_split3>:
    102a:	57 fd       	sbrc	r21, 7
    102c:	90 58       	subi	r25, 0x80	; 128
    102e:	44 0f       	add	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	59 f0       	breq	.+22     	; 0x104a <__fp_splitA+0x10>
    1034:	5f 3f       	cpi	r21, 0xFF	; 255
    1036:	71 f0       	breq	.+28     	; 0x1054 <__fp_splitA+0x1a>
    1038:	47 95       	ror	r20

0000103a <__fp_splitA>:
    103a:	88 0f       	add	r24, r24
    103c:	97 fb       	bst	r25, 7
    103e:	99 1f       	adc	r25, r25
    1040:	61 f0       	breq	.+24     	; 0x105a <__fp_splitA+0x20>
    1042:	9f 3f       	cpi	r25, 0xFF	; 255
    1044:	79 f0       	breq	.+30     	; 0x1064 <__fp_splitA+0x2a>
    1046:	87 95       	ror	r24
    1048:	08 95       	ret
    104a:	12 16       	cp	r1, r18
    104c:	13 06       	cpc	r1, r19
    104e:	14 06       	cpc	r1, r20
    1050:	55 1f       	adc	r21, r21
    1052:	f2 cf       	rjmp	.-28     	; 0x1038 <__fp_split3+0xe>
    1054:	46 95       	lsr	r20
    1056:	f1 df       	rcall	.-30     	; 0x103a <__fp_splitA>
    1058:	08 c0       	rjmp	.+16     	; 0x106a <__fp_splitA+0x30>
    105a:	16 16       	cp	r1, r22
    105c:	17 06       	cpc	r1, r23
    105e:	18 06       	cpc	r1, r24
    1060:	99 1f       	adc	r25, r25
    1062:	f1 cf       	rjmp	.-30     	; 0x1046 <__fp_splitA+0xc>
    1064:	86 95       	lsr	r24
    1066:	71 05       	cpc	r23, r1
    1068:	61 05       	cpc	r22, r1
    106a:	08 94       	sec
    106c:	08 95       	ret

0000106e <__fp_zero>:
    106e:	e8 94       	clt

00001070 <__fp_szero>:
    1070:	bb 27       	eor	r27, r27
    1072:	66 27       	eor	r22, r22
    1074:	77 27       	eor	r23, r23
    1076:	cb 01       	movw	r24, r22
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret

0000107c <__gesf2>:
    107c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_cmp>
    1080:	08 f4       	brcc	.+2      	; 0x1084 <__gesf2+0x8>
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	08 95       	ret

00001086 <__mulsf3>:
    1086:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulsf3x>
    108a:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_round>
    108e:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
    1092:	38 f0       	brcs	.+14     	; 0x10a2 <__mulsf3+0x1c>
    1094:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <__mulsf3+0x1c>
    109a:	95 23       	and	r25, r21
    109c:	11 f0       	breq	.+4      	; 0x10a2 <__mulsf3+0x1c>
    109e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
    10a2:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
    10a6:	11 24       	eor	r1, r1
    10a8:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_szero>

000010ac <__mulsf3x>:
    10ac:	0e 94 15 08 	call	0x102a	; 0x102a <__fp_split3>
    10b0:	70 f3       	brcs	.-36     	; 0x108e <__mulsf3+0x8>

000010b2 <__mulsf3_pse>:
    10b2:	95 9f       	mul	r25, r21
    10b4:	c1 f3       	breq	.-16     	; 0x10a6 <__mulsf3+0x20>
    10b6:	95 0f       	add	r25, r21
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	55 1f       	adc	r21, r21
    10bc:	62 9f       	mul	r22, r18
    10be:	f0 01       	movw	r30, r0
    10c0:	72 9f       	mul	r23, r18
    10c2:	bb 27       	eor	r27, r27
    10c4:	f0 0d       	add	r31, r0
    10c6:	b1 1d       	adc	r27, r1
    10c8:	63 9f       	mul	r22, r19
    10ca:	aa 27       	eor	r26, r26
    10cc:	f0 0d       	add	r31, r0
    10ce:	b1 1d       	adc	r27, r1
    10d0:	aa 1f       	adc	r26, r26
    10d2:	64 9f       	mul	r22, r20
    10d4:	66 27       	eor	r22, r22
    10d6:	b0 0d       	add	r27, r0
    10d8:	a1 1d       	adc	r26, r1
    10da:	66 1f       	adc	r22, r22
    10dc:	82 9f       	mul	r24, r18
    10de:	22 27       	eor	r18, r18
    10e0:	b0 0d       	add	r27, r0
    10e2:	a1 1d       	adc	r26, r1
    10e4:	62 1f       	adc	r22, r18
    10e6:	73 9f       	mul	r23, r19
    10e8:	b0 0d       	add	r27, r0
    10ea:	a1 1d       	adc	r26, r1
    10ec:	62 1f       	adc	r22, r18
    10ee:	83 9f       	mul	r24, r19
    10f0:	a0 0d       	add	r26, r0
    10f2:	61 1d       	adc	r22, r1
    10f4:	22 1f       	adc	r18, r18
    10f6:	74 9f       	mul	r23, r20
    10f8:	33 27       	eor	r19, r19
    10fa:	a0 0d       	add	r26, r0
    10fc:	61 1d       	adc	r22, r1
    10fe:	23 1f       	adc	r18, r19
    1100:	84 9f       	mul	r24, r20
    1102:	60 0d       	add	r22, r0
    1104:	21 1d       	adc	r18, r1
    1106:	82 2f       	mov	r24, r18
    1108:	76 2f       	mov	r23, r22
    110a:	6a 2f       	mov	r22, r26
    110c:	11 24       	eor	r1, r1
    110e:	9f 57       	subi	r25, 0x7F	; 127
    1110:	50 40       	sbci	r21, 0x00	; 0
    1112:	9a f0       	brmi	.+38     	; 0x113a <__mulsf3_pse+0x88>
    1114:	f1 f0       	breq	.+60     	; 0x1152 <__mulsf3_pse+0xa0>
    1116:	88 23       	and	r24, r24
    1118:	4a f0       	brmi	.+18     	; 0x112c <__mulsf3_pse+0x7a>
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	bb 1f       	adc	r27, r27
    1120:	66 1f       	adc	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	91 50       	subi	r25, 0x01	; 1
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	a9 f7       	brne	.-22     	; 0x1116 <__mulsf3_pse+0x64>
    112c:	9e 3f       	cpi	r25, 0xFE	; 254
    112e:	51 05       	cpc	r21, r1
    1130:	80 f0       	brcs	.+32     	; 0x1152 <__mulsf3_pse+0xa0>
    1132:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_inf>
    1136:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_szero>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	e4 f3       	brlt	.-8      	; 0x1136 <__mulsf3_pse+0x84>
    113e:	98 3e       	cpi	r25, 0xE8	; 232
    1140:	d4 f3       	brlt	.-12     	; 0x1136 <__mulsf3_pse+0x84>
    1142:	86 95       	lsr	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b7 95       	ror	r27
    114a:	f7 95       	ror	r31
    114c:	e7 95       	ror	r30
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	c1 f7       	brne	.-16     	; 0x1142 <__mulsf3_pse+0x90>
    1152:	fe 2b       	or	r31, r30
    1154:	88 0f       	add	r24, r24
    1156:	91 1d       	adc	r25, r1
    1158:	96 95       	lsr	r25
    115a:	87 95       	ror	r24
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <fdevopen>:
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	31 f4       	brne	.+12     	; 0x1178 <fdevopen+0x18>
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	19 f4       	brne	.+6      	; 0x1178 <fdevopen+0x18>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	3a c0       	rjmp	.+116    	; 0x11ec <fdevopen+0x8c>
    1178:	8b 01       	movw	r16, r22
    117a:	ec 01       	movw	r28, r24
    117c:	6e e0       	ldi	r22, 0x0E	; 14
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <calloc>
    1188:	fc 01       	movw	r30, r24
    118a:	89 2b       	or	r24, r25
    118c:	91 f3       	breq	.-28     	; 0x1172 <fdevopen+0x12>
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	83 83       	std	Z+3, r24	; 0x03
    1192:	01 15       	cp	r16, r1
    1194:	11 05       	cpc	r17, r1
    1196:	71 f0       	breq	.+28     	; 0x11b4 <fdevopen+0x54>
    1198:	02 87       	std	Z+10, r16	; 0x0a
    119a:	13 87       	std	Z+11, r17	; 0x0b
    119c:	81 e8       	ldi	r24, 0x81	; 129
    119e:	83 83       	std	Z+3, r24	; 0x03
    11a0:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__iob>
    11a4:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <__iob+0x1>
    11a8:	89 2b       	or	r24, r25
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <fdevopen+0x54>
    11ac:	e0 93 ac 20 	sts	0x20AC, r30	; 0x8020ac <__iob>
    11b0:	f0 93 ad 20 	sts	0x20AD, r31	; 0x8020ad <__iob+0x1>
    11b4:	20 97       	sbiw	r28, 0x00	; 0
    11b6:	c9 f0       	breq	.+50     	; 0x11ea <fdevopen+0x8a>
    11b8:	c0 87       	std	Z+8, r28	; 0x08
    11ba:	d1 87       	std	Z+9, r29	; 0x09
    11bc:	83 81       	ldd	r24, Z+3	; 0x03
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	83 83       	std	Z+3, r24	; 0x03
    11c2:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <__iob+0x2>
    11c6:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <__iob+0x3>
    11ca:	89 2b       	or	r24, r25
    11cc:	71 f4       	brne	.+28     	; 0x11ea <fdevopen+0x8a>
    11ce:	e0 93 ae 20 	sts	0x20AE, r30	; 0x8020ae <__iob+0x2>
    11d2:	f0 93 af 20 	sts	0x20AF, r31	; 0x8020af <__iob+0x3>
    11d6:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__iob+0x4>
    11da:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__iob+0x5>
    11de:	89 2b       	or	r24, r25
    11e0:	21 f4       	brne	.+8      	; 0x11ea <fdevopen+0x8a>
    11e2:	e0 93 b0 20 	sts	0x20B0, r30	; 0x8020b0 <__iob+0x4>
    11e6:	f0 93 b1 20 	sts	0x20B1, r31	; 0x8020b1 <__iob+0x5>
    11ea:	cf 01       	movw	r24, r30
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <calloc>:
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	86 9f       	mul	r24, r22
    1200:	80 01       	movw	r16, r0
    1202:	87 9f       	mul	r24, r23
    1204:	10 0d       	add	r17, r0
    1206:	96 9f       	mul	r25, r22
    1208:	10 0d       	add	r17, r0
    120a:	11 24       	eor	r1, r1
    120c:	c8 01       	movw	r24, r16
    120e:	0e 94 17 09 	call	0x122e	; 0x122e <malloc>
    1212:	ec 01       	movw	r28, r24
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	29 f0       	breq	.+10     	; 0x1222 <calloc+0x2c>
    1218:	a8 01       	movw	r20, r16
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	0e 94 38 0a 	call	0x1470	; 0x1470 <memset>
    1222:	ce 01       	movw	r24, r28
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <malloc>:
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	91 05       	cpc	r25, r1
    123a:	10 f4       	brcc	.+4      	; 0x1240 <malloc+0x12>
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <__flp>
    1244:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <__flp+0x1>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	a0 e0       	ldi	r26, 0x00	; 0
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	19 f1       	breq	.+70     	; 0x129a <malloc+0x6c>
    1254:	40 81       	ld	r20, Z
    1256:	51 81       	ldd	r21, Z+1	; 0x01
    1258:	02 81       	ldd	r16, Z+2	; 0x02
    125a:	13 81       	ldd	r17, Z+3	; 0x03
    125c:	48 17       	cp	r20, r24
    125e:	59 07       	cpc	r21, r25
    1260:	c8 f0       	brcs	.+50     	; 0x1294 <malloc+0x66>
    1262:	84 17       	cp	r24, r20
    1264:	95 07       	cpc	r25, r21
    1266:	69 f4       	brne	.+26     	; 0x1282 <malloc+0x54>
    1268:	10 97       	sbiw	r26, 0x00	; 0
    126a:	31 f0       	breq	.+12     	; 0x1278 <malloc+0x4a>
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	0c 93       	st	X, r16
    1270:	12 97       	sbiw	r26, 0x02	; 2
    1272:	13 96       	adiw	r26, 0x03	; 3
    1274:	1c 93       	st	X, r17
    1276:	27 c0       	rjmp	.+78     	; 0x12c6 <malloc+0x98>
    1278:	00 93 b4 20 	sts	0x20B4, r16	; 0x8020b4 <__flp>
    127c:	10 93 b5 20 	sts	0x20B5, r17	; 0x8020b5 <__flp+0x1>
    1280:	22 c0       	rjmp	.+68     	; 0x12c6 <malloc+0x98>
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	19 f0       	breq	.+6      	; 0x128e <malloc+0x60>
    1288:	42 17       	cp	r20, r18
    128a:	53 07       	cpc	r21, r19
    128c:	18 f4       	brcc	.+6      	; 0x1294 <malloc+0x66>
    128e:	9a 01       	movw	r18, r20
    1290:	bd 01       	movw	r22, r26
    1292:	ef 01       	movw	r28, r30
    1294:	df 01       	movw	r26, r30
    1296:	f8 01       	movw	r30, r16
    1298:	db cf       	rjmp	.-74     	; 0x1250 <malloc+0x22>
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	f9 f0       	breq	.+62     	; 0x12de <malloc+0xb0>
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	24 30       	cpi	r18, 0x04	; 4
    12a6:	31 05       	cpc	r19, r1
    12a8:	80 f4       	brcc	.+32     	; 0x12ca <malloc+0x9c>
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	21 f0       	breq	.+8      	; 0x12bc <malloc+0x8e>
    12b4:	fb 01       	movw	r30, r22
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	93 83       	std	Z+3, r25	; 0x03
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <malloc+0x96>
    12bc:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <__flp>
    12c0:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <__flp+0x1>
    12c4:	fe 01       	movw	r30, r28
    12c6:	32 96       	adiw	r30, 0x02	; 2
    12c8:	44 c0       	rjmp	.+136    	; 0x1352 <malloc+0x124>
    12ca:	fe 01       	movw	r30, r28
    12cc:	e2 0f       	add	r30, r18
    12ce:	f3 1f       	adc	r31, r19
    12d0:	81 93       	st	Z+, r24
    12d2:	91 93       	st	Z+, r25
    12d4:	22 50       	subi	r18, 0x02	; 2
    12d6:	31 09       	sbc	r19, r1
    12d8:	28 83       	st	Y, r18
    12da:	39 83       	std	Y+1, r19	; 0x01
    12dc:	3a c0       	rjmp	.+116    	; 0x1352 <malloc+0x124>
    12de:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    12e2:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    12e6:	23 2b       	or	r18, r19
    12e8:	41 f4       	brne	.+16     	; 0x12fa <malloc+0xcc>
    12ea:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    12ee:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    12f2:	20 93 b2 20 	sts	0x20B2, r18	; 0x8020b2 <__brkval>
    12f6:	30 93 b3 20 	sts	0x20B3, r19	; 0x8020b3 <__brkval+0x1>
    12fa:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    12fe:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	41 f4       	brne	.+16     	; 0x1318 <malloc+0xea>
    1308:	2d b7       	in	r18, 0x3d	; 61
    130a:	3e b7       	in	r19, 0x3e	; 62
    130c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1310:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1314:	24 1b       	sub	r18, r20
    1316:	35 0b       	sbc	r19, r21
    1318:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <__brkval>
    131c:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <__brkval+0x1>
    1320:	e2 17       	cp	r30, r18
    1322:	f3 07       	cpc	r31, r19
    1324:	a0 f4       	brcc	.+40     	; 0x134e <malloc+0x120>
    1326:	2e 1b       	sub	r18, r30
    1328:	3f 0b       	sbc	r19, r31
    132a:	28 17       	cp	r18, r24
    132c:	39 07       	cpc	r19, r25
    132e:	78 f0       	brcs	.+30     	; 0x134e <malloc+0x120>
    1330:	ac 01       	movw	r20, r24
    1332:	4e 5f       	subi	r20, 0xFE	; 254
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	24 17       	cp	r18, r20
    1338:	35 07       	cpc	r19, r21
    133a:	48 f0       	brcs	.+18     	; 0x134e <malloc+0x120>
    133c:	4e 0f       	add	r20, r30
    133e:	5f 1f       	adc	r21, r31
    1340:	40 93 b2 20 	sts	0x20B2, r20	; 0x8020b2 <__brkval>
    1344:	50 93 b3 20 	sts	0x20B3, r21	; 0x8020b3 <__brkval+0x1>
    1348:	81 93       	st	Z+, r24
    134a:	91 93       	st	Z+, r25
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <malloc+0x124>
    134e:	e0 e0       	ldi	r30, 0x00	; 0
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	cf 01       	movw	r24, r30
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <free>:
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f4       	brne	.+2      	; 0x1368 <free+0xa>
    1366:	81 c0       	rjmp	.+258    	; 0x146a <free+0x10c>
    1368:	fc 01       	movw	r30, r24
    136a:	32 97       	sbiw	r30, 0x02	; 2
    136c:	12 82       	std	Z+2, r1	; 0x02
    136e:	13 82       	std	Z+3, r1	; 0x03
    1370:	a0 91 b4 20 	lds	r26, 0x20B4	; 0x8020b4 <__flp>
    1374:	b0 91 b5 20 	lds	r27, 0x20B5	; 0x8020b5 <__flp+0x1>
    1378:	10 97       	sbiw	r26, 0x00	; 0
    137a:	81 f4       	brne	.+32     	; 0x139c <free+0x3e>
    137c:	20 81       	ld	r18, Z
    137e:	31 81       	ldd	r19, Z+1	; 0x01
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    1388:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    138c:	28 17       	cp	r18, r24
    138e:	39 07       	cpc	r19, r25
    1390:	51 f5       	brne	.+84     	; 0x13e6 <free+0x88>
    1392:	e0 93 b2 20 	sts	0x20B2, r30	; 0x8020b2 <__brkval>
    1396:	f0 93 b3 20 	sts	0x20B3, r31	; 0x8020b3 <__brkval+0x1>
    139a:	67 c0       	rjmp	.+206    	; 0x146a <free+0x10c>
    139c:	ed 01       	movw	r28, r26
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	ce 17       	cp	r28, r30
    13a4:	df 07       	cpc	r29, r31
    13a6:	40 f4       	brcc	.+16     	; 0x13b8 <free+0x5a>
    13a8:	4a 81       	ldd	r20, Y+2	; 0x02
    13aa:	5b 81       	ldd	r21, Y+3	; 0x03
    13ac:	9e 01       	movw	r18, r28
    13ae:	41 15       	cp	r20, r1
    13b0:	51 05       	cpc	r21, r1
    13b2:	f1 f0       	breq	.+60     	; 0x13f0 <free+0x92>
    13b4:	ea 01       	movw	r28, r20
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <free+0x44>
    13b8:	c2 83       	std	Z+2, r28	; 0x02
    13ba:	d3 83       	std	Z+3, r29	; 0x03
    13bc:	40 81       	ld	r20, Z
    13be:	51 81       	ldd	r21, Z+1	; 0x01
    13c0:	84 0f       	add	r24, r20
    13c2:	95 1f       	adc	r25, r21
    13c4:	c8 17       	cp	r28, r24
    13c6:	d9 07       	cpc	r29, r25
    13c8:	59 f4       	brne	.+22     	; 0x13e0 <free+0x82>
    13ca:	88 81       	ld	r24, Y
    13cc:	99 81       	ldd	r25, Y+1	; 0x01
    13ce:	84 0f       	add	r24, r20
    13d0:	95 1f       	adc	r25, r21
    13d2:	02 96       	adiw	r24, 0x02	; 2
    13d4:	80 83       	st	Z, r24
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	82 83       	std	Z+2, r24	; 0x02
    13de:	93 83       	std	Z+3, r25	; 0x03
    13e0:	21 15       	cp	r18, r1
    13e2:	31 05       	cpc	r19, r1
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <free+0x92>
    13e6:	e0 93 b4 20 	sts	0x20B4, r30	; 0x8020b4 <__flp>
    13ea:	f0 93 b5 20 	sts	0x20B5, r31	; 0x8020b5 <__flp+0x1>
    13ee:	3d c0       	rjmp	.+122    	; 0x146a <free+0x10c>
    13f0:	e9 01       	movw	r28, r18
    13f2:	ea 83       	std	Y+2, r30	; 0x02
    13f4:	fb 83       	std	Y+3, r31	; 0x03
    13f6:	49 91       	ld	r20, Y+
    13f8:	59 91       	ld	r21, Y+
    13fa:	c4 0f       	add	r28, r20
    13fc:	d5 1f       	adc	r29, r21
    13fe:	ec 17       	cp	r30, r28
    1400:	fd 07       	cpc	r31, r29
    1402:	61 f4       	brne	.+24     	; 0x141c <free+0xbe>
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	84 0f       	add	r24, r20
    140a:	95 1f       	adc	r25, r21
    140c:	02 96       	adiw	r24, 0x02	; 2
    140e:	e9 01       	movw	r28, r18
    1410:	88 83       	st	Y, r24
    1412:	99 83       	std	Y+1, r25	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	9b 83       	std	Y+3, r25	; 0x03
    141c:	e0 e0       	ldi	r30, 0x00	; 0
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	12 96       	adiw	r26, 0x02	; 2
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	13 97       	sbiw	r26, 0x03	; 3
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	19 f0       	breq	.+6      	; 0x1432 <free+0xd4>
    142c:	fd 01       	movw	r30, r26
    142e:	dc 01       	movw	r26, r24
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <free+0xc2>
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	9d 01       	movw	r18, r26
    143a:	2e 5f       	subi	r18, 0xFE	; 254
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    1446:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    144a:	28 17       	cp	r18, r24
    144c:	39 07       	cpc	r19, r25
    144e:	69 f4       	brne	.+26     	; 0x146a <free+0x10c>
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	29 f4       	brne	.+10     	; 0x145e <free+0x100>
    1454:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <__flp>
    1458:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <__flp+0x1>
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <free+0x104>
    145e:	12 82       	std	Z+2, r1	; 0x02
    1460:	13 82       	std	Z+3, r1	; 0x03
    1462:	a0 93 b2 20 	sts	0x20B2, r26	; 0x8020b2 <__brkval>
    1466:	b0 93 b3 20 	sts	0x20B3, r27	; 0x8020b3 <__brkval+0x1>
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <memset>:
    1470:	dc 01       	movw	r26, r24
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <memset+0x6>
    1474:	6d 93       	st	X+, r22
    1476:	41 50       	subi	r20, 0x01	; 1
    1478:	50 40       	sbci	r21, 0x00	; 0
    147a:	e0 f7       	brcc	.-8      	; 0x1474 <memset+0x4>
    147c:	08 95       	ret

0000147e <_exit>:
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
