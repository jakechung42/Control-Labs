
xmega_HDD_StateSpace_fullObs_Integrator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000148a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00802000  0000148a  0000151e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  0080204e  0080204e  0000156c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000605d  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e88  00000000  00000000  000076b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000881  00000000  00000000  0000b539  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000bdbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049d8  00000000  00000000  0000bf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033a  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00010c32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	ea e8       	ldi	r30, 0x8A	; 138
     220:	f4 e1       	ldi	r31, 0x14	; 20
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	ae 34       	cpi	r26, 0x4E	; 78
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	ae e4       	ldi	r26, 0x4E	; 78
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a6 3b       	cpi	r26, 0xB6	; 182
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 25 06 	call	0xc4a	; 0xc4a <main>
     248:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
     266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
	//read value input
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
     2b6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     2ba:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     2be:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <adcIn>
     2c2:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <adcIn+0x1>
	setPoint = (adcIn/4095.)-0.030;		//convert to voltage
     2c6:	60 91 82 20 	lds	r22, 0x2082	; 0x802082 <adcIn>
     2ca:	70 91 83 20 	lds	r23, 0x2083	; 0x802083 <adcIn+0x1>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 90 07 	call	0xf20	; 0xf20 <__floatunsisf>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 ef       	ldi	r19, 0xF0	; 240
     2da:	4f e7       	ldi	r20, 0x7F	; 127
     2dc:	55 e4       	ldi	r21, 0x45	; 69
     2de:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__divsf3>
     2e2:	2f e8       	ldi	r18, 0x8F	; 143
     2e4:	32 ec       	ldi	r19, 0xC2	; 194
     2e6:	45 ef       	ldi	r20, 0xF5	; 245
     2e8:	5c e3       	ldi	r21, 0x3C	; 60
     2ea:	0e 94 76 06 	call	0xcec	; 0xcec <__subsf3>
     2ee:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <setPoint>
     2f2:	70 93 7f 20 	sts	0x207F, r23	; 0x80207f <setPoint+0x1>
     2f6:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <setPoint+0x2>
     2fa:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <setPoint+0x3>
    Rin      = setPoint;
     2fe:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <setPoint>
     302:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <setPoint+0x1>
     306:	a0 91 80 20 	lds	r26, 0x2080	; 0x802080 <setPoint+0x2>
     30a:	b0 91 81 20 	lds	r27, 0x2081	; 0x802081 <setPoint+0x3>
     30e:	80 93 98 20 	sts	0x2098, r24	; 0x802098 <Rin>
     312:	90 93 99 20 	sts	0x2099, r25	; 0x802099 <Rin+0x1>
     316:	a0 93 9a 20 	sts	0x209A, r26	; 0x80209a <Rin+0x2>
     31a:	b0 93 9b 20 	sts	0x209B, r27	; 0x80209b <Rin+0x3>
	
    //handle the encoder
	encCount = TCC0.CNT;			//read encoder
     31e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
     322:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
     326:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <encCount>
     32a:	90 93 8d 20 	sts	0x208D, r25	; 0x80208d <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
     32e:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <encCount>
     332:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <encCount+0x1>
     336:	99 23       	and	r25, r25
     338:	24 f4       	brge	.+8      	; 0x342 <__vector_20+0xd0>
     33a:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <encCount>
     33e:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
     342:	60 91 8c 20 	lds	r22, 0x208C	; 0x80208c <encCount>
     346:	70 91 8d 20 	lds	r23, 0x208D	; 0x80208d <encCount+0x1>
     34a:	07 2e       	mov	r0, r23
     34c:	00 0c       	add	r0, r0
     34e:	88 0b       	sbc	r24, r24
     350:	99 0b       	sbc	r25, r25
     352:	0e 94 92 07 	call	0xf24	; 0xf24 <__floatsisf>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	4f e2       	ldi	r20, 0x2F	; 47
     35c:	54 e4       	ldi	r21, 0x44	; 68
     35e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__divsf3>
     362:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <position>
     366:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <position+0x1>
     36a:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <position+0x2>
     36e:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
     372:	60 91 88 20 	lds	r22, 0x2088	; 0x802088 <position>
     376:	70 91 89 20 	lds	r23, 0x2089	; 0x802089 <position+0x1>
     37a:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <position+0x2>
     37e:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <position+0x3>
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 ef       	ldi	r19, 0xF0	; 240
     386:	4f e7       	ldi	r20, 0x7F	; 127
     388:	55 e4       	ldi	r21, 0x45	; 69
     38a:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     38e:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <positionDAC>
     392:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <positionDAC+0x1>
     396:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <positionDAC+0x2>
     39a:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <positionDAC+0x3>
	if(positionDAC < 0) positionDAC = 0;	//rollover check
     39e:	60 91 84 20 	lds	r22, 0x2084	; 0x802084 <positionDAC>
     3a2:	70 91 85 20 	lds	r23, 0x2085	; 0x802085 <positionDAC+0x1>
     3a6:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <positionDAC+0x2>
     3aa:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <positionDAC+0x3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	a9 01       	movw	r20, r18
     3b4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__cmpsf2>
     3b8:	88 23       	and	r24, r24
     3ba:	44 f4       	brge	.+16     	; 0x3cc <__vector_20+0x15a>
     3bc:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <positionDAC>
     3c0:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <positionDAC+0x1>
     3c4:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <positionDAC+0x2>
     3c8:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <positionDAC+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = 0.4;  // Initial value
     3cc:	8d ec       	ldi	r24, 0xCD	; 205
     3ce:	9c ec       	ldi	r25, 0xCC	; 204
     3d0:	ac ec       	ldi	r26, 0xCC	; 204
     3d2:	be e3       	ldi	r27, 0x3E	; 62
     3d4:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <ctrlCorrection>
     3d8:	90 93 73 20 	sts	0x2073, r25	; 0x802073 <ctrlCorrection+0x1>
     3dc:	a0 93 74 20 	sts	0x2074, r26	; 0x802074 <ctrlCorrection+0x2>
     3e0:	b0 93 75 20 	sts	0x2075, r27	; 0x802075 <ctrlCorrection+0x3>
	
	/*
    State Space equations
    */

    ctrlOut = Ki*xI_km1 - (K1*x1_km1 + K2*x2_km1 + K3*x3_km1);
     3e4:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <Ki>
     3e8:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <Ki+0x1>
     3ec:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <Ki+0x2>
     3f0:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <Ki+0x3>
     3f4:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     3f8:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     3fc:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     400:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     404:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     408:	6b 01       	movw	r12, r22
     40a:	7c 01       	movw	r14, r24
     40c:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <K1>
     410:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <K1+0x1>
     414:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <K1+0x2>
     418:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <K1+0x3>
     41c:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     420:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     424:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     428:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     42c:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     430:	4b 01       	movw	r8, r22
     432:	5c 01       	movw	r10, r24
     434:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <K2>
     438:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <K2+0x1>
     43c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <K2+0x2>
     440:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <K2+0x3>
     444:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     448:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     44c:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     450:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     454:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
     45c:	c5 01       	movw	r24, r10
     45e:	b4 01       	movw	r22, r8
     460:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     464:	4b 01       	movw	r8, r22
     466:	5c 01       	movw	r10, r24
     468:	60 91 52 20 	lds	r22, 0x2052	; 0x802052 <K3>
     46c:	70 91 53 20 	lds	r23, 0x2053	; 0x802053 <K3+0x1>
     470:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <K3+0x2>
     474:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <K3+0x3>
     478:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     47c:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     480:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     484:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     488:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     48c:	9b 01       	movw	r18, r22
     48e:	ac 01       	movw	r20, r24
     490:	c5 01       	movw	r24, r10
     492:	b4 01       	movw	r22, r8
     494:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
     49c:	c7 01       	movw	r24, r14
     49e:	b6 01       	movw	r22, r12
     4a0:	0e 94 76 06 	call	0xcec	; 0xcec <__subsf3>
     4a4:	60 93 7a 20 	sts	0x207A, r22	; 0x80207a <ctrlOut>
     4a8:	70 93 7b 20 	sts	0x207B, r23	; 0x80207b <ctrlOut+0x1>
     4ac:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <ctrlOut+0x2>
     4b0:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <ctrlOut+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
     4b4:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <ctrlOut>
     4b8:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <ctrlOut+0x1>
     4bc:	a0 91 7c 20 	lds	r26, 0x207C	; 0x80207c <ctrlOut+0x2>
     4c0:	b0 91 7d 20 	lds	r27, 0x207D	; 0x80207d <ctrlOut+0x3>
     4c4:	bc 01       	movw	r22, r24
     4c6:	cd 01       	movw	r24, r26
     4c8:	9f 77       	andi	r25, 0x7F	; 127
     4ca:	20 91 46 20 	lds	r18, 0x2046	; 0x802046 <maxVoltage>
     4ce:	30 91 47 20 	lds	r19, 0x2047	; 0x802047 <maxVoltage+0x1>
     4d2:	40 91 48 20 	lds	r20, 0x2048	; 0x802048 <maxVoltage+0x2>
     4d6:	50 91 49 20 	lds	r21, 0x2049	; 0x802049 <maxVoltage+0x3>
     4da:	0e 94 42 08 	call	0x1084	; 0x1084 <__gesf2>
     4de:	88 23       	and	r24, r24
     4e0:	d4 f0       	brlt	.+52     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
	ctrlOut = copysign(maxVoltage, ctrlOut);
     4e2:	40 91 7a 20 	lds	r20, 0x207A	; 0x80207a <ctrlOut>
     4e6:	50 91 7b 20 	lds	r21, 0x207B	; 0x80207b <ctrlOut+0x1>
     4ea:	60 91 7c 20 	lds	r22, 0x207C	; 0x80207c <ctrlOut+0x2>
     4ee:	70 91 7d 20 	lds	r23, 0x207D	; 0x80207d <ctrlOut+0x3>
     4f2:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <maxVoltage>
     4f6:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <maxVoltage+0x1>
     4fa:	a0 91 48 20 	lds	r26, 0x2048	; 0x802048 <maxVoltage+0x2>
     4fe:	b0 91 49 20 	lds	r27, 0x2049	; 0x802049 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     502:	77 fb       	bst	r23, 7
     504:	b7 f9       	bld	r27, 7
     506:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <ctrlOut>
     50a:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <ctrlOut+0x1>
     50e:	a0 93 7c 20 	sts	0x207C, r26	; 0x80207c <ctrlOut+0x2>
     512:	b0 93 7d 20 	sts	0x207D, r27	; 0x80207d <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
     516:	60 91 7a 20 	lds	r22, 0x207A	; 0x80207a <ctrlOut>
     51a:	70 91 7b 20 	lds	r23, 0x207B	; 0x80207b <ctrlOut+0x1>
     51e:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <ctrlOut+0x2>
     522:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <ctrlOut+0x3>
     526:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <ctrlCorrection>
     52a:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <ctrlCorrection+0x1>
     52e:	40 91 74 20 	lds	r20, 0x2074	; 0x802074 <ctrlCorrection+0x2>
     532:	50 91 75 20 	lds	r21, 0x2075	; 0x802075 <ctrlCorrection+0x3>
     536:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     53a:	20 91 4e 20 	lds	r18, 0x204E	; 0x80204e <__data_end>
     53e:	30 91 4f 20 	lds	r19, 0x204F	; 0x80204f <__data_end+0x1>
     542:	40 91 50 20 	lds	r20, 0x2050	; 0x802050 <__data_end+0x2>
     546:	50 91 51 20 	lds	r21, 0x2051	; 0x802051 <__data_end+0x3>
     54a:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	55 e4       	ldi	r21, 0x45	; 69
     556:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     55a:	60 93 76 20 	sts	0x2076, r22	; 0x802076 <ctrlDAC>
     55e:	70 93 77 20 	sts	0x2077, r23	; 0x802077 <ctrlDAC+0x1>
     562:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <ctrlDAC+0x2>
     566:	90 93 79 20 	sts	0x2079, r25	; 0x802079 <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
     56a:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     56e:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     572:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     576:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	a9 01       	movw	r20, r18
     580:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	44 f4       	brge	.+16     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     588:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <ctrlDAC>
     58c:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <ctrlDAC+0x1>
     590:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <ctrlDAC+0x2>
     594:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
     598:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     59c:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     5a0:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     5a4:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 ef       	ldi	r19, 0xF0	; 240
     5ac:	4f e7       	ldi	r20, 0x7F	; 127
     5ae:	55 e4       	ldi	r21, 0x45	; 69
     5b0:	0e 94 42 08 	call	0x1084	; 0x1084 <__gesf2>
     5b4:	18 16       	cp	r1, r24
     5b6:	64 f4       	brge	.+24     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 ef       	ldi	r25, 0xF0	; 240
     5bc:	af e7       	ldi	r26, 0x7F	; 127
     5be:	b5 e4       	ldi	r27, 0x45	; 69
     5c0:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <ctrlDAC>
     5c4:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <ctrlDAC+0x1>
     5c8:	a0 93 78 20 	sts	0x2078, r26	; 0x802078 <ctrlDAC+0x2>
     5cc:	b0 93 79 20 	sts	0x2079, r27	; 0x802079 <ctrlDAC+0x3>
	
	//ctrlDAC = 0;											// Used to check the voltage of the DAC

	// flip the order to check channel 0 and channel 1
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
     5d0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     5d4:	80 ff       	sbrs	r24, 0
     5d6:	fc cf       	rjmp	.-8      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
     5d8:	60 91 84 20 	lds	r22, 0x2084	; 0x802084 <positionDAC>
     5dc:	70 91 85 20 	lds	r23, 0x2085	; 0x802085 <positionDAC+0x1>
     5e0:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <positionDAC+0x2>
     5e4:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <positionDAC+0x3>
     5e8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fixsfsi>
     5ec:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     5f0:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
     5f4:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     5f8:	81 ff       	sbrs	r24, 1
     5fa:	fc cf       	rjmp	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
     5fc:	60 91 76 20 	lds	r22, 0x2076	; 0x802076 <ctrlDAC>
     600:	70 91 77 20 	lds	r23, 0x2077	; 0x802077 <ctrlDAC+0x1>
     604:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <ctrlDAC+0x2>
     608:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <ctrlDAC+0x3>
     60c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fixsfsi>
     610:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
     614:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
     618:	80 e8       	ldi	r24, 0x80	; 128
     61a:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>

    C_k = position; //encoder data
     61e:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <position>
     622:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <position+0x1>
     626:	a0 91 8a 20 	lds	r26, 0x208A	; 0x80208a <position+0x2>
     62a:	b0 91 8b 20 	lds	r27, 0x208B	; 0x80208b <position+0x3>
     62e:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <C_k>
     632:	90 93 9d 20 	sts	0x209D, r25	; 0x80209d <C_k+0x1>
     636:	a0 93 9e 20 	sts	0x209E, r26	; 0x80209e <C_k+0x2>
     63a:	b0 93 9f 20 	sts	0x209F, r27	; 0x80209f <C_k+0x3>

    x1_k = (A1_11*x1_km1 + A1_12*x2_km1 + A1_13*x3_km1) + B1*Ki*xI_km1 + L1*C_km1;
     63e:	60 91 42 20 	lds	r22, 0x2042	; 0x802042 <A1_11>
     642:	70 91 43 20 	lds	r23, 0x2043	; 0x802043 <A1_11+0x1>
     646:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <A1_11+0x2>
     64a:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <A1_11+0x3>
     64e:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     652:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     656:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     65a:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     65e:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     662:	6b 01       	movw	r12, r22
     664:	7c 01       	movw	r14, r24
     666:	60 91 3e 20 	lds	r22, 0x203E	; 0x80203e <A1_12>
     66a:	70 91 3f 20 	lds	r23, 0x203F	; 0x80203f <A1_12+0x1>
     66e:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <A1_12+0x2>
     672:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <A1_12+0x3>
     676:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     67a:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     67e:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     682:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     686:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c7 01       	movw	r24, r14
     690:	b6 01       	movw	r22, r12
     692:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
     69a:	60 91 5a 20 	lds	r22, 0x205A	; 0x80205a <A1_13>
     69e:	70 91 5b 20 	lds	r23, 0x205B	; 0x80205b <A1_13+0x1>
     6a2:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <A1_13+0x2>
     6a6:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <A1_13+0x3>
     6aa:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     6ae:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     6b2:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     6b6:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     6ba:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     6ca:	6b 01       	movw	r12, r22
     6cc:	7c 01       	movw	r14, r24
     6ce:	60 91 56 20 	lds	r22, 0x2056	; 0x802056 <B1>
     6d2:	70 91 57 20 	lds	r23, 0x2057	; 0x802057 <B1+0x1>
     6d6:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <B1+0x2>
     6da:	90 91 59 20 	lds	r25, 0x2059	; 0x802059 <B1+0x3>
     6de:	20 91 1a 20 	lds	r18, 0x201A	; 0x80201a <Ki>
     6e2:	30 91 1b 20 	lds	r19, 0x201B	; 0x80201b <Ki+0x1>
     6e6:	40 91 1c 20 	lds	r20, 0x201C	; 0x80201c <Ki+0x2>
     6ea:	50 91 1d 20 	lds	r21, 0x201D	; 0x80201d <Ki+0x3>
     6ee:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     6f2:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     6f6:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     6fa:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     6fe:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     702:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     712:	6b 01       	movw	r12, r22
     714:	7c 01       	movw	r14, r24
     716:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <L1>
     71a:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <L1+0x1>
     71e:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <L1+0x2>
     722:	90 91 11 20 	lds	r25, 0x2011	; 0x802011 <L1+0x3>
     726:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     72a:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     72e:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     732:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     736:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	c7 01       	movw	r24, r14
     740:	b6 01       	movw	r22, r12
     742:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     746:	60 93 a8 20 	sts	0x20A8, r22	; 0x8020a8 <x1_k>
     74a:	70 93 a9 20 	sts	0x20A9, r23	; 0x8020a9 <x1_k+0x1>
     74e:	80 93 aa 20 	sts	0x20AA, r24	; 0x8020aa <x1_k+0x2>
     752:	90 93 ab 20 	sts	0x20AB, r25	; 0x8020ab <x1_k+0x3>
    x2_k = (A1_21*x1_km1 + A1_22*x2_km1 + A1_23*x3_km1) + B2*Ki*xI_km1 + L2*C_km1;
     756:	60 91 3a 20 	lds	r22, 0x203A	; 0x80203a <A1_21>
     75a:	70 91 3b 20 	lds	r23, 0x203B	; 0x80203b <A1_21+0x1>
     75e:	80 91 3c 20 	lds	r24, 0x203C	; 0x80203c <A1_21+0x2>
     762:	90 91 3d 20 	lds	r25, 0x203D	; 0x80203d <A1_21+0x3>
     766:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     76a:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     76e:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     772:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     776:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     77a:	6b 01       	movw	r12, r22
     77c:	7c 01       	movw	r14, r24
     77e:	60 91 36 20 	lds	r22, 0x2036	; 0x802036 <A1_22>
     782:	70 91 37 20 	lds	r23, 0x2037	; 0x802037 <A1_22+0x1>
     786:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <A1_22+0x2>
     78a:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <A1_22+0x3>
     78e:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     792:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     796:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     79a:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     79e:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
     7b2:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <A1_23>
     7b6:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <A1_23+0x1>
     7ba:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <A1_23+0x2>
     7be:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <A1_23+0x3>
     7c2:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     7c6:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     7ca:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     7ce:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     7d2:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	c7 01       	movw	r24, r14
     7dc:	b6 01       	movw	r22, r12
     7de:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24
     7e6:	60 91 22 20 	lds	r22, 0x2022	; 0x802022 <B2>
     7ea:	70 91 23 20 	lds	r23, 0x2023	; 0x802023 <B2+0x1>
     7ee:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <B2+0x2>
     7f2:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <B2+0x3>
     7f6:	20 91 1a 20 	lds	r18, 0x201A	; 0x80201a <Ki>
     7fa:	30 91 1b 20 	lds	r19, 0x201B	; 0x80201b <Ki+0x1>
     7fe:	40 91 1c 20 	lds	r20, 0x201C	; 0x80201c <Ki+0x2>
     802:	50 91 1d 20 	lds	r21, 0x201D	; 0x80201d <Ki+0x3>
     806:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     80a:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     80e:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     812:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     816:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     81a:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     82a:	6b 01       	movw	r12, r22
     82c:	7c 01       	movw	r14, r24
     82e:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <L2>
     832:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <L2+0x1>
     836:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <L2+0x2>
     83a:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <L2+0x3>
     83e:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     842:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     846:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     84a:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     84e:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     85e:	60 93 a4 20 	sts	0x20A4, r22	; 0x8020a4 <x2_k>
     862:	70 93 a5 20 	sts	0x20A5, r23	; 0x8020a5 <x2_k+0x1>
     866:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <x2_k+0x2>
     86a:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <x2_k+0x3>
    x3_k = (A1_31*x1_km1 + A1_32*x2_km1 + A1_33*x3_km1) + B3*Ki*xI_km1 + L3*C_km1;
     86e:	60 91 2e 20 	lds	r22, 0x202E	; 0x80202e <A1_31>
     872:	70 91 2f 20 	lds	r23, 0x202F	; 0x80202f <A1_31+0x1>
     876:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <A1_31+0x2>
     87a:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <A1_31+0x3>
     87e:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <x1_km1>
     882:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <x1_km1+0x1>
     886:	40 91 6c 20 	lds	r20, 0x206C	; 0x80206c <x1_km1+0x2>
     88a:	50 91 6d 20 	lds	r21, 0x206D	; 0x80206d <x1_km1+0x3>
     88e:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
     896:	60 91 2a 20 	lds	r22, 0x202A	; 0x80202a <A1_32>
     89a:	70 91 2b 20 	lds	r23, 0x202B	; 0x80202b <A1_32+0x1>
     89e:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <A1_32+0x2>
     8a2:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <A1_32+0x3>
     8a6:	20 91 66 20 	lds	r18, 0x2066	; 0x802066 <x2_km1>
     8aa:	30 91 67 20 	lds	r19, 0x2067	; 0x802067 <x2_km1+0x1>
     8ae:	40 91 68 20 	lds	r20, 0x2068	; 0x802068 <x2_km1+0x2>
     8b2:	50 91 69 20 	lds	r21, 0x2069	; 0x802069 <x2_km1+0x3>
     8b6:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     8c6:	6b 01       	movw	r12, r22
     8c8:	7c 01       	movw	r14, r24
     8ca:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <A1_33>
     8ce:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <A1_33+0x1>
     8d2:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <A1_33+0x2>
     8d6:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <A1_33+0x3>
     8da:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <x3_km1>
     8de:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <x3_km1+0x1>
     8e2:	40 91 64 20 	lds	r20, 0x2064	; 0x802064 <x3_km1+0x2>
     8e6:	50 91 65 20 	lds	r21, 0x2065	; 0x802065 <x3_km1+0x3>
     8ea:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <B3>
     902:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <B3+0x1>
     906:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <B3+0x2>
     90a:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <B3+0x3>
     90e:	20 91 1a 20 	lds	r18, 0x201A	; 0x80201a <Ki>
     912:	30 91 1b 20 	lds	r19, 0x201B	; 0x80201b <Ki+0x1>
     916:	40 91 1c 20 	lds	r20, 0x201C	; 0x80201c <Ki+0x2>
     91a:	50 91 1d 20 	lds	r21, 0x201D	; 0x80201d <Ki+0x3>
     91e:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     922:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     926:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     92a:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     92e:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     932:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
     946:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <L3>
     94a:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <L3+0x1>
     94e:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <L3+0x2>
     952:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <L3+0x3>
     956:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <C_km1>
     95a:	30 91 6f 20 	lds	r19, 0x206F	; 0x80206f <C_km1+0x1>
     95e:	40 91 70 20 	lds	r20, 0x2070	; 0x802070 <C_km1+0x2>
     962:	50 91 71 20 	lds	r21, 0x2071	; 0x802071 <C_km1+0x3>
     966:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     976:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <x3_k>
     97a:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <x3_k+0x1>
     97e:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <x3_k+0x2>
     982:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <x3_k+0x3>

    xI_k = xI_km1 + (Rin - C_k);
     986:	60 91 98 20 	lds	r22, 0x2098	; 0x802098 <Rin>
     98a:	70 91 99 20 	lds	r23, 0x2099	; 0x802099 <Rin+0x1>
     98e:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <Rin+0x2>
     992:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <Rin+0x3>
     996:	20 91 9c 20 	lds	r18, 0x209C	; 0x80209c <C_k>
     99a:	30 91 9d 20 	lds	r19, 0x209D	; 0x80209d <C_k+0x1>
     99e:	40 91 9e 20 	lds	r20, 0x209E	; 0x80209e <C_k+0x2>
     9a2:	50 91 9f 20 	lds	r21, 0x209F	; 0x80209f <C_k+0x3>
     9a6:	0e 94 76 06 	call	0xcec	; 0xcec <__subsf3>
     9aa:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <xI_km1>
     9ae:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <xI_km1+0x1>
     9b2:	40 91 60 20 	lds	r20, 0x2060	; 0x802060 <xI_km1+0x2>
     9b6:	50 91 61 20 	lds	r21, 0x2061	; 0x802061 <xI_km1+0x3>
     9ba:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     9be:	60 93 a0 20 	sts	0x20A0, r22	; 0x8020a0 <xI_k>
     9c2:	70 93 a1 20 	sts	0x20A1, r23	; 0x8020a1 <xI_k+0x1>
     9c6:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <xI_k+0x2>
     9ca:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <xI_k+0x3>

    //Update variables
    x1_km1 = x1_k;
     9ce:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <x1_k>
     9d2:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <x1_k+0x1>
     9d6:	a0 91 aa 20 	lds	r26, 0x20AA	; 0x8020aa <x1_k+0x2>
     9da:	b0 91 ab 20 	lds	r27, 0x20AB	; 0x8020ab <x1_k+0x3>
     9de:	80 93 6a 20 	sts	0x206A, r24	; 0x80206a <x1_km1>
     9e2:	90 93 6b 20 	sts	0x206B, r25	; 0x80206b <x1_km1+0x1>
     9e6:	a0 93 6c 20 	sts	0x206C, r26	; 0x80206c <x1_km1+0x2>
     9ea:	b0 93 6d 20 	sts	0x206D, r27	; 0x80206d <x1_km1+0x3>
    x2_km1 = x2_k;
     9ee:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <x2_k>
     9f2:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <x2_k+0x1>
     9f6:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <x2_k+0x2>
     9fa:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <x2_k+0x3>
     9fe:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <x2_km1>
     a02:	90 93 67 20 	sts	0x2067, r25	; 0x802067 <x2_km1+0x1>
     a06:	a0 93 68 20 	sts	0x2068, r26	; 0x802068 <x2_km1+0x2>
     a0a:	b0 93 69 20 	sts	0x2069, r27	; 0x802069 <x2_km1+0x3>
    x3_km1 = x3_k;
     a0e:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <x3_k>
     a12:	90 91 95 20 	lds	r25, 0x2095	; 0x802095 <x3_k+0x1>
     a16:	a0 91 96 20 	lds	r26, 0x2096	; 0x802096 <x3_k+0x2>
     a1a:	b0 91 97 20 	lds	r27, 0x2097	; 0x802097 <x3_k+0x3>
     a1e:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <x3_km1>
     a22:	90 93 63 20 	sts	0x2063, r25	; 0x802063 <x3_km1+0x1>
     a26:	a0 93 64 20 	sts	0x2064, r26	; 0x802064 <x3_km1+0x2>
     a2a:	b0 93 65 20 	sts	0x2065, r27	; 0x802065 <x3_km1+0x3>

    xI_km1 = xI_k;
     a2e:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <xI_k>
     a32:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <xI_k+0x1>
     a36:	a0 91 a2 20 	lds	r26, 0x20A2	; 0x8020a2 <xI_k+0x2>
     a3a:	b0 91 a3 20 	lds	r27, 0x20A3	; 0x8020a3 <xI_k+0x3>
     a3e:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <xI_km1>
     a42:	90 93 5f 20 	sts	0x205F, r25	; 0x80205f <xI_km1+0x1>
     a46:	a0 93 60 20 	sts	0x2060, r26	; 0x802060 <xI_km1+0x2>
     a4a:	b0 93 61 20 	sts	0x2061, r27	; 0x802061 <xI_km1+0x3>

    C_km1 = C_k;
     a4e:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <C_k>
     a52:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <C_k+0x1>
     a56:	a0 91 9e 20 	lds	r26, 0x209E	; 0x80209e <C_k+0x2>
     a5a:	b0 91 9f 20 	lds	r27, 0x209F	; 0x80209f <C_k+0x3>
     a5e:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <C_km1>
     a62:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <C_km1+0x1>
     a66:	a0 93 70 20 	sts	0x2070, r26	; 0x802070 <C_km1+0x2>
     a6a:	b0 93 71 20 	sts	0x2071, r27	; 0x802071 <C_km1+0x3>

    // printf("Rin = %d, C_k = %d, x1_km1 = %d, x2_km1 = %d, ctrlOut = %d\n", (int)(Rin*100), (int)(C_k*100), (int)(x1_km1*100), (int)(x2_km1*100), (int)(ctrlOut*100));
}
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	bf 90       	pop	r11
     a90:	af 90       	pop	r10
     a92:	9f 90       	pop	r9
     a94:	8f 90       	pop	r8
     a96:	0f 90       	pop	r0
     a98:	0b be       	out	0x3b, r0	; 59
     a9a:	0f 90       	pop	r0
     a9c:	09 be       	out	0x39, r0	; 57
     a9e:	0f 90       	pop	r0
     aa0:	08 be       	out	0x38, r0	; 56
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     aac:	e0 e5       	ldi	r30, 0x50	; 80
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
     ab6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     aba:	81 ff       	sbrs	r24, 1
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
     abe:	88 ed       	ldi	r24, 0xD8	; 216
     ac0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
     ac8:	08 95       	ret

00000aca <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
     aca:	e0 e4       	ldi	r30, 0x40	; 64
     acc:	f6 e0       	ldi	r31, 0x06	; 6
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     ad6:	e0 ea       	ldi	r30, 0xA0	; 160
     ad8:	f8 e0       	ldi	r31, 0x08	; 8
     ada:	85 81       	ldd	r24, Z+5	; 0x05
     adc:	83 60       	ori	r24, 0x03	; 3
     ade:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     ae0:	8b e6       	ldi	r24, 0x6B	; 107
     ae2:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     ae4:	80 eb       	ldi	r24, 0xB0	; 176
     ae6:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
     ae8:	84 81       	ldd	r24, Z+4	; 0x04
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 b4 08 	call	0x1168	; 0x1168 <fdevopen>
     afa:	08 95       	ret

00000afc <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
     afc:	e0 e6       	ldi	r30, 0x60	; 96
     afe:	f6 e0       	ldi	r31, 0x06	; 6
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
     b04:	80 89       	ldd	r24, Z+16	; 0x10
     b06:	83 60       	ori	r24, 0x03	; 3
     b08:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
     b0a:	e0 e8       	ldi	r30, 0x80	; 128
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	88 e6       	ldi	r24, 0x68	; 104
     b10:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
     b12:	80 85       	ldd	r24, Z+8	; 0x08
     b14:	89 60       	ori	r24, 0x09	; 9
     b16:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f8 e0       	ldi	r31, 0x08	; 8
     b1c:	83 81       	ldd	r24, Z+3	; 0x03
     b1e:	88 66       	ori	r24, 0x68	; 104
     b20:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
     b28:	08 95       	ret

00000b2a <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     b2a:	aa ec       	ldi	r26, 0xCA	; 202
     b2c:	b1 e0       	ldi	r27, 0x01	; 1
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     b32:	e8 2f       	mov	r30, r24
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     b38:	1c 92       	st	X, r1

	return result;
}
     b3a:	08 95       	ret

00000b3c <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     b42:	c1 15       	cp	r28, r1
     b44:	82 e0       	ldi	r24, 0x02	; 2
     b46:	d8 07       	cpc	r29, r24
     b48:	39 f4       	brne	.+14     	; 0xb58 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8c 87       	std	Y+12, r24	; 0x0c
     b54:	9d 87       	std	Y+13, r25	; 0x0d
     b56:	06 c0       	rjmp	.+12     	; 0xb64 <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     b58:	84 e2       	ldi	r24, 0x24	; 36
     b5a:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	8c 87       	std	Y+12, r24	; 0x0c
     b62:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
     b72:	e0 e0       	ldi	r30, 0x00	; 0
     b74:	f2 e0       	ldi	r31, 0x02	; 2
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
     b7c:	82 81       	ldd	r24, Z+2	; 0x02
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
     b82:	80 a1       	ldd	r24, Z+32	; 0x20
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
     b88:	84 81       	ldd	r24, Z+4	; 0x04
     b8a:	82 60       	ori	r24, 0x02	; 2
     b8c:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	80 83       	st	Z, r24
     b94:	08 95       	ret

00000b96 <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     b9c:	c1 15       	cp	r28, r1
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	d8 07       	cpc	r29, r24
     ba2:	89 f4       	brne	.+34     	; 0xbc6 <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     ba4:	80 e3       	ldi	r24, 0x30	; 48
     ba6:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     baa:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     bac:	81 e3       	ldi	r24, 0x31	; 49
     bae:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bb2:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     bb4:	84 e3       	ldi	r24, 0x34	; 52
     bb6:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bba:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     bbc:	85 e3       	ldi	r24, 0x35	; 53
     bbe:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bc2:	8a 87       	std	Y+10, r24	; 0x0a
     bc4:	10 c0       	rjmp	.+32     	; 0xbe6 <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     bc6:	82 e3       	ldi	r24, 0x32	; 50
     bc8:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bcc:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     bce:	83 e3       	ldi	r24, 0x33	; 51
     bd0:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bd4:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     bd6:	86 e3       	ldi	r24, 0x36	; 54
     bd8:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     bde:	87 e3       	ldi	r24, 0x37	; 55
     be0:	0e 94 95 05 	call	0xb2a	; 0xb2a <SP_ReadCalibrationByte>
     be4:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	08 95       	ret

00000bec <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
     bec:	80 e2       	ldi	r24, 0x20	; 32
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	0e 94 cb 05 	call	0xb96	; 0xb96 <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
     bf4:	e0 e2       	ldi	r30, 0x20	; 32
     bf6:	f3 e0       	ldi	r31, 0x03	; 3
     bf8:	81 81       	ldd	r24, Z+1	; 0x01
     bfa:	80 64       	ori	r24, 0x40	; 64
     bfc:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
     c02:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
     c04:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     c06:	80 81       	ld	r24, Z
     c08:	8d 60       	ori	r24, 0x0D	; 13
     c0a:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0e 94 cb 05 	call	0xb96	; 0xb96 <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
     c14:	e0 e0       	ldi	r30, 0x00	; 0
     c16:	f3 e0       	ldi	r31, 0x03	; 3
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
     c22:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
     c24:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     c26:	80 81       	ld	r24, Z
     c28:	8d 60       	ori	r24, 0x0D	; 13
     c2a:	80 83       	st	Z, r24
     c2c:	08 95       	ret

00000c2e <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
     c2e:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     c30:	e0 e4       	ldi	r30, 0x40	; 64
     c32:	f8 e0       	ldi	r31, 0x08	; 8
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     c38:	96 81       	ldd	r25, Z+6	; 0x06
     c3a:	91 60       	ori	r25, 0x01	; 1
     c3c:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     c3e:	26 a3       	std	Z+38, r18	; 0x26
     c40:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     c42:	80 81       	ld	r24, Z
     c44:	83 60       	ori	r24, 0x03	; 3
     c46:	80 83       	st	Z, r24
     c48:	08 95       	ret

00000c4a <main>:


int main(void)
{
	
	clk_init();
     c4a:	0e 94 56 05 	call	0xaac	; 0xaac <clk_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	83 ed       	ldi	r24, 0xD3	; 211
     c52:	90 e3       	ldi	r25, 0x30	; 48
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	90 40       	sbci	r25, 0x00	; 0
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <main+0xa>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <main+0x14>
     c5e:	00 00       	nop
    _delay_ms(500); //add a delay 0.5 for the encoder to stablize
	encoder_init();
     c60:	0e 94 7e 05 	call	0xafc	; 0xafc <encoder_init>
	usart_init();
     c64:	0e 94 65 05 	call	0xaca	; 0xaca <usart_init>
	dac_init();
     c68:	0e 94 f6 05 	call	0xbec	; 0xbec <dac_init>
	adc_init();
     c6c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
     c76:	60 91 46 20 	lds	r22, 0x2046	; 0x802046 <maxVoltage>
     c7a:	70 91 47 20 	lds	r23, 0x2047	; 0x802047 <maxVoltage+0x1>
     c7e:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <maxVoltage+0x2>
     c82:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <maxVoltage+0x3>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	0e 94 77 06 	call	0xcee	; 0xcee <__addsf3>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 ef       	ldi	r23, 0xF0	; 240
     c96:	8f e7       	ldi	r24, 0x7F	; 127
     c98:	95 e4       	ldi	r25, 0x45	; 69
     c9a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__divsf3>
     c9e:	60 93 4e 20 	sts	0x204E, r22	; 0x80204e <__data_end>
     ca2:	70 93 4f 20 	sts	0x204F, r23	; 0x80204f <__data_end+0x1>
     ca6:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end+0x2>
     caa:	90 93 51 20 	sts	0x2051, r25	; 0x802051 <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
     cae:	60 91 4a 20 	lds	r22, 0x204A	; 0x80204a <Ts>
     cb2:	70 91 4b 20 	lds	r23, 0x204B	; 0x80204b <Ts+0x1>
     cb6:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <Ts+0x2>
     cba:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <Ts+0x3>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	34 e2       	ldi	r19, 0x24	; 36
     cc2:	44 ef       	ldi	r20, 0xF4	; 244
     cc4:	5a e4       	ldi	r21, 0x4A	; 74
     cc6:	0e 94 47 08 	call	0x108e	; 0x108e <__mulsf3>
     cca:	0e 94 61 07 	call	0xec2	; 0xec2 <__fixunssfsi>
     cce:	60 93 8e 20 	sts	0x208E, r22	; 0x80208e <topCount>
     cd2:	70 93 8f 20 	sts	0x208F, r23	; 0x80208f <topCount+0x1>
	
	timer_init(topCount);
     cd6:	80 91 8e 20 	lds	r24, 0x208E	; 0x80208e <topCount>
     cda:	90 91 8f 20 	lds	r25, 0x208F	; 0x80208f <topCount+0x1>
     cde:	0e 94 17 06 	call	0xc2e	; 0xc2e <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     ce8:	78 94       	sei
     cea:	ff cf       	rjmp	.-2      	; 0xcea <main+0xa0>

00000cec <__subsf3>:
     cec:	50 58       	subi	r21, 0x80	; 128

00000cee <__addsf3>:
     cee:	bb 27       	eor	r27, r27
     cf0:	aa 27       	eor	r26, r26
     cf2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__addsf3x>
     cf6:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_round>
     cfa:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_pscA>
     cfe:	38 f0       	brcs	.+14     	; 0xd0e <__addsf3+0x20>
     d00:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscB>
     d04:	20 f0       	brcs	.+8      	; 0xd0e <__addsf3+0x20>
     d06:	39 f4       	brne	.+14     	; 0xd16 <__addsf3+0x28>
     d08:	9f 3f       	cpi	r25, 0xFF	; 255
     d0a:	19 f4       	brne	.+6      	; 0xd12 <__addsf3+0x24>
     d0c:	26 f4       	brtc	.+8      	; 0xd16 <__addsf3+0x28>
     d0e:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_nan>
     d12:	0e f4       	brtc	.+2      	; 0xd16 <__addsf3+0x28>
     d14:	e0 95       	com	r30
     d16:	e7 fb       	bst	r30, 7
     d18:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_inf>

00000d1c <__addsf3x>:
     d1c:	e9 2f       	mov	r30, r25
     d1e:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_split3>
     d22:	58 f3       	brcs	.-42     	; 0xcfa <__addsf3+0xc>
     d24:	ba 17       	cp	r27, r26
     d26:	62 07       	cpc	r22, r18
     d28:	73 07       	cpc	r23, r19
     d2a:	84 07       	cpc	r24, r20
     d2c:	95 07       	cpc	r25, r21
     d2e:	20 f0       	brcs	.+8      	; 0xd38 <__addsf3x+0x1c>
     d30:	79 f4       	brne	.+30     	; 0xd50 <__addsf3x+0x34>
     d32:	a6 f5       	brtc	.+104    	; 0xd9c <__addsf3x+0x80>
     d34:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_zero>
     d38:	0e f4       	brtc	.+2      	; 0xd3c <__addsf3x+0x20>
     d3a:	e0 95       	com	r30
     d3c:	0b 2e       	mov	r0, r27
     d3e:	ba 2f       	mov	r27, r26
     d40:	a0 2d       	mov	r26, r0
     d42:	0b 01       	movw	r0, r22
     d44:	b9 01       	movw	r22, r18
     d46:	90 01       	movw	r18, r0
     d48:	0c 01       	movw	r0, r24
     d4a:	ca 01       	movw	r24, r20
     d4c:	a0 01       	movw	r20, r0
     d4e:	11 24       	eor	r1, r1
     d50:	ff 27       	eor	r31, r31
     d52:	59 1b       	sub	r21, r25
     d54:	99 f0       	breq	.+38     	; 0xd7c <__addsf3x+0x60>
     d56:	59 3f       	cpi	r21, 0xF9	; 249
     d58:	50 f4       	brcc	.+20     	; 0xd6e <__addsf3x+0x52>
     d5a:	50 3e       	cpi	r21, 0xE0	; 224
     d5c:	68 f1       	brcs	.+90     	; 0xdb8 <__addsf3x+0x9c>
     d5e:	1a 16       	cp	r1, r26
     d60:	f0 40       	sbci	r31, 0x00	; 0
     d62:	a2 2f       	mov	r26, r18
     d64:	23 2f       	mov	r18, r19
     d66:	34 2f       	mov	r19, r20
     d68:	44 27       	eor	r20, r20
     d6a:	58 5f       	subi	r21, 0xF8	; 248
     d6c:	f3 cf       	rjmp	.-26     	; 0xd54 <__addsf3x+0x38>
     d6e:	46 95       	lsr	r20
     d70:	37 95       	ror	r19
     d72:	27 95       	ror	r18
     d74:	a7 95       	ror	r26
     d76:	f0 40       	sbci	r31, 0x00	; 0
     d78:	53 95       	inc	r21
     d7a:	c9 f7       	brne	.-14     	; 0xd6e <__addsf3x+0x52>
     d7c:	7e f4       	brtc	.+30     	; 0xd9c <__addsf3x+0x80>
     d7e:	1f 16       	cp	r1, r31
     d80:	ba 0b       	sbc	r27, r26
     d82:	62 0b       	sbc	r22, r18
     d84:	73 0b       	sbc	r23, r19
     d86:	84 0b       	sbc	r24, r20
     d88:	ba f0       	brmi	.+46     	; 0xdb8 <__addsf3x+0x9c>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	a1 f0       	breq	.+40     	; 0xdb6 <__addsf3x+0x9a>
     d8e:	ff 0f       	add	r31, r31
     d90:	bb 1f       	adc	r27, r27
     d92:	66 1f       	adc	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	c2 f7       	brpl	.-16     	; 0xd8a <__addsf3x+0x6e>
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <__addsf3x+0x9c>
     d9c:	ba 0f       	add	r27, r26
     d9e:	62 1f       	adc	r22, r18
     da0:	73 1f       	adc	r23, r19
     da2:	84 1f       	adc	r24, r20
     da4:	48 f4       	brcc	.+18     	; 0xdb8 <__addsf3x+0x9c>
     da6:	87 95       	ror	r24
     da8:	77 95       	ror	r23
     daa:	67 95       	ror	r22
     dac:	b7 95       	ror	r27
     dae:	f7 95       	ror	r31
     db0:	9e 3f       	cpi	r25, 0xFE	; 254
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <__addsf3x+0x9a>
     db4:	b0 cf       	rjmp	.-160    	; 0xd16 <__addsf3+0x28>
     db6:	93 95       	inc	r25
     db8:	88 0f       	add	r24, r24
     dba:	08 f0       	brcs	.+2      	; 0xdbe <__addsf3x+0xa2>
     dbc:	99 27       	eor	r25, r25
     dbe:	ee 0f       	add	r30, r30
     dc0:	97 95       	ror	r25
     dc2:	87 95       	ror	r24
     dc4:	08 95       	ret

00000dc6 <__cmpsf2>:
     dc6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_cmp>
     dca:	08 f4       	brcc	.+2      	; 0xdce <__cmpsf2+0x8>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	08 95       	ret

00000dd0 <__divsf3>:
     dd0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__divsf3x>
     dd4:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_round>
     dd8:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscB>
     ddc:	58 f0       	brcs	.+22     	; 0xdf4 <__divsf3+0x24>
     dde:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_pscA>
     de2:	40 f0       	brcs	.+16     	; 0xdf4 <__divsf3+0x24>
     de4:	29 f4       	brne	.+10     	; 0xdf0 <__divsf3+0x20>
     de6:	5f 3f       	cpi	r21, 0xFF	; 255
     de8:	29 f0       	breq	.+10     	; 0xdf4 <__divsf3+0x24>
     dea:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_inf>
     dee:	51 11       	cpse	r21, r1
     df0:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_szero>
     df4:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_nan>

00000df8 <__divsf3x>:
     df8:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_split3>
     dfc:	68 f3       	brcs	.-38     	; 0xdd8 <__divsf3+0x8>

00000dfe <__divsf3_pse>:
     dfe:	99 23       	and	r25, r25
     e00:	b1 f3       	breq	.-20     	; 0xdee <__divsf3+0x1e>
     e02:	55 23       	and	r21, r21
     e04:	91 f3       	breq	.-28     	; 0xdea <__divsf3+0x1a>
     e06:	95 1b       	sub	r25, r21
     e08:	55 0b       	sbc	r21, r21
     e0a:	bb 27       	eor	r27, r27
     e0c:	aa 27       	eor	r26, r26
     e0e:	62 17       	cp	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	38 f0       	brcs	.+14     	; 0xe24 <__divsf3_pse+0x26>
     e16:	9f 5f       	subi	r25, 0xFF	; 255
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	44 1f       	adc	r20, r20
     e20:	aa 1f       	adc	r26, r26
     e22:	a9 f3       	breq	.-22     	; 0xe0e <__divsf3_pse+0x10>
     e24:	35 d0       	rcall	.+106    	; 0xe90 <__divsf3_pse+0x92>
     e26:	0e 2e       	mov	r0, r30
     e28:	3a f0       	brmi	.+14     	; 0xe38 <__divsf3_pse+0x3a>
     e2a:	e0 e8       	ldi	r30, 0x80	; 128
     e2c:	32 d0       	rcall	.+100    	; 0xe92 <__divsf3_pse+0x94>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	50 40       	sbci	r21, 0x00	; 0
     e32:	e6 95       	lsr	r30
     e34:	00 1c       	adc	r0, r0
     e36:	ca f7       	brpl	.-14     	; 0xe2a <__divsf3_pse+0x2c>
     e38:	2b d0       	rcall	.+86     	; 0xe90 <__divsf3_pse+0x92>
     e3a:	fe 2f       	mov	r31, r30
     e3c:	29 d0       	rcall	.+82     	; 0xe90 <__divsf3_pse+0x92>
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	bb 1f       	adc	r27, r27
     e46:	26 17       	cp	r18, r22
     e48:	37 07       	cpc	r19, r23
     e4a:	48 07       	cpc	r20, r24
     e4c:	ab 07       	cpc	r26, r27
     e4e:	b0 e8       	ldi	r27, 0x80	; 128
     e50:	09 f0       	breq	.+2      	; 0xe54 <__divsf3_pse+0x56>
     e52:	bb 0b       	sbc	r27, r27
     e54:	80 2d       	mov	r24, r0
     e56:	bf 01       	movw	r22, r30
     e58:	ff 27       	eor	r31, r31
     e5a:	93 58       	subi	r25, 0x83	; 131
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	3a f0       	brmi	.+14     	; 0xe6e <__divsf3_pse+0x70>
     e60:	9e 3f       	cpi	r25, 0xFE	; 254
     e62:	51 05       	cpc	r21, r1
     e64:	78 f0       	brcs	.+30     	; 0xe84 <__divsf3_pse+0x86>
     e66:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_inf>
     e6a:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_szero>
     e6e:	5f 3f       	cpi	r21, 0xFF	; 255
     e70:	e4 f3       	brlt	.-8      	; 0xe6a <__divsf3_pse+0x6c>
     e72:	98 3e       	cpi	r25, 0xE8	; 232
     e74:	d4 f3       	brlt	.-12     	; 0xe6a <__divsf3_pse+0x6c>
     e76:	86 95       	lsr	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	b7 95       	ror	r27
     e7e:	f7 95       	ror	r31
     e80:	9f 5f       	subi	r25, 0xFF	; 255
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__divsf3_pse+0x78>
     e84:	88 0f       	add	r24, r24
     e86:	91 1d       	adc	r25, r1
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret
     e90:	e1 e0       	ldi	r30, 0x01	; 1
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	88 1f       	adc	r24, r24
     e98:	bb 1f       	adc	r27, r27
     e9a:	62 17       	cp	r22, r18
     e9c:	73 07       	cpc	r23, r19
     e9e:	84 07       	cpc	r24, r20
     ea0:	ba 07       	cpc	r27, r26
     ea2:	20 f0       	brcs	.+8      	; 0xeac <__divsf3_pse+0xae>
     ea4:	62 1b       	sub	r22, r18
     ea6:	73 0b       	sbc	r23, r19
     ea8:	84 0b       	sbc	r24, r20
     eaa:	ba 0b       	sbc	r27, r26
     eac:	ee 1f       	adc	r30, r30
     eae:	88 f7       	brcc	.-30     	; 0xe92 <__divsf3_pse+0x94>
     eb0:	e0 95       	com	r30
     eb2:	08 95       	ret

00000eb4 <__fixsfsi>:
     eb4:	0e 94 61 07 	call	0xec2	; 0xec2 <__fixunssfsi>
     eb8:	68 94       	set
     eba:	b1 11       	cpse	r27, r1
     ebc:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_szero>
     ec0:	08 95       	ret

00000ec2 <__fixunssfsi>:
     ec2:	0e 94 21 08 	call	0x1042	; 0x1042 <__fp_splitA>
     ec6:	88 f0       	brcs	.+34     	; 0xeea <__fixunssfsi+0x28>
     ec8:	9f 57       	subi	r25, 0x7F	; 127
     eca:	98 f0       	brcs	.+38     	; 0xef2 <__fixunssfsi+0x30>
     ecc:	b9 2f       	mov	r27, r25
     ece:	99 27       	eor	r25, r25
     ed0:	b7 51       	subi	r27, 0x17	; 23
     ed2:	b0 f0       	brcs	.+44     	; 0xf00 <__fixunssfsi+0x3e>
     ed4:	e1 f0       	breq	.+56     	; 0xf0e <__fixunssfsi+0x4c>
     ed6:	66 0f       	add	r22, r22
     ed8:	77 1f       	adc	r23, r23
     eda:	88 1f       	adc	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	1a f0       	brmi	.+6      	; 0xee6 <__fixunssfsi+0x24>
     ee0:	ba 95       	dec	r27
     ee2:	c9 f7       	brne	.-14     	; 0xed6 <__fixunssfsi+0x14>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <__fixunssfsi+0x4c>
     ee6:	b1 30       	cpi	r27, 0x01	; 1
     ee8:	91 f0       	breq	.+36     	; 0xf0e <__fixunssfsi+0x4c>
     eea:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_zero>
     eee:	b1 e0       	ldi	r27, 0x01	; 1
     ef0:	08 95       	ret
     ef2:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_zero>
     ef6:	67 2f       	mov	r22, r23
     ef8:	78 2f       	mov	r23, r24
     efa:	88 27       	eor	r24, r24
     efc:	b8 5f       	subi	r27, 0xF8	; 248
     efe:	39 f0       	breq	.+14     	; 0xf0e <__fixunssfsi+0x4c>
     f00:	b9 3f       	cpi	r27, 0xF9	; 249
     f02:	cc f3       	brlt	.-14     	; 0xef6 <__fixunssfsi+0x34>
     f04:	86 95       	lsr	r24
     f06:	77 95       	ror	r23
     f08:	67 95       	ror	r22
     f0a:	b3 95       	inc	r27
     f0c:	d9 f7       	brne	.-10     	; 0xf04 <__fixunssfsi+0x42>
     f0e:	3e f4       	brtc	.+14     	; 0xf1e <__fixunssfsi+0x5c>
     f10:	90 95       	com	r25
     f12:	80 95       	com	r24
     f14:	70 95       	com	r23
     f16:	61 95       	neg	r22
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	08 95       	ret

00000f20 <__floatunsisf>:
     f20:	e8 94       	clt
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <__floatsisf+0x12>

00000f24 <__floatsisf>:
     f24:	97 fb       	bst	r25, 7
     f26:	3e f4       	brtc	.+14     	; 0xf36 <__floatsisf+0x12>
     f28:	90 95       	com	r25
     f2a:	80 95       	com	r24
     f2c:	70 95       	com	r23
     f2e:	61 95       	neg	r22
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	8f 4f       	sbci	r24, 0xFF	; 255
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	99 23       	and	r25, r25
     f38:	a9 f0       	breq	.+42     	; 0xf64 <__floatsisf+0x40>
     f3a:	f9 2f       	mov	r31, r25
     f3c:	96 e9       	ldi	r25, 0x96	; 150
     f3e:	bb 27       	eor	r27, r27
     f40:	93 95       	inc	r25
     f42:	f6 95       	lsr	r31
     f44:	87 95       	ror	r24
     f46:	77 95       	ror	r23
     f48:	67 95       	ror	r22
     f4a:	b7 95       	ror	r27
     f4c:	f1 11       	cpse	r31, r1
     f4e:	f8 cf       	rjmp	.-16     	; 0xf40 <__floatsisf+0x1c>
     f50:	fa f4       	brpl	.+62     	; 0xf90 <__floatsisf+0x6c>
     f52:	bb 0f       	add	r27, r27
     f54:	11 f4       	brne	.+4      	; 0xf5a <__floatsisf+0x36>
     f56:	60 ff       	sbrs	r22, 0
     f58:	1b c0       	rjmp	.+54     	; 0xf90 <__floatsisf+0x6c>
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	16 c0       	rjmp	.+44     	; 0xf90 <__floatsisf+0x6c>
     f64:	88 23       	and	r24, r24
     f66:	11 f0       	breq	.+4      	; 0xf6c <__floatsisf+0x48>
     f68:	96 e9       	ldi	r25, 0x96	; 150
     f6a:	11 c0       	rjmp	.+34     	; 0xf8e <__floatsisf+0x6a>
     f6c:	77 23       	and	r23, r23
     f6e:	21 f0       	breq	.+8      	; 0xf78 <__floatsisf+0x54>
     f70:	9e e8       	ldi	r25, 0x8E	; 142
     f72:	87 2f       	mov	r24, r23
     f74:	76 2f       	mov	r23, r22
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <__floatsisf+0x5e>
     f78:	66 23       	and	r22, r22
     f7a:	71 f0       	breq	.+28     	; 0xf98 <__floatsisf+0x74>
     f7c:	96 e8       	ldi	r25, 0x86	; 134
     f7e:	86 2f       	mov	r24, r22
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	2a f0       	brmi	.+10     	; 0xf90 <__floatsisf+0x6c>
     f86:	9a 95       	dec	r25
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	da f7       	brpl	.-10     	; 0xf86 <__floatsisf+0x62>
     f90:	88 0f       	add	r24, r24
     f92:	96 95       	lsr	r25
     f94:	87 95       	ror	r24
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <__fp_cmp>:
     f9a:	99 0f       	add	r25, r25
     f9c:	00 08       	sbc	r0, r0
     f9e:	55 0f       	add	r21, r21
     fa0:	aa 0b       	sbc	r26, r26
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	fe ef       	ldi	r31, 0xFE	; 254
     fa6:	16 16       	cp	r1, r22
     fa8:	17 06       	cpc	r1, r23
     faa:	e8 07       	cpc	r30, r24
     fac:	f9 07       	cpc	r31, r25
     fae:	c0 f0       	brcs	.+48     	; 0xfe0 <__fp_cmp+0x46>
     fb0:	12 16       	cp	r1, r18
     fb2:	13 06       	cpc	r1, r19
     fb4:	e4 07       	cpc	r30, r20
     fb6:	f5 07       	cpc	r31, r21
     fb8:	98 f0       	brcs	.+38     	; 0xfe0 <__fp_cmp+0x46>
     fba:	62 1b       	sub	r22, r18
     fbc:	73 0b       	sbc	r23, r19
     fbe:	84 0b       	sbc	r24, r20
     fc0:	95 0b       	sbc	r25, r21
     fc2:	39 f4       	brne	.+14     	; 0xfd2 <__fp_cmp+0x38>
     fc4:	0a 26       	eor	r0, r26
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <__fp_cmp+0x46>
     fc8:	23 2b       	or	r18, r19
     fca:	24 2b       	or	r18, r20
     fcc:	25 2b       	or	r18, r21
     fce:	21 f4       	brne	.+8      	; 0xfd8 <__fp_cmp+0x3e>
     fd0:	08 95       	ret
     fd2:	0a 26       	eor	r0, r26
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__fp_cmp+0x3e>
     fd6:	a1 40       	sbci	r26, 0x01	; 1
     fd8:	a6 95       	lsr	r26
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	81 1d       	adc	r24, r1
     fde:	81 1d       	adc	r24, r1
     fe0:	08 95       	ret

00000fe2 <__fp_inf>:
     fe2:	97 f9       	bld	r25, 7
     fe4:	9f 67       	ori	r25, 0x7F	; 127
     fe6:	80 e8       	ldi	r24, 0x80	; 128
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	08 95       	ret

00000fee <__fp_nan>:
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	80 ec       	ldi	r24, 0xC0	; 192
     ff2:	08 95       	ret

00000ff4 <__fp_pscA>:
     ff4:	00 24       	eor	r0, r0
     ff6:	0a 94       	dec	r0
     ff8:	16 16       	cp	r1, r22
     ffa:	17 06       	cpc	r1, r23
     ffc:	18 06       	cpc	r1, r24
     ffe:	09 06       	cpc	r0, r25
    1000:	08 95       	ret

00001002 <__fp_pscB>:
    1002:	00 24       	eor	r0, r0
    1004:	0a 94       	dec	r0
    1006:	12 16       	cp	r1, r18
    1008:	13 06       	cpc	r1, r19
    100a:	14 06       	cpc	r1, r20
    100c:	05 06       	cpc	r0, r21
    100e:	08 95       	ret

00001010 <__fp_round>:
    1010:	09 2e       	mov	r0, r25
    1012:	03 94       	inc	r0
    1014:	00 0c       	add	r0, r0
    1016:	11 f4       	brne	.+4      	; 0x101c <__fp_round+0xc>
    1018:	88 23       	and	r24, r24
    101a:	52 f0       	brmi	.+20     	; 0x1030 <__fp_round+0x20>
    101c:	bb 0f       	add	r27, r27
    101e:	40 f4       	brcc	.+16     	; 0x1030 <__fp_round+0x20>
    1020:	bf 2b       	or	r27, r31
    1022:	11 f4       	brne	.+4      	; 0x1028 <__fp_round+0x18>
    1024:	60 ff       	sbrs	r22, 0
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <__fp_round+0x20>
    1028:	6f 5f       	subi	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <__fp_split3>:
    1032:	57 fd       	sbrc	r21, 7
    1034:	90 58       	subi	r25, 0x80	; 128
    1036:	44 0f       	add	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	59 f0       	breq	.+22     	; 0x1052 <__fp_splitA+0x10>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	71 f0       	breq	.+28     	; 0x105c <__fp_splitA+0x1a>
    1040:	47 95       	ror	r20

00001042 <__fp_splitA>:
    1042:	88 0f       	add	r24, r24
    1044:	97 fb       	bst	r25, 7
    1046:	99 1f       	adc	r25, r25
    1048:	61 f0       	breq	.+24     	; 0x1062 <__fp_splitA+0x20>
    104a:	9f 3f       	cpi	r25, 0xFF	; 255
    104c:	79 f0       	breq	.+30     	; 0x106c <__fp_splitA+0x2a>
    104e:	87 95       	ror	r24
    1050:	08 95       	ret
    1052:	12 16       	cp	r1, r18
    1054:	13 06       	cpc	r1, r19
    1056:	14 06       	cpc	r1, r20
    1058:	55 1f       	adc	r21, r21
    105a:	f2 cf       	rjmp	.-28     	; 0x1040 <__fp_split3+0xe>
    105c:	46 95       	lsr	r20
    105e:	f1 df       	rcall	.-30     	; 0x1042 <__fp_splitA>
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <__fp_splitA+0x30>
    1062:	16 16       	cp	r1, r22
    1064:	17 06       	cpc	r1, r23
    1066:	18 06       	cpc	r1, r24
    1068:	99 1f       	adc	r25, r25
    106a:	f1 cf       	rjmp	.-30     	; 0x104e <__fp_splitA+0xc>
    106c:	86 95       	lsr	r24
    106e:	71 05       	cpc	r23, r1
    1070:	61 05       	cpc	r22, r1
    1072:	08 94       	sec
    1074:	08 95       	ret

00001076 <__fp_zero>:
    1076:	e8 94       	clt

00001078 <__fp_szero>:
    1078:	bb 27       	eor	r27, r27
    107a:	66 27       	eor	r22, r22
    107c:	77 27       	eor	r23, r23
    107e:	cb 01       	movw	r24, r22
    1080:	97 f9       	bld	r25, 7
    1082:	08 95       	ret

00001084 <__gesf2>:
    1084:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_cmp>
    1088:	08 f4       	brcc	.+2      	; 0x108c <__gesf2+0x8>
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	08 95       	ret

0000108e <__mulsf3>:
    108e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__mulsf3x>
    1092:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__fp_round>
    1096:	0e 94 fa 07 	call	0xff4	; 0xff4 <__fp_pscA>
    109a:	38 f0       	brcs	.+14     	; 0x10aa <__mulsf3+0x1c>
    109c:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscB>
    10a0:	20 f0       	brcs	.+8      	; 0x10aa <__mulsf3+0x1c>
    10a2:	95 23       	and	r25, r21
    10a4:	11 f0       	breq	.+4      	; 0x10aa <__mulsf3+0x1c>
    10a6:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_inf>
    10aa:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_nan>
    10ae:	11 24       	eor	r1, r1
    10b0:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_szero>

000010b4 <__mulsf3x>:
    10b4:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_split3>
    10b8:	70 f3       	brcs	.-36     	; 0x1096 <__mulsf3+0x8>

000010ba <__mulsf3_pse>:
    10ba:	95 9f       	mul	r25, r21
    10bc:	c1 f3       	breq	.-16     	; 0x10ae <__mulsf3+0x20>
    10be:	95 0f       	add	r25, r21
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	55 1f       	adc	r21, r21
    10c4:	62 9f       	mul	r22, r18
    10c6:	f0 01       	movw	r30, r0
    10c8:	72 9f       	mul	r23, r18
    10ca:	bb 27       	eor	r27, r27
    10cc:	f0 0d       	add	r31, r0
    10ce:	b1 1d       	adc	r27, r1
    10d0:	63 9f       	mul	r22, r19
    10d2:	aa 27       	eor	r26, r26
    10d4:	f0 0d       	add	r31, r0
    10d6:	b1 1d       	adc	r27, r1
    10d8:	aa 1f       	adc	r26, r26
    10da:	64 9f       	mul	r22, r20
    10dc:	66 27       	eor	r22, r22
    10de:	b0 0d       	add	r27, r0
    10e0:	a1 1d       	adc	r26, r1
    10e2:	66 1f       	adc	r22, r22
    10e4:	82 9f       	mul	r24, r18
    10e6:	22 27       	eor	r18, r18
    10e8:	b0 0d       	add	r27, r0
    10ea:	a1 1d       	adc	r26, r1
    10ec:	62 1f       	adc	r22, r18
    10ee:	73 9f       	mul	r23, r19
    10f0:	b0 0d       	add	r27, r0
    10f2:	a1 1d       	adc	r26, r1
    10f4:	62 1f       	adc	r22, r18
    10f6:	83 9f       	mul	r24, r19
    10f8:	a0 0d       	add	r26, r0
    10fa:	61 1d       	adc	r22, r1
    10fc:	22 1f       	adc	r18, r18
    10fe:	74 9f       	mul	r23, r20
    1100:	33 27       	eor	r19, r19
    1102:	a0 0d       	add	r26, r0
    1104:	61 1d       	adc	r22, r1
    1106:	23 1f       	adc	r18, r19
    1108:	84 9f       	mul	r24, r20
    110a:	60 0d       	add	r22, r0
    110c:	21 1d       	adc	r18, r1
    110e:	82 2f       	mov	r24, r18
    1110:	76 2f       	mov	r23, r22
    1112:	6a 2f       	mov	r22, r26
    1114:	11 24       	eor	r1, r1
    1116:	9f 57       	subi	r25, 0x7F	; 127
    1118:	50 40       	sbci	r21, 0x00	; 0
    111a:	9a f0       	brmi	.+38     	; 0x1142 <__mulsf3_pse+0x88>
    111c:	f1 f0       	breq	.+60     	; 0x115a <__mulsf3_pse+0xa0>
    111e:	88 23       	and	r24, r24
    1120:	4a f0       	brmi	.+18     	; 0x1134 <__mulsf3_pse+0x7a>
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	91 50       	subi	r25, 0x01	; 1
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	a9 f7       	brne	.-22     	; 0x111e <__mulsf3_pse+0x64>
    1134:	9e 3f       	cpi	r25, 0xFE	; 254
    1136:	51 05       	cpc	r21, r1
    1138:	80 f0       	brcs	.+32     	; 0x115a <__mulsf3_pse+0xa0>
    113a:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_inf>
    113e:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__fp_szero>
    1142:	5f 3f       	cpi	r21, 0xFF	; 255
    1144:	e4 f3       	brlt	.-8      	; 0x113e <__mulsf3_pse+0x84>
    1146:	98 3e       	cpi	r25, 0xE8	; 232
    1148:	d4 f3       	brlt	.-12     	; 0x113e <__mulsf3_pse+0x84>
    114a:	86 95       	lsr	r24
    114c:	77 95       	ror	r23
    114e:	67 95       	ror	r22
    1150:	b7 95       	ror	r27
    1152:	f7 95       	ror	r31
    1154:	e7 95       	ror	r30
    1156:	9f 5f       	subi	r25, 0xFF	; 255
    1158:	c1 f7       	brne	.-16     	; 0x114a <__mulsf3_pse+0x90>
    115a:	fe 2b       	or	r31, r30
    115c:	88 0f       	add	r24, r24
    115e:	91 1d       	adc	r25, r1
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret

00001168 <fdevopen>:
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	31 f4       	brne	.+12     	; 0x1180 <fdevopen+0x18>
    1174:	61 15       	cp	r22, r1
    1176:	71 05       	cpc	r23, r1
    1178:	19 f4       	brne	.+6      	; 0x1180 <fdevopen+0x18>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	3a c0       	rjmp	.+116    	; 0x11f4 <fdevopen+0x8c>
    1180:	8b 01       	movw	r16, r22
    1182:	ec 01       	movw	r28, r24
    1184:	6e e0       	ldi	r22, 0x0E	; 14
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <calloc>
    1190:	fc 01       	movw	r30, r24
    1192:	89 2b       	or	r24, r25
    1194:	91 f3       	breq	.-28     	; 0x117a <fdevopen+0x12>
    1196:	80 e8       	ldi	r24, 0x80	; 128
    1198:	83 83       	std	Z+3, r24	; 0x03
    119a:	01 15       	cp	r16, r1
    119c:	11 05       	cpc	r17, r1
    119e:	71 f0       	breq	.+28     	; 0x11bc <fdevopen+0x54>
    11a0:	02 87       	std	Z+10, r16	; 0x0a
    11a2:	13 87       	std	Z+11, r17	; 0x0b
    11a4:	81 e8       	ldi	r24, 0x81	; 129
    11a6:	83 83       	std	Z+3, r24	; 0x03
    11a8:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__iob>
    11ac:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <__iob+0x1>
    11b0:	89 2b       	or	r24, r25
    11b2:	21 f4       	brne	.+8      	; 0x11bc <fdevopen+0x54>
    11b4:	e0 93 ac 20 	sts	0x20AC, r30	; 0x8020ac <__iob>
    11b8:	f0 93 ad 20 	sts	0x20AD, r31	; 0x8020ad <__iob+0x1>
    11bc:	20 97       	sbiw	r28, 0x00	; 0
    11be:	c9 f0       	breq	.+50     	; 0x11f2 <fdevopen+0x8a>
    11c0:	c0 87       	std	Z+8, r28	; 0x08
    11c2:	d1 87       	std	Z+9, r29	; 0x09
    11c4:	83 81       	ldd	r24, Z+3	; 0x03
    11c6:	82 60       	ori	r24, 0x02	; 2
    11c8:	83 83       	std	Z+3, r24	; 0x03
    11ca:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <__iob+0x2>
    11ce:	90 91 af 20 	lds	r25, 0x20AF	; 0x8020af <__iob+0x3>
    11d2:	89 2b       	or	r24, r25
    11d4:	71 f4       	brne	.+28     	; 0x11f2 <fdevopen+0x8a>
    11d6:	e0 93 ae 20 	sts	0x20AE, r30	; 0x8020ae <__iob+0x2>
    11da:	f0 93 af 20 	sts	0x20AF, r31	; 0x8020af <__iob+0x3>
    11de:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <__iob+0x4>
    11e2:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <__iob+0x5>
    11e6:	89 2b       	or	r24, r25
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <fdevopen+0x8a>
    11ea:	e0 93 b0 20 	sts	0x20B0, r30	; 0x8020b0 <__iob+0x4>
    11ee:	f0 93 b1 20 	sts	0x20B1, r31	; 0x8020b1 <__iob+0x5>
    11f2:	cf 01       	movw	r24, r30
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <calloc>:
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	86 9f       	mul	r24, r22
    1208:	80 01       	movw	r16, r0
    120a:	87 9f       	mul	r24, r23
    120c:	10 0d       	add	r17, r0
    120e:	96 9f       	mul	r25, r22
    1210:	10 0d       	add	r17, r0
    1212:	11 24       	eor	r1, r1
    1214:	c8 01       	movw	r24, r16
    1216:	0e 94 1b 09 	call	0x1236	; 0x1236 <malloc>
    121a:	ec 01       	movw	r28, r24
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	29 f0       	breq	.+10     	; 0x122a <calloc+0x2c>
    1220:	a8 01       	movw	r20, r16
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	0e 94 3c 0a 	call	0x1478	; 0x1478 <memset>
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <malloc>:
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	10 f4       	brcc	.+4      	; 0x1248 <malloc+0x12>
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <__flp>
    124c:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <__flp+0x1>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	30 97       	sbiw	r30, 0x00	; 0
    125a:	19 f1       	breq	.+70     	; 0x12a2 <malloc+0x6c>
    125c:	40 81       	ld	r20, Z
    125e:	51 81       	ldd	r21, Z+1	; 0x01
    1260:	02 81       	ldd	r16, Z+2	; 0x02
    1262:	13 81       	ldd	r17, Z+3	; 0x03
    1264:	48 17       	cp	r20, r24
    1266:	59 07       	cpc	r21, r25
    1268:	c8 f0       	brcs	.+50     	; 0x129c <malloc+0x66>
    126a:	84 17       	cp	r24, r20
    126c:	95 07       	cpc	r25, r21
    126e:	69 f4       	brne	.+26     	; 0x128a <malloc+0x54>
    1270:	10 97       	sbiw	r26, 0x00	; 0
    1272:	31 f0       	breq	.+12     	; 0x1280 <malloc+0x4a>
    1274:	12 96       	adiw	r26, 0x02	; 2
    1276:	0c 93       	st	X, r16
    1278:	12 97       	sbiw	r26, 0x02	; 2
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	1c 93       	st	X, r17
    127e:	27 c0       	rjmp	.+78     	; 0x12ce <malloc+0x98>
    1280:	00 93 b4 20 	sts	0x20B4, r16	; 0x8020b4 <__flp>
    1284:	10 93 b5 20 	sts	0x20B5, r17	; 0x8020b5 <__flp+0x1>
    1288:	22 c0       	rjmp	.+68     	; 0x12ce <malloc+0x98>
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	19 f0       	breq	.+6      	; 0x1296 <malloc+0x60>
    1290:	42 17       	cp	r20, r18
    1292:	53 07       	cpc	r21, r19
    1294:	18 f4       	brcc	.+6      	; 0x129c <malloc+0x66>
    1296:	9a 01       	movw	r18, r20
    1298:	bd 01       	movw	r22, r26
    129a:	ef 01       	movw	r28, r30
    129c:	df 01       	movw	r26, r30
    129e:	f8 01       	movw	r30, r16
    12a0:	db cf       	rjmp	.-74     	; 0x1258 <malloc+0x22>
    12a2:	21 15       	cp	r18, r1
    12a4:	31 05       	cpc	r19, r1
    12a6:	f9 f0       	breq	.+62     	; 0x12e6 <malloc+0xb0>
    12a8:	28 1b       	sub	r18, r24
    12aa:	39 0b       	sbc	r19, r25
    12ac:	24 30       	cpi	r18, 0x04	; 4
    12ae:	31 05       	cpc	r19, r1
    12b0:	80 f4       	brcc	.+32     	; 0x12d2 <malloc+0x9c>
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	61 15       	cp	r22, r1
    12b8:	71 05       	cpc	r23, r1
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <malloc+0x8e>
    12bc:	fb 01       	movw	r30, r22
    12be:	82 83       	std	Z+2, r24	; 0x02
    12c0:	93 83       	std	Z+3, r25	; 0x03
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <malloc+0x96>
    12c4:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <__flp>
    12c8:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <__flp+0x1>
    12cc:	fe 01       	movw	r30, r28
    12ce:	32 96       	adiw	r30, 0x02	; 2
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <malloc+0x124>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e2 0f       	add	r30, r18
    12d6:	f3 1f       	adc	r31, r19
    12d8:	81 93       	st	Z+, r24
    12da:	91 93       	st	Z+, r25
    12dc:	22 50       	subi	r18, 0x02	; 2
    12de:	31 09       	sbc	r19, r1
    12e0:	28 83       	st	Y, r18
    12e2:	39 83       	std	Y+1, r19	; 0x01
    12e4:	3a c0       	rjmp	.+116    	; 0x135a <malloc+0x124>
    12e6:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    12ea:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    12ee:	23 2b       	or	r18, r19
    12f0:	41 f4       	brne	.+16     	; 0x1302 <malloc+0xcc>
    12f2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    12f6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    12fa:	20 93 b2 20 	sts	0x20B2, r18	; 0x8020b2 <__brkval>
    12fe:	30 93 b3 20 	sts	0x20B3, r19	; 0x8020b3 <__brkval+0x1>
    1302:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    1306:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    130a:	21 15       	cp	r18, r1
    130c:	31 05       	cpc	r19, r1
    130e:	41 f4       	brne	.+16     	; 0x1320 <malloc+0xea>
    1310:	2d b7       	in	r18, 0x3d	; 61
    1312:	3e b7       	in	r19, 0x3e	; 62
    1314:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1318:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    131c:	24 1b       	sub	r18, r20
    131e:	35 0b       	sbc	r19, r21
    1320:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <__brkval>
    1324:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <__brkval+0x1>
    1328:	e2 17       	cp	r30, r18
    132a:	f3 07       	cpc	r31, r19
    132c:	a0 f4       	brcc	.+40     	; 0x1356 <malloc+0x120>
    132e:	2e 1b       	sub	r18, r30
    1330:	3f 0b       	sbc	r19, r31
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	78 f0       	brcs	.+30     	; 0x1356 <malloc+0x120>
    1338:	ac 01       	movw	r20, r24
    133a:	4e 5f       	subi	r20, 0xFE	; 254
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	24 17       	cp	r18, r20
    1340:	35 07       	cpc	r19, r21
    1342:	48 f0       	brcs	.+18     	; 0x1356 <malloc+0x120>
    1344:	4e 0f       	add	r20, r30
    1346:	5f 1f       	adc	r21, r31
    1348:	40 93 b2 20 	sts	0x20B2, r20	; 0x8020b2 <__brkval>
    134c:	50 93 b3 20 	sts	0x20B3, r21	; 0x8020b3 <__brkval+0x1>
    1350:	81 93       	st	Z+, r24
    1352:	91 93       	st	Z+, r25
    1354:	02 c0       	rjmp	.+4      	; 0x135a <malloc+0x124>
    1356:	e0 e0       	ldi	r30, 0x00	; 0
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	cf 01       	movw	r24, r30
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <free>:
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	09 f4       	brne	.+2      	; 0x1370 <free+0xa>
    136e:	81 c0       	rjmp	.+258    	; 0x1472 <free+0x10c>
    1370:	fc 01       	movw	r30, r24
    1372:	32 97       	sbiw	r30, 0x02	; 2
    1374:	12 82       	std	Z+2, r1	; 0x02
    1376:	13 82       	std	Z+3, r1	; 0x03
    1378:	a0 91 b4 20 	lds	r26, 0x20B4	; 0x8020b4 <__flp>
    137c:	b0 91 b5 20 	lds	r27, 0x20B5	; 0x8020b5 <__flp+0x1>
    1380:	10 97       	sbiw	r26, 0x00	; 0
    1382:	81 f4       	brne	.+32     	; 0x13a4 <free+0x3e>
    1384:	20 81       	ld	r18, Z
    1386:	31 81       	ldd	r19, Z+1	; 0x01
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    1390:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    1394:	28 17       	cp	r18, r24
    1396:	39 07       	cpc	r19, r25
    1398:	51 f5       	brne	.+84     	; 0x13ee <free+0x88>
    139a:	e0 93 b2 20 	sts	0x20B2, r30	; 0x8020b2 <__brkval>
    139e:	f0 93 b3 20 	sts	0x20B3, r31	; 0x8020b3 <__brkval+0x1>
    13a2:	67 c0       	rjmp	.+206    	; 0x1472 <free+0x10c>
    13a4:	ed 01       	movw	r28, r26
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	ce 17       	cp	r28, r30
    13ac:	df 07       	cpc	r29, r31
    13ae:	40 f4       	brcc	.+16     	; 0x13c0 <free+0x5a>
    13b0:	4a 81       	ldd	r20, Y+2	; 0x02
    13b2:	5b 81       	ldd	r21, Y+3	; 0x03
    13b4:	9e 01       	movw	r18, r28
    13b6:	41 15       	cp	r20, r1
    13b8:	51 05       	cpc	r21, r1
    13ba:	f1 f0       	breq	.+60     	; 0x13f8 <free+0x92>
    13bc:	ea 01       	movw	r28, r20
    13be:	f5 cf       	rjmp	.-22     	; 0x13aa <free+0x44>
    13c0:	c2 83       	std	Z+2, r28	; 0x02
    13c2:	d3 83       	std	Z+3, r29	; 0x03
    13c4:	40 81       	ld	r20, Z
    13c6:	51 81       	ldd	r21, Z+1	; 0x01
    13c8:	84 0f       	add	r24, r20
    13ca:	95 1f       	adc	r25, r21
    13cc:	c8 17       	cp	r28, r24
    13ce:	d9 07       	cpc	r29, r25
    13d0:	59 f4       	brne	.+22     	; 0x13e8 <free+0x82>
    13d2:	88 81       	ld	r24, Y
    13d4:	99 81       	ldd	r25, Y+1	; 0x01
    13d6:	84 0f       	add	r24, r20
    13d8:	95 1f       	adc	r25, r21
    13da:	02 96       	adiw	r24, 0x02	; 2
    13dc:	80 83       	st	Z, r24
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	82 83       	std	Z+2, r24	; 0x02
    13e6:	93 83       	std	Z+3, r25	; 0x03
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <free+0x92>
    13ee:	e0 93 b4 20 	sts	0x20B4, r30	; 0x8020b4 <__flp>
    13f2:	f0 93 b5 20 	sts	0x20B5, r31	; 0x8020b5 <__flp+0x1>
    13f6:	3d c0       	rjmp	.+122    	; 0x1472 <free+0x10c>
    13f8:	e9 01       	movw	r28, r18
    13fa:	ea 83       	std	Y+2, r30	; 0x02
    13fc:	fb 83       	std	Y+3, r31	; 0x03
    13fe:	49 91       	ld	r20, Y+
    1400:	59 91       	ld	r21, Y+
    1402:	c4 0f       	add	r28, r20
    1404:	d5 1f       	adc	r29, r21
    1406:	ec 17       	cp	r30, r28
    1408:	fd 07       	cpc	r31, r29
    140a:	61 f4       	brne	.+24     	; 0x1424 <free+0xbe>
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	84 0f       	add	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	e9 01       	movw	r28, r18
    1418:	88 83       	st	Y, r24
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	8a 83       	std	Y+2, r24	; 0x02
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	e0 e0       	ldi	r30, 0x00	; 0
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	13 97       	sbiw	r26, 0x03	; 3
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	19 f0       	breq	.+6      	; 0x143a <free+0xd4>
    1434:	fd 01       	movw	r30, r26
    1436:	dc 01       	movw	r26, r24
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <free+0xc2>
    143a:	8d 91       	ld	r24, X+
    143c:	9c 91       	ld	r25, X
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	9d 01       	movw	r18, r26
    1442:	2e 5f       	subi	r18, 0xFE	; 254
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	82 0f       	add	r24, r18
    1448:	93 1f       	adc	r25, r19
    144a:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <__brkval>
    144e:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <__brkval+0x1>
    1452:	28 17       	cp	r18, r24
    1454:	39 07       	cpc	r19, r25
    1456:	69 f4       	brne	.+26     	; 0x1472 <free+0x10c>
    1458:	30 97       	sbiw	r30, 0x00	; 0
    145a:	29 f4       	brne	.+10     	; 0x1466 <free+0x100>
    145c:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <__flp>
    1460:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <__flp+0x1>
    1464:	02 c0       	rjmp	.+4      	; 0x146a <free+0x104>
    1466:	12 82       	std	Z+2, r1	; 0x02
    1468:	13 82       	std	Z+3, r1	; 0x03
    146a:	a0 93 b2 20 	sts	0x20B2, r26	; 0x8020b2 <__brkval>
    146e:	b0 93 b3 20 	sts	0x20B3, r27	; 0x8020b3 <__brkval+0x1>
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <memset>:
    1478:	dc 01       	movw	r26, r24
    147a:	01 c0       	rjmp	.+2      	; 0x147e <memset+0x6>
    147c:	6d 93       	st	X+, r22
    147e:	41 50       	subi	r20, 0x01	; 1
    1480:	50 40       	sbci	r21, 0x00	; 0
    1482:	e0 f7       	brcc	.-8      	; 0x147c <memset+0x4>
    1484:	08 95       	ret

00001486 <_exit>:
    1486:	f8 94       	cli

00001488 <__stop_program>:
    1488:	ff cf       	rjmp	.-2      	; 0x1488 <__stop_program>
