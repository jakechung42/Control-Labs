
xmega_HDD_controller_Lead_Lag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000010ca  0000115e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080200e  0080200e  0000116c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e45  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ea2  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085d  00000000  00000000  0000af3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000b798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004972  00000000  00000000  0000b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  0001025a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	ea ec       	ldi	r30, 0xCA	; 202
     220:	f0 e1       	ldi	r31, 0x10	; 16
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	ae 30       	cpi	r26, 0x0E	; 14
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	ae e0       	ldi	r26, 0x0E	; 14
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 34       	cpi	r26, 0x4E	; 78
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 45 04 	call	0x88a	; 0x88a <main>
     248:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
     266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
     2ae:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     2b2:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     2b6:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <adcIn>
     2ba:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <adcIn+0x1>
	// setPoint = (adcIn/4095.);		//convert to voltage.0.
	setPoint = (adcIn/4095.)-0.030;		//convert to voltage
     2be:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <adcIn>
     2c2:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <adcIn+0x1>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 b0 05 	call	0xb60	; 0xb60 <__floatunsisf>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 ef       	ldi	r19, 0xF0	; 240
     2d2:	4f e7       	ldi	r20, 0x7F	; 127
     2d4:	55 e4       	ldi	r21, 0x45	; 69
     2d6:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
     2da:	2f e8       	ldi	r18, 0x8F	; 143
     2dc:	32 ec       	ldi	r19, 0xC2	; 194
     2de:	45 ef       	ldi	r20, 0xF5	; 245
     2e0:	5c e3       	ldi	r21, 0x3C	; 60
     2e2:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     2e6:	60 93 2e 20 	sts	0x202E, r22	; 0x80202e <setPoint>
     2ea:	70 93 2f 20 	sts	0x202F, r23	; 0x80202f <setPoint+0x1>
     2ee:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <setPoint+0x2>
     2f2:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <setPoint+0x3>
	// setPoint = 2;                   //Set the setpoint to midrange for initial testing of the controller
	
	encCount = TCC0.CNT;			//read encoder
     2f6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
     2fa:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
     2fe:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <encCount>
     302:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
     306:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <encCount>
     30a:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <encCount+0x1>
     30e:	99 23       	and	r25, r25
     310:	24 f4       	brge	.+8      	; 0x31a <__vector_20+0xa8>
     312:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <encCount>
     316:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
     31a:	60 91 40 20 	lds	r22, 0x2040	; 0x802040 <encCount>
     31e:	70 91 41 20 	lds	r23, 0x2041	; 0x802041 <encCount+0x1>
     322:	07 2e       	mov	r0, r23
     324:	00 0c       	add	r0, r0
     326:	88 0b       	sbc	r24, r24
     328:	99 0b       	sbc	r25, r25
     32a:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	4f e2       	ldi	r20, 0x2F	; 47
     334:	54 e4       	ldi	r21, 0x44	; 68
     336:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
     33a:	60 93 3c 20 	sts	0x203C, r22	; 0x80203c <position>
     33e:	70 93 3d 20 	sts	0x203D, r23	; 0x80203d <position+0x1>
     342:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <position+0x2>
     346:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
     34a:	60 91 3c 20 	lds	r22, 0x203C	; 0x80203c <position>
     34e:	70 91 3d 20 	lds	r23, 0x203D	; 0x80203d <position+0x1>
     352:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <position+0x2>
     356:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <position+0x3>
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 ef       	ldi	r19, 0xF0	; 240
     35e:	4f e7       	ldi	r20, 0x7F	; 127
     360:	55 e4       	ldi	r21, 0x45	; 69
     362:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     366:	60 93 38 20 	sts	0x2038, r22	; 0x802038 <positionDAC>
     36a:	70 93 39 20 	sts	0x2039, r23	; 0x802039 <positionDAC+0x1>
     36e:	80 93 3a 20 	sts	0x203A, r24	; 0x80203a <positionDAC+0x2>
     372:	90 93 3b 20 	sts	0x203B, r25	; 0x80203b <positionDAC+0x3>
	// printf("positionDAC = %d, position = %d, encCount = %d\n", (int)(positionDAC), (int)(position*100), (int)encCount);
	// printf("encCount = %d\n", (int)encCount);
	if(positionDAC < 0) positionDAC = 0;	//rollover check
     376:	60 91 38 20 	lds	r22, 0x2038	; 0x802038 <positionDAC>
     37a:	70 91 39 20 	lds	r23, 0x2039	; 0x802039 <positionDAC+0x1>
     37e:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <positionDAC+0x2>
     382:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <positionDAC+0x3>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	a9 01       	movw	r20, r18
     38c:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
     390:	88 23       	and	r24, r24
     392:	44 f4       	brge	.+16     	; 0x3a4 <__vector_20+0x132>
     394:	10 92 38 20 	sts	0x2038, r1	; 0x802038 <positionDAC>
     398:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <positionDAC+0x1>
     39c:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <positionDAC+0x2>
     3a0:	10 92 3b 20 	sts	0x203B, r1	; 0x80203b <positionDAC+0x3>
	// positionDAC = 2048;
	// position = 0.0;

	error = setPoint - position;			//compute error
     3a4:	60 91 2e 20 	lds	r22, 0x202E	; 0x80202e <setPoint>
     3a8:	70 91 2f 20 	lds	r23, 0x202F	; 0x80202f <setPoint+0x1>
     3ac:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <setPoint+0x2>
     3b0:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <setPoint+0x3>
     3b4:	20 91 3c 20 	lds	r18, 0x203C	; 0x80203c <position>
     3b8:	30 91 3d 20 	lds	r19, 0x203D	; 0x80203d <position+0x1>
     3bc:	40 91 3e 20 	lds	r20, 0x203E	; 0x80203e <position+0x2>
     3c0:	50 91 3f 20 	lds	r21, 0x203F	; 0x80203f <position+0x3>
     3c4:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     3c8:	60 93 34 20 	sts	0x2034, r22	; 0x802034 <error>
     3cc:	70 93 35 20 	sts	0x2035, r23	; 0x802035 <error+0x1>
     3d0:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <error+0x2>
     3d4:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <error+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = -0.3;  // Initial value
     3d8:	8a e9       	ldi	r24, 0x9A	; 154
     3da:	99 e9       	ldi	r25, 0x99	; 153
     3dc:	a9 e9       	ldi	r26, 0x99	; 153
     3de:	be eb       	ldi	r27, 0xBE	; 190
     3e0:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <ctrlCorrection>
     3e4:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <ctrlCorrection+0x1>
     3e8:	a0 93 24 20 	sts	0x2024, r26	; 0x802024 <ctrlCorrection+0x2>
     3ec:	b0 93 25 20 	sts	0x2025, r27	; 0x802025 <ctrlCorrection+0x3>
	// ctrlCorrection = -2.4;  // Control Correction to Correct the Single ended to Bipolar circuit zero offset
	// For my circuit the output of the Single ended to Bipolar circuit equaled -0.495 volts
	// when the control input (ctrlOut = 0.0) equalled 0.
	
	// ctrlOut = 0.6297*ctrlOut1 + 0.3691*ctrlOut2 + 25.4*error - 49.86*error1 + 24.47*error2; // Lead Lag controller
    ctrlOut = 0.7368*ctrlOut1 + 0.2632*ctrlOut2 + 22.52*error - 44.4*error1 + 21.89*error2; // Lead PI controller
     3f0:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <ctrlOut1>
     3f4:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <ctrlOut1+0x1>
     3f8:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <ctrlOut1+0x2>
     3fc:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <ctrlOut1+0x3>
     400:	2d ee       	ldi	r18, 0xED	; 237
     402:	3e e9       	ldi	r19, 0x9E	; 158
     404:	4c e3       	ldi	r20, 0x3C	; 60
     406:	5f e3       	ldi	r21, 0x3F	; 63
     408:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     40c:	6b 01       	movw	r12, r22
     40e:	7c 01       	movw	r14, r24
     410:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <ctrlOut2>
     414:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <ctrlOut2+0x1>
     418:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <ctrlOut2+0x2>
     41c:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <ctrlOut2+0x3>
     420:	27 e2       	ldi	r18, 0x27	; 39
     422:	32 ec       	ldi	r19, 0xC2	; 194
     424:	46 e8       	ldi	r20, 0x86	; 134
     426:	5e e3       	ldi	r21, 0x3E	; 62
     428:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     438:	6b 01       	movw	r12, r22
     43a:	7c 01       	movw	r14, r24
     43c:	60 91 34 20 	lds	r22, 0x2034	; 0x802034 <error>
     440:	70 91 35 20 	lds	r23, 0x2035	; 0x802035 <error+0x1>
     444:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <error+0x2>
     448:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <error+0x3>
     44c:	26 ef       	ldi	r18, 0xF6	; 246
     44e:	38 e2       	ldi	r19, 0x28	; 40
     450:	44 eb       	ldi	r20, 0xB4	; 180
     452:	51 e4       	ldi	r21, 0x41	; 65
     454:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     464:	6b 01       	movw	r12, r22
     466:	7c 01       	movw	r14, r24
     468:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <error1>
     46c:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <error1+0x1>
     470:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <error1+0x2>
     474:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <error1+0x3>
     478:	2a e9       	ldi	r18, 0x9A	; 154
     47a:	39 e9       	ldi	r19, 0x99	; 153
     47c:	41 e3       	ldi	r20, 0x31	; 49
     47e:	52 e4       	ldi	r21, 0x42	; 66
     480:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     484:	9b 01       	movw	r18, r22
     486:	ac 01       	movw	r20, r24
     488:	c7 01       	movw	r24, r14
     48a:	b6 01       	movw	r22, r12
     48c:	0e 94 96 04 	call	0x92c	; 0x92c <__subsf3>
     490:	6b 01       	movw	r12, r22
     492:	7c 01       	movw	r14, r24
     494:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <error2>
     498:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <error2+0x1>
     49c:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <error2+0x2>
     4a0:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <error2+0x3>
     4a4:	28 eb       	ldi	r18, 0xB8	; 184
     4a6:	3e e1       	ldi	r19, 0x1E	; 30
     4a8:	4f ea       	ldi	r20, 0xAF	; 175
     4aa:	51 e4       	ldi	r21, 0x41	; 65
     4ac:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     4b0:	9b 01       	movw	r18, r22
     4b2:	ac 01       	movw	r20, r24
     4b4:	c7 01       	movw	r24, r14
     4b6:	b6 01       	movw	r22, r12
     4b8:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     4bc:	60 93 2a 20 	sts	0x202A, r22	; 0x80202a <ctrlOut>
     4c0:	70 93 2b 20 	sts	0x202B, r23	; 0x80202b <ctrlOut+0x1>
     4c4:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <ctrlOut+0x2>
     4c8:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <ctrlOut+0x3>

    ctrlOut1 = ctrlOut;
     4cc:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <ctrlOut>
     4d0:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <ctrlOut+0x1>
     4d4:	a0 91 2c 20 	lds	r26, 0x202C	; 0x80202c <ctrlOut+0x2>
     4d8:	b0 91 2d 20 	lds	r27, 0x202D	; 0x80202d <ctrlOut+0x3>
     4dc:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <ctrlOut1>
     4e0:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <ctrlOut1+0x1>
     4e4:	a0 93 20 20 	sts	0x2020, r26	; 0x802020 <ctrlOut1+0x2>
     4e8:	b0 93 21 20 	sts	0x2021, r27	; 0x802021 <ctrlOut1+0x3>
    ctrlOut2 = ctrlOut1;
     4ec:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <ctrlOut1>
     4f0:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <ctrlOut1+0x1>
     4f4:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <ctrlOut1+0x2>
     4f8:	b0 91 21 20 	lds	r27, 0x2021	; 0x802021 <ctrlOut1+0x3>
     4fc:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <ctrlOut2>
     500:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <ctrlOut2+0x1>
     504:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <ctrlOut2+0x2>
     508:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <ctrlOut2+0x3>
    error1 = error;
     50c:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <error>
     510:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <error+0x1>
     514:	a0 91 36 20 	lds	r26, 0x2036	; 0x802036 <error+0x2>
     518:	b0 91 37 20 	lds	r27, 0x2037	; 0x802037 <error+0x3>
     51c:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <error1>
     520:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <error1+0x1>
     524:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <error1+0x2>
     528:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <error1+0x3>
    error2 = error1;
     52c:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <error1>
     530:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <error1+0x1>
     534:	a0 91 18 20 	lds	r26, 0x2018	; 0x802018 <error1+0x2>
     538:	b0 91 19 20 	lds	r27, 0x2019	; 0x802019 <error1+0x3>
     53c:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <error2>
     540:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <error2+0x1>
     544:	a0 93 14 20 	sts	0x2014, r26	; 0x802014 <error2+0x2>
     548:	b0 93 15 20 	sts	0x2015, r27	; 0x802015 <error2+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
     54c:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <ctrlOut>
     550:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <ctrlOut+0x1>
     554:	a0 91 2c 20 	lds	r26, 0x202C	; 0x80202c <ctrlOut+0x2>
     558:	b0 91 2d 20 	lds	r27, 0x202D	; 0x80202d <ctrlOut+0x3>
     55c:	bc 01       	movw	r22, r24
     55e:	cd 01       	movw	r24, r26
     560:	9f 77       	andi	r25, 0x7F	; 127
     562:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <maxVoltage>
     566:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <maxVoltage+0x1>
     56a:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <maxVoltage+0x2>
     56e:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <maxVoltage+0x3>
     572:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     576:	88 23       	and	r24, r24
     578:	d4 f0       	brlt	.+52     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
	ctrlOut = copysign(maxVoltage, ctrlOut);
     57a:	40 91 2a 20 	lds	r20, 0x202A	; 0x80202a <ctrlOut>
     57e:	50 91 2b 20 	lds	r21, 0x202B	; 0x80202b <ctrlOut+0x1>
     582:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <ctrlOut+0x2>
     586:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <ctrlOut+0x3>
     58a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <maxVoltage>
     58e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <maxVoltage+0x1>
     592:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <maxVoltage+0x2>
     596:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     59a:	77 fb       	bst	r23, 7
     59c:	b7 f9       	bld	r27, 7
     59e:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <ctrlOut>
     5a2:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <ctrlOut+0x1>
     5a6:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <ctrlOut+0x2>
     5aa:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
     5ae:	60 91 2a 20 	lds	r22, 0x202A	; 0x80202a <ctrlOut>
     5b2:	70 91 2b 20 	lds	r23, 0x202B	; 0x80202b <ctrlOut+0x1>
     5b6:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <ctrlOut+0x2>
     5ba:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <ctrlOut+0x3>
     5be:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <ctrlCorrection>
     5c2:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <ctrlCorrection+0x1>
     5c6:	40 91 24 20 	lds	r20, 0x2024	; 0x802024 <ctrlCorrection+0x2>
     5ca:	50 91 25 20 	lds	r21, 0x2025	; 0x802025 <ctrlCorrection+0x3>
     5ce:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     5d2:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <__data_end>
     5d6:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <__data_end+0x1>
     5da:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <__data_end+0x2>
     5de:	50 91 11 20 	lds	r21, 0x2011	; 0x802011 <__data_end+0x3>
     5e2:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	55 e4       	ldi	r21, 0x45	; 69
     5ee:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     5f2:	60 93 26 20 	sts	0x2026, r22	; 0x802026 <ctrlDAC>
     5f6:	70 93 27 20 	sts	0x2027, r23	; 0x802027 <ctrlDAC+0x1>
     5fa:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <ctrlDAC+0x2>
     5fe:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
     602:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     606:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     60a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     60e:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	a9 01       	movw	r20, r18
     618:	0e 94 03 05 	call	0xa06	; 0xa06 <__cmpsf2>
     61c:	88 23       	and	r24, r24
     61e:	44 f4       	brge	.+16     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     620:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <ctrlDAC>
     624:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <ctrlDAC+0x1>
     628:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <ctrlDAC+0x2>
     62c:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
     630:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     634:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     638:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     63c:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 ef       	ldi	r19, 0xF0	; 240
     644:	4f e7       	ldi	r20, 0x7F	; 127
     646:	55 e4       	ldi	r21, 0x45	; 69
     648:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__gesf2>
     64c:	18 16       	cp	r1, r24
     64e:	64 f4       	brge	.+24     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 ef       	ldi	r25, 0xF0	; 240
     654:	af e7       	ldi	r26, 0x7F	; 127
     656:	b5 e4       	ldi	r27, 0x45	; 69
     658:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <ctrlDAC>
     65c:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <ctrlDAC+0x1>
     660:	a0 93 28 20 	sts	0x2028, r26	; 0x802028 <ctrlDAC+0x2>
     664:	b0 93 29 20 	sts	0x2029, r27	; 0x802029 <ctrlDAC+0x3>
	// while((DACB.STATUS & DAC_CH1DRE_bm)==0);
	// DACB.CH1DATA = (int)positionDAC;					//Write arm position to DACB channel 1

	// flip the order to check channel 0 and channel 1
	// printf("positionDAC = %d\n", (int)(positionDAC));
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
     668:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     66c:	80 ff       	sbrs	r24, 0
     66e:	fc cf       	rjmp	.-8      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
     670:	60 91 38 20 	lds	r22, 0x2038	; 0x802038 <positionDAC>
     674:	70 91 39 20 	lds	r23, 0x2039	; 0x802039 <positionDAC+0x1>
     678:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <positionDAC+0x2>
     67c:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <positionDAC+0x3>
     680:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
     684:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     688:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
     68c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     690:	81 ff       	sbrs	r24, 1
     692:	fc cf       	rjmp	.-8      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
     694:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     698:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     69c:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     6a0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     6a4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
     6a8:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
     6ac:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>

	
	// printf("Error = %d, ctrlOut = %d, Position = %d, ctrlDac = %d, PositionDac = %d\n", (int)(error*100), (int)(ctrlOut*100), (int)(position*100), (int)ctrlDAC, (int)positionDAC);
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
     6b0:	80 e8       	ldi	r24, 0x80	; 128
     6b2:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	0f 90       	pop	r0
     6d8:	0b be       	out	0x3b, r0	; 59
     6da:	0f 90       	pop	r0
     6dc:	09 be       	out	0x39, r0	; 57
     6de:	0f 90       	pop	r0
     6e0:	08 be       	out	0x38, r0	; 56
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     6ec:	e0 e5       	ldi	r30, 0x50	; 80
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
     6f6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     6fa:	81 ff       	sbrs	r24, 1
     6fc:	fc cf       	rjmp	.-8      	; 0x6f6 <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
     6fe:	88 ed       	ldi	r24, 0xD8	; 216
     700:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
     708:	08 95       	ret

0000070a <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
     70a:	e0 e4       	ldi	r30, 0x40	; 64
     70c:	f6 e0       	ldi	r31, 0x06	; 6
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     716:	e0 ea       	ldi	r30, 0xA0	; 160
     718:	f8 e0       	ldi	r31, 0x08	; 8
     71a:	85 81       	ldd	r24, Z+5	; 0x05
     71c:	83 60       	ori	r24, 0x03	; 3
     71e:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     720:	8b e6       	ldi	r24, 0x6B	; 107
     722:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     724:	80 eb       	ldi	r24, 0xB0	; 176
     726:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	88 60       	ori	r24, 0x08	; 8
     72c:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	88 e2       	ldi	r24, 0x28	; 40
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 d4 06 	call	0xda8	; 0xda8 <fdevopen>
     73a:	08 95       	ret

0000073c <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
     73c:	e0 e6       	ldi	r30, 0x60	; 96
     73e:	f6 e0       	ldi	r31, 0x06	; 6
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
     744:	80 89       	ldd	r24, Z+16	; 0x10
     746:	83 60       	ori	r24, 0x03	; 3
     748:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
     74a:	e0 e8       	ldi	r30, 0x80	; 128
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	88 e6       	ldi	r24, 0x68	; 104
     750:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
     752:	80 85       	ldd	r24, Z+8	; 0x08
     754:	89 60       	ori	r24, 0x09	; 9
     756:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
     758:	e0 e0       	ldi	r30, 0x00	; 0
     75a:	f8 e0       	ldi	r31, 0x08	; 8
     75c:	83 81       	ldd	r24, Z+3	; 0x03
     75e:	88 66       	ori	r24, 0x68	; 104
     760:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
     762:	80 81       	ld	r24, Z
     764:	81 60       	ori	r24, 0x01	; 1
     766:	80 83       	st	Z, r24
     768:	08 95       	ret

0000076a <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     76a:	aa ec       	ldi	r26, 0xCA	; 202
     76c:	b1 e0       	ldi	r27, 0x01	; 1
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     772:	e8 2f       	mov	r30, r24
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     778:	1c 92       	st	X, r1

	return result;
}
     77a:	08 95       	ret

0000077c <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     782:	c1 15       	cp	r28, r1
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	d8 07       	cpc	r29, r24
     788:	39 f4       	brne	.+14     	; 0x798 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     78a:	80 e2       	ldi	r24, 0x20	; 32
     78c:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	8c 87       	std	Y+12, r24	; 0x0c
     794:	9d 87       	std	Y+13, r25	; 0x0d
     796:	06 c0       	rjmp	.+12     	; 0x7a4 <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     798:	84 e2       	ldi	r24, 0x24	; 36
     79a:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	8c 87       	std	Y+12, r24	; 0x0c
     7a2:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	0e 94 be 03 	call	0x77c	; 0x77c <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
     7b2:	e0 e0       	ldi	r30, 0x00	; 0
     7b4:	f2 e0       	ldi	r31, 0x02	; 2
     7b6:	81 81       	ldd	r24, Z+1	; 0x01
     7b8:	88 60       	ori	r24, 0x08	; 8
     7ba:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
     7c2:	80 a1       	ldd	r24, Z+32	; 0x20
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
     7ce:	80 81       	ld	r24, Z
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	80 83       	st	Z, r24
     7d4:	08 95       	ret

000007d6 <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     7dc:	c1 15       	cp	r28, r1
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	d8 07       	cpc	r29, r24
     7e2:	89 f4       	brne	.+34     	; 0x806 <__EEPROM_REGION_LENGTH__+0x6>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     7e4:	80 e3       	ldi	r24, 0x30	; 48
     7e6:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     7ea:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     7ec:	81 e3       	ldi	r24, 0x31	; 49
     7ee:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     7f2:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     7f4:	84 e3       	ldi	r24, 0x34	; 52
     7f6:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     7fc:	85 e3       	ldi	r24, 0x35	; 53
     7fe:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     802:	8a 87       	std	Y+10, r24	; 0x0a
     804:	10 c0       	rjmp	.+32     	; 0x826 <__EEPROM_REGION_LENGTH__+0x26>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     80c:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     80e:	83 e3       	ldi	r24, 0x33	; 51
     810:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     814:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     816:	86 e3       	ldi	r24, 0x36	; 54
     818:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     81c:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     81e:	87 e3       	ldi	r24, 0x37	; 55
     820:	0e 94 b5 03 	call	0x76a	; 0x76a <SP_ReadCalibrationByte>
     824:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
     82c:	80 e2       	ldi	r24, 0x20	; 32
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
     834:	e0 e2       	ldi	r30, 0x20	; 32
     836:	f3 e0       	ldi	r31, 0x03	; 3
     838:	81 81       	ldd	r24, Z+1	; 0x01
     83a:	80 64       	ori	r24, 0x40	; 64
     83c:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
     842:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
     844:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     846:	80 81       	ld	r24, Z
     848:	8d 60       	ori	r24, 0x0D	; 13
     84a:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	93 e0       	ldi	r25, 0x03	; 3
     850:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
     854:	e0 e0       	ldi	r30, 0x00	; 0
     856:	f3 e0       	ldi	r31, 0x03	; 3
     858:	81 81       	ldd	r24, Z+1	; 0x01
     85a:	80 64       	ori	r24, 0x40	; 64
     85c:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
     862:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
     864:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     866:	80 81       	ld	r24, Z
     868:	8d 60       	ori	r24, 0x0D	; 13
     86a:	80 83       	st	Z, r24
     86c:	08 95       	ret

0000086e <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
     86e:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     870:	e0 e4       	ldi	r30, 0x40	; 64
     872:	f8 e0       	ldi	r31, 0x08	; 8
     874:	81 81       	ldd	r24, Z+1	; 0x01
     876:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     878:	96 81       	ldd	r25, Z+6	; 0x06
     87a:	91 60       	ori	r25, 0x01	; 1
     87c:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     87e:	26 a3       	std	Z+38, r18	; 0x26
     880:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     882:	80 81       	ld	r24, Z
     884:	83 60       	ori	r24, 0x03	; 3
     886:	80 83       	st	Z, r24
     888:	08 95       	ret

0000088a <main>:


int main(void)
{
	
	clk_init();
     88a:	0e 94 76 03 	call	0x6ec	; 0x6ec <clk_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	83 ed       	ldi	r24, 0xD3	; 211
     892:	90 e3       	ldi	r25, 0x30	; 48
     894:	21 50       	subi	r18, 0x01	; 1
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	90 40       	sbci	r25, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <main+0xa>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <main+0x14>
     89e:	00 00       	nop
    _delay_ms(500); //add a delay 0.5 for the encoder to stablize
	encoder_init();
     8a0:	0e 94 9e 03 	call	0x73c	; 0x73c <encoder_init>
	usart_init();
     8a4:	0e 94 85 03 	call	0x70a	; 0x70a <usart_init>
	dac_init();
     8a8:	0e 94 16 04 	call	0x82c	; 0x82c <dac_init>
	adc_init();
     8ac:	0e 94 d5 03 	call	0x7aa	; 0x7aa <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
     8b0:	80 e8       	ldi	r24, 0x80	; 128
     8b2:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
     8b6:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <maxVoltage>
     8ba:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <maxVoltage+0x1>
     8be:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <maxVoltage+0x2>
     8c2:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <maxVoltage+0x3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	0e 94 97 04 	call	0x92e	; 0x92e <__addsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 ef       	ldi	r23, 0xF0	; 240
     8d6:	8f e7       	ldi	r24, 0x7F	; 127
     8d8:	95 e4       	ldi	r25, 0x45	; 69
     8da:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
     8de:	60 93 0e 20 	sts	0x200E, r22	; 0x80200e <__data_end>
     8e2:	70 93 0f 20 	sts	0x200F, r23	; 0x80200f <__data_end+0x1>
     8e6:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
     8ea:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
     8ee:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <Ts>
     8f2:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <Ts+0x1>
     8f6:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <Ts+0x2>
     8fa:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <Ts+0x3>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	34 e2       	ldi	r19, 0x24	; 36
     902:	44 ef       	ldi	r20, 0xF4	; 244
     904:	5a e4       	ldi	r21, 0x4A	; 74
     906:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3>
     90a:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
     90e:	60 93 42 20 	sts	0x2042, r22	; 0x802042 <topCount>
     912:	70 93 43 20 	sts	0x2043, r23	; 0x802043 <topCount+0x1>
	
	timer_init(topCount);
     916:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <topCount>
     91a:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <topCount+0x1>
     91e:	0e 94 37 04 	call	0x86e	; 0x86e <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     922:	87 e0       	ldi	r24, 0x07	; 7
     924:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     928:	78 94       	sei
     92a:	ff cf       	rjmp	.-2      	; 0x92a <main+0xa0>

0000092c <__subsf3>:
     92c:	50 58       	subi	r21, 0x80	; 128

0000092e <__addsf3>:
     92e:	bb 27       	eor	r27, r27
     930:	aa 27       	eor	r26, r26
     932:	0e 94 ae 04 	call	0x95c	; 0x95c <__addsf3x>
     936:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     93a:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     93e:	38 f0       	brcs	.+14     	; 0x94e <__addsf3+0x20>
     940:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x20>
     946:	39 f4       	brne	.+14     	; 0x956 <__addsf3+0x28>
     948:	9f 3f       	cpi	r25, 0xFF	; 255
     94a:	19 f4       	brne	.+6      	; 0x952 <__addsf3+0x24>
     94c:	26 f4       	brtc	.+8      	; 0x956 <__addsf3+0x28>
     94e:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3+0x28>
     954:	e0 95       	com	r30
     956:	e7 fb       	bst	r30, 7
     958:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>

0000095c <__addsf3x>:
     95c:	e9 2f       	mov	r30, r25
     95e:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     962:	58 f3       	brcs	.-42     	; 0x93a <__addsf3+0xc>
     964:	ba 17       	cp	r27, r26
     966:	62 07       	cpc	r22, r18
     968:	73 07       	cpc	r23, r19
     96a:	84 07       	cpc	r24, r20
     96c:	95 07       	cpc	r25, r21
     96e:	20 f0       	brcs	.+8      	; 0x978 <__addsf3x+0x1c>
     970:	79 f4       	brne	.+30     	; 0x990 <__addsf3x+0x34>
     972:	a6 f5       	brtc	.+104    	; 0x9dc <__addsf3x+0x80>
     974:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_zero>
     978:	0e f4       	brtc	.+2      	; 0x97c <__addsf3x+0x20>
     97a:	e0 95       	com	r30
     97c:	0b 2e       	mov	r0, r27
     97e:	ba 2f       	mov	r27, r26
     980:	a0 2d       	mov	r26, r0
     982:	0b 01       	movw	r0, r22
     984:	b9 01       	movw	r22, r18
     986:	90 01       	movw	r18, r0
     988:	0c 01       	movw	r0, r24
     98a:	ca 01       	movw	r24, r20
     98c:	a0 01       	movw	r20, r0
     98e:	11 24       	eor	r1, r1
     990:	ff 27       	eor	r31, r31
     992:	59 1b       	sub	r21, r25
     994:	99 f0       	breq	.+38     	; 0x9bc <__addsf3x+0x60>
     996:	59 3f       	cpi	r21, 0xF9	; 249
     998:	50 f4       	brcc	.+20     	; 0x9ae <__addsf3x+0x52>
     99a:	50 3e       	cpi	r21, 0xE0	; 224
     99c:	68 f1       	brcs	.+90     	; 0x9f8 <__addsf3x+0x9c>
     99e:	1a 16       	cp	r1, r26
     9a0:	f0 40       	sbci	r31, 0x00	; 0
     9a2:	a2 2f       	mov	r26, r18
     9a4:	23 2f       	mov	r18, r19
     9a6:	34 2f       	mov	r19, r20
     9a8:	44 27       	eor	r20, r20
     9aa:	58 5f       	subi	r21, 0xF8	; 248
     9ac:	f3 cf       	rjmp	.-26     	; 0x994 <__addsf3x+0x38>
     9ae:	46 95       	lsr	r20
     9b0:	37 95       	ror	r19
     9b2:	27 95       	ror	r18
     9b4:	a7 95       	ror	r26
     9b6:	f0 40       	sbci	r31, 0x00	; 0
     9b8:	53 95       	inc	r21
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <__addsf3x+0x52>
     9bc:	7e f4       	brtc	.+30     	; 0x9dc <__addsf3x+0x80>
     9be:	1f 16       	cp	r1, r31
     9c0:	ba 0b       	sbc	r27, r26
     9c2:	62 0b       	sbc	r22, r18
     9c4:	73 0b       	sbc	r23, r19
     9c6:	84 0b       	sbc	r24, r20
     9c8:	ba f0       	brmi	.+46     	; 0x9f8 <__addsf3x+0x9c>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	a1 f0       	breq	.+40     	; 0x9f6 <__addsf3x+0x9a>
     9ce:	ff 0f       	add	r31, r31
     9d0:	bb 1f       	adc	r27, r27
     9d2:	66 1f       	adc	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	c2 f7       	brpl	.-16     	; 0x9ca <__addsf3x+0x6e>
     9da:	0e c0       	rjmp	.+28     	; 0x9f8 <__addsf3x+0x9c>
     9dc:	ba 0f       	add	r27, r26
     9de:	62 1f       	adc	r22, r18
     9e0:	73 1f       	adc	r23, r19
     9e2:	84 1f       	adc	r24, r20
     9e4:	48 f4       	brcc	.+18     	; 0x9f8 <__addsf3x+0x9c>
     9e6:	87 95       	ror	r24
     9e8:	77 95       	ror	r23
     9ea:	67 95       	ror	r22
     9ec:	b7 95       	ror	r27
     9ee:	f7 95       	ror	r31
     9f0:	9e 3f       	cpi	r25, 0xFE	; 254
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9a>
     9f4:	b0 cf       	rjmp	.-160    	; 0x956 <__addsf3+0x28>
     9f6:	93 95       	inc	r25
     9f8:	88 0f       	add	r24, r24
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0xa2>
     9fc:	99 27       	eor	r25, r25
     9fe:	ee 0f       	add	r30, r30
     a00:	97 95       	ror	r25
     a02:	87 95       	ror	r24
     a04:	08 95       	ret

00000a06 <__cmpsf2>:
     a06:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
     a0a:	08 f4       	brcc	.+2      	; 0xa0e <__cmpsf2+0x8>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	08 95       	ret

00000a10 <__divsf3>:
     a10:	0e 94 1c 05 	call	0xa38	; 0xa38 <__divsf3x>
     a14:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     a18:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     a1c:	58 f0       	brcs	.+22     	; 0xa34 <__divsf3+0x24>
     a1e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     a22:	40 f0       	brcs	.+16     	; 0xa34 <__divsf3+0x24>
     a24:	29 f4       	brne	.+10     	; 0xa30 <__divsf3+0x20>
     a26:	5f 3f       	cpi	r21, 0xFF	; 255
     a28:	29 f0       	breq	.+10     	; 0xa34 <__divsf3+0x24>
     a2a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     a2e:	51 11       	cpse	r21, r1
     a30:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     a34:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>

00000a38 <__divsf3x>:
     a38:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     a3c:	68 f3       	brcs	.-38     	; 0xa18 <__divsf3+0x8>

00000a3e <__divsf3_pse>:
     a3e:	99 23       	and	r25, r25
     a40:	b1 f3       	breq	.-20     	; 0xa2e <__divsf3+0x1e>
     a42:	55 23       	and	r21, r21
     a44:	91 f3       	breq	.-28     	; 0xa2a <__divsf3+0x1a>
     a46:	95 1b       	sub	r25, r21
     a48:	55 0b       	sbc	r21, r21
     a4a:	bb 27       	eor	r27, r27
     a4c:	aa 27       	eor	r26, r26
     a4e:	62 17       	cp	r22, r18
     a50:	73 07       	cpc	r23, r19
     a52:	84 07       	cpc	r24, r20
     a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
     a56:	9f 5f       	subi	r25, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	22 0f       	add	r18, r18
     a5c:	33 1f       	adc	r19, r19
     a5e:	44 1f       	adc	r20, r20
     a60:	aa 1f       	adc	r26, r26
     a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
     a64:	35 d0       	rcall	.+106    	; 0xad0 <__divsf3_pse+0x92>
     a66:	0e 2e       	mov	r0, r30
     a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
     a6a:	e0 e8       	ldi	r30, 0x80	; 128
     a6c:	32 d0       	rcall	.+100    	; 0xad2 <__divsf3_pse+0x94>
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	50 40       	sbci	r21, 0x00	; 0
     a72:	e6 95       	lsr	r30
     a74:	00 1c       	adc	r0, r0
     a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
     a78:	2b d0       	rcall	.+86     	; 0xad0 <__divsf3_pse+0x92>
     a7a:	fe 2f       	mov	r31, r30
     a7c:	29 d0       	rcall	.+82     	; 0xad0 <__divsf3_pse+0x92>
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	bb 1f       	adc	r27, r27
     a86:	26 17       	cp	r18, r22
     a88:	37 07       	cpc	r19, r23
     a8a:	48 07       	cpc	r20, r24
     a8c:	ab 07       	cpc	r26, r27
     a8e:	b0 e8       	ldi	r27, 0x80	; 128
     a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
     a92:	bb 0b       	sbc	r27, r27
     a94:	80 2d       	mov	r24, r0
     a96:	bf 01       	movw	r22, r30
     a98:	ff 27       	eor	r31, r31
     a9a:	93 58       	subi	r25, 0x83	; 131
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x70>
     aa0:	9e 3f       	cpi	r25, 0xFE	; 254
     aa2:	51 05       	cpc	r21, r1
     aa4:	78 f0       	brcs	.+30     	; 0xac4 <__divsf3_pse+0x86>
     aa6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     aaa:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     aae:	5f 3f       	cpi	r21, 0xFF	; 255
     ab0:	e4 f3       	brlt	.-8      	; 0xaaa <__divsf3_pse+0x6c>
     ab2:	98 3e       	cpi	r25, 0xE8	; 232
     ab4:	d4 f3       	brlt	.-12     	; 0xaaa <__divsf3_pse+0x6c>
     ab6:	86 95       	lsr	r24
     ab8:	77 95       	ror	r23
     aba:	67 95       	ror	r22
     abc:	b7 95       	ror	r27
     abe:	f7 95       	ror	r31
     ac0:	9f 5f       	subi	r25, 0xFF	; 255
     ac2:	c9 f7       	brne	.-14     	; 0xab6 <__divsf3_pse+0x78>
     ac4:	88 0f       	add	r24, r24
     ac6:	91 1d       	adc	r25, r1
     ac8:	96 95       	lsr	r25
     aca:	87 95       	ror	r24
     acc:	97 f9       	bld	r25, 7
     ace:	08 95       	ret
     ad0:	e1 e0       	ldi	r30, 0x01	; 1
     ad2:	66 0f       	add	r22, r22
     ad4:	77 1f       	adc	r23, r23
     ad6:	88 1f       	adc	r24, r24
     ad8:	bb 1f       	adc	r27, r27
     ada:	62 17       	cp	r22, r18
     adc:	73 07       	cpc	r23, r19
     ade:	84 07       	cpc	r24, r20
     ae0:	ba 07       	cpc	r27, r26
     ae2:	20 f0       	brcs	.+8      	; 0xaec <__divsf3_pse+0xae>
     ae4:	62 1b       	sub	r22, r18
     ae6:	73 0b       	sbc	r23, r19
     ae8:	84 0b       	sbc	r24, r20
     aea:	ba 0b       	sbc	r27, r26
     aec:	ee 1f       	adc	r30, r30
     aee:	88 f7       	brcc	.-30     	; 0xad2 <__divsf3_pse+0x94>
     af0:	e0 95       	com	r30
     af2:	08 95       	ret

00000af4 <__fixsfsi>:
     af4:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
     af8:	68 94       	set
     afa:	b1 11       	cpse	r27, r1
     afc:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     b00:	08 95       	ret

00000b02 <__fixunssfsi>:
     b02:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_splitA>
     b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x28>
     b08:	9f 57       	subi	r25, 0x7F	; 127
     b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fixunssfsi+0x30>
     b0c:	b9 2f       	mov	r27, r25
     b0e:	99 27       	eor	r25, r25
     b10:	b7 51       	subi	r27, 0x17	; 23
     b12:	b0 f0       	brcs	.+44     	; 0xb40 <__fixunssfsi+0x3e>
     b14:	e1 f0       	breq	.+56     	; 0xb4e <__fixunssfsi+0x4c>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	88 1f       	adc	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x24>
     b20:	ba 95       	dec	r27
     b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x14>
     b24:	14 c0       	rjmp	.+40     	; 0xb4e <__fixunssfsi+0x4c>
     b26:	b1 30       	cpi	r27, 0x01	; 1
     b28:	91 f0       	breq	.+36     	; 0xb4e <__fixunssfsi+0x4c>
     b2a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_zero>
     b2e:	b1 e0       	ldi	r27, 0x01	; 1
     b30:	08 95       	ret
     b32:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_zero>
     b36:	67 2f       	mov	r22, r23
     b38:	78 2f       	mov	r23, r24
     b3a:	88 27       	eor	r24, r24
     b3c:	b8 5f       	subi	r27, 0xF8	; 248
     b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x4c>
     b40:	b9 3f       	cpi	r27, 0xF9	; 249
     b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x34>
     b44:	86 95       	lsr	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	b3 95       	inc	r27
     b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x42>
     b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x5c>
     b50:	90 95       	com	r25
     b52:	80 95       	com	r24
     b54:	70 95       	com	r23
     b56:	61 95       	neg	r22
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8f 4f       	sbci	r24, 0xFF	; 255
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	08 95       	ret

00000b60 <__floatunsisf>:
     b60:	e8 94       	clt
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
     b64:	97 fb       	bst	r25, 7
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	99 23       	and	r25, r25
     b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
     b7a:	f9 2f       	mov	r31, r25
     b7c:	96 e9       	ldi	r25, 0x96	; 150
     b7e:	bb 27       	eor	r27, r27
     b80:	93 95       	inc	r25
     b82:	f6 95       	lsr	r31
     b84:	87 95       	ror	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b7 95       	ror	r27
     b8c:	f1 11       	cpse	r31, r1
     b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
     b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
     b92:	bb 0f       	add	r27, r27
     b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
     b96:	60 ff       	sbrs	r22, 0
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
     ba4:	88 23       	and	r24, r24
     ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
     ba8:	96 e9       	ldi	r25, 0x96	; 150
     baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
     bac:	77 23       	and	r23, r23
     bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
     bb0:	9e e8       	ldi	r25, 0x8E	; 142
     bb2:	87 2f       	mov	r24, r23
     bb4:	76 2f       	mov	r23, r22
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
     bb8:	66 23       	and	r22, r22
     bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
     bbc:	96 e8       	ldi	r25, 0x86	; 134
     bbe:	86 2f       	mov	r24, r22
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
     bc6:	9a 95       	dec	r25
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	88 1f       	adc	r24, r24
     bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
     bd0:	88 0f       	add	r24, r24
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	97 f9       	bld	r25, 7
     bd8:	08 95       	ret

00000bda <__fp_cmp>:
     bda:	99 0f       	add	r25, r25
     bdc:	00 08       	sbc	r0, r0
     bde:	55 0f       	add	r21, r21
     be0:	aa 0b       	sbc	r26, r26
     be2:	e0 e8       	ldi	r30, 0x80	; 128
     be4:	fe ef       	ldi	r31, 0xFE	; 254
     be6:	16 16       	cp	r1, r22
     be8:	17 06       	cpc	r1, r23
     bea:	e8 07       	cpc	r30, r24
     bec:	f9 07       	cpc	r31, r25
     bee:	c0 f0       	brcs	.+48     	; 0xc20 <__fp_cmp+0x46>
     bf0:	12 16       	cp	r1, r18
     bf2:	13 06       	cpc	r1, r19
     bf4:	e4 07       	cpc	r30, r20
     bf6:	f5 07       	cpc	r31, r21
     bf8:	98 f0       	brcs	.+38     	; 0xc20 <__fp_cmp+0x46>
     bfa:	62 1b       	sub	r22, r18
     bfc:	73 0b       	sbc	r23, r19
     bfe:	84 0b       	sbc	r24, r20
     c00:	95 0b       	sbc	r25, r21
     c02:	39 f4       	brne	.+14     	; 0xc12 <__fp_cmp+0x38>
     c04:	0a 26       	eor	r0, r26
     c06:	61 f0       	breq	.+24     	; 0xc20 <__fp_cmp+0x46>
     c08:	23 2b       	or	r18, r19
     c0a:	24 2b       	or	r18, r20
     c0c:	25 2b       	or	r18, r21
     c0e:	21 f4       	brne	.+8      	; 0xc18 <__fp_cmp+0x3e>
     c10:	08 95       	ret
     c12:	0a 26       	eor	r0, r26
     c14:	09 f4       	brne	.+2      	; 0xc18 <__fp_cmp+0x3e>
     c16:	a1 40       	sbci	r26, 0x01	; 1
     c18:	a6 95       	lsr	r26
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	81 1d       	adc	r24, r1
     c1e:	81 1d       	adc	r24, r1
     c20:	08 95       	ret

00000c22 <__fp_inf>:
     c22:	97 f9       	bld	r25, 7
     c24:	9f 67       	ori	r25, 0x7F	; 127
     c26:	80 e8       	ldi	r24, 0x80	; 128
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	08 95       	ret

00000c2e <__fp_nan>:
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	80 ec       	ldi	r24, 0xC0	; 192
     c32:	08 95       	ret

00000c34 <__fp_pscA>:
     c34:	00 24       	eor	r0, r0
     c36:	0a 94       	dec	r0
     c38:	16 16       	cp	r1, r22
     c3a:	17 06       	cpc	r1, r23
     c3c:	18 06       	cpc	r1, r24
     c3e:	09 06       	cpc	r0, r25
     c40:	08 95       	ret

00000c42 <__fp_pscB>:
     c42:	00 24       	eor	r0, r0
     c44:	0a 94       	dec	r0
     c46:	12 16       	cp	r1, r18
     c48:	13 06       	cpc	r1, r19
     c4a:	14 06       	cpc	r1, r20
     c4c:	05 06       	cpc	r0, r21
     c4e:	08 95       	ret

00000c50 <__fp_round>:
     c50:	09 2e       	mov	r0, r25
     c52:	03 94       	inc	r0
     c54:	00 0c       	add	r0, r0
     c56:	11 f4       	brne	.+4      	; 0xc5c <__fp_round+0xc>
     c58:	88 23       	and	r24, r24
     c5a:	52 f0       	brmi	.+20     	; 0xc70 <__fp_round+0x20>
     c5c:	bb 0f       	add	r27, r27
     c5e:	40 f4       	brcc	.+16     	; 0xc70 <__fp_round+0x20>
     c60:	bf 2b       	or	r27, r31
     c62:	11 f4       	brne	.+4      	; 0xc68 <__fp_round+0x18>
     c64:	60 ff       	sbrs	r22, 0
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__fp_round+0x20>
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	08 95       	ret

00000c72 <__fp_split3>:
     c72:	57 fd       	sbrc	r21, 7
     c74:	90 58       	subi	r25, 0x80	; 128
     c76:	44 0f       	add	r20, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	59 f0       	breq	.+22     	; 0xc92 <__fp_splitA+0x10>
     c7c:	5f 3f       	cpi	r21, 0xFF	; 255
     c7e:	71 f0       	breq	.+28     	; 0xc9c <__fp_splitA+0x1a>
     c80:	47 95       	ror	r20

00000c82 <__fp_splitA>:
     c82:	88 0f       	add	r24, r24
     c84:	97 fb       	bst	r25, 7
     c86:	99 1f       	adc	r25, r25
     c88:	61 f0       	breq	.+24     	; 0xca2 <__fp_splitA+0x20>
     c8a:	9f 3f       	cpi	r25, 0xFF	; 255
     c8c:	79 f0       	breq	.+30     	; 0xcac <__fp_splitA+0x2a>
     c8e:	87 95       	ror	r24
     c90:	08 95       	ret
     c92:	12 16       	cp	r1, r18
     c94:	13 06       	cpc	r1, r19
     c96:	14 06       	cpc	r1, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	f2 cf       	rjmp	.-28     	; 0xc80 <__fp_split3+0xe>
     c9c:	46 95       	lsr	r20
     c9e:	f1 df       	rcall	.-30     	; 0xc82 <__fp_splitA>
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <__fp_splitA+0x30>
     ca2:	16 16       	cp	r1, r22
     ca4:	17 06       	cpc	r1, r23
     ca6:	18 06       	cpc	r1, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	f1 cf       	rjmp	.-30     	; 0xc8e <__fp_splitA+0xc>
     cac:	86 95       	lsr	r24
     cae:	71 05       	cpc	r23, r1
     cb0:	61 05       	cpc	r22, r1
     cb2:	08 94       	sec
     cb4:	08 95       	ret

00000cb6 <__fp_zero>:
     cb6:	e8 94       	clt

00000cb8 <__fp_szero>:
     cb8:	bb 27       	eor	r27, r27
     cba:	66 27       	eor	r22, r22
     cbc:	77 27       	eor	r23, r23
     cbe:	cb 01       	movw	r24, r22
     cc0:	97 f9       	bld	r25, 7
     cc2:	08 95       	ret

00000cc4 <__gesf2>:
     cc4:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_cmp>
     cc8:	08 f4       	brcc	.+2      	; 0xccc <__gesf2+0x8>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	08 95       	ret

00000cce <__mulsf3>:
     cce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__mulsf3x>
     cd2:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_round>
     cd6:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_pscA>
     cda:	38 f0       	brcs	.+14     	; 0xcea <__mulsf3+0x1c>
     cdc:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_pscB>
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__mulsf3+0x1c>
     ce2:	95 23       	and	r25, r21
     ce4:	11 f0       	breq	.+4      	; 0xcea <__mulsf3+0x1c>
     ce6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     cea:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_nan>
     cee:	11 24       	eor	r1, r1
     cf0:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>

00000cf4 <__mulsf3x>:
     cf4:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_split3>
     cf8:	70 f3       	brcs	.-36     	; 0xcd6 <__mulsf3+0x8>

00000cfa <__mulsf3_pse>:
     cfa:	95 9f       	mul	r25, r21
     cfc:	c1 f3       	breq	.-16     	; 0xcee <__mulsf3+0x20>
     cfe:	95 0f       	add	r25, r21
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	55 1f       	adc	r21, r21
     d04:	62 9f       	mul	r22, r18
     d06:	f0 01       	movw	r30, r0
     d08:	72 9f       	mul	r23, r18
     d0a:	bb 27       	eor	r27, r27
     d0c:	f0 0d       	add	r31, r0
     d0e:	b1 1d       	adc	r27, r1
     d10:	63 9f       	mul	r22, r19
     d12:	aa 27       	eor	r26, r26
     d14:	f0 0d       	add	r31, r0
     d16:	b1 1d       	adc	r27, r1
     d18:	aa 1f       	adc	r26, r26
     d1a:	64 9f       	mul	r22, r20
     d1c:	66 27       	eor	r22, r22
     d1e:	b0 0d       	add	r27, r0
     d20:	a1 1d       	adc	r26, r1
     d22:	66 1f       	adc	r22, r22
     d24:	82 9f       	mul	r24, r18
     d26:	22 27       	eor	r18, r18
     d28:	b0 0d       	add	r27, r0
     d2a:	a1 1d       	adc	r26, r1
     d2c:	62 1f       	adc	r22, r18
     d2e:	73 9f       	mul	r23, r19
     d30:	b0 0d       	add	r27, r0
     d32:	a1 1d       	adc	r26, r1
     d34:	62 1f       	adc	r22, r18
     d36:	83 9f       	mul	r24, r19
     d38:	a0 0d       	add	r26, r0
     d3a:	61 1d       	adc	r22, r1
     d3c:	22 1f       	adc	r18, r18
     d3e:	74 9f       	mul	r23, r20
     d40:	33 27       	eor	r19, r19
     d42:	a0 0d       	add	r26, r0
     d44:	61 1d       	adc	r22, r1
     d46:	23 1f       	adc	r18, r19
     d48:	84 9f       	mul	r24, r20
     d4a:	60 0d       	add	r22, r0
     d4c:	21 1d       	adc	r18, r1
     d4e:	82 2f       	mov	r24, r18
     d50:	76 2f       	mov	r23, r22
     d52:	6a 2f       	mov	r22, r26
     d54:	11 24       	eor	r1, r1
     d56:	9f 57       	subi	r25, 0x7F	; 127
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	9a f0       	brmi	.+38     	; 0xd82 <__mulsf3_pse+0x88>
     d5c:	f1 f0       	breq	.+60     	; 0xd9a <__mulsf3_pse+0xa0>
     d5e:	88 23       	and	r24, r24
     d60:	4a f0       	brmi	.+18     	; 0xd74 <__mulsf3_pse+0x7a>
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	bb 1f       	adc	r27, r27
     d68:	66 1f       	adc	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	50 40       	sbci	r21, 0x00	; 0
     d72:	a9 f7       	brne	.-22     	; 0xd5e <__mulsf3_pse+0x64>
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	51 05       	cpc	r21, r1
     d78:	80 f0       	brcs	.+32     	; 0xd9a <__mulsf3_pse+0xa0>
     d7a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_inf>
     d7e:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_szero>
     d82:	5f 3f       	cpi	r21, 0xFF	; 255
     d84:	e4 f3       	brlt	.-8      	; 0xd7e <__mulsf3_pse+0x84>
     d86:	98 3e       	cpi	r25, 0xE8	; 232
     d88:	d4 f3       	brlt	.-12     	; 0xd7e <__mulsf3_pse+0x84>
     d8a:	86 95       	lsr	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	e7 95       	ror	r30
     d96:	9f 5f       	subi	r25, 0xFF	; 255
     d98:	c1 f7       	brne	.-16     	; 0xd8a <__mulsf3_pse+0x90>
     d9a:	fe 2b       	or	r31, r30
     d9c:	88 0f       	add	r24, r24
     d9e:	91 1d       	adc	r25, r1
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	97 f9       	bld	r25, 7
     da6:	08 95       	ret

00000da8 <fdevopen>:
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	31 f4       	brne	.+12     	; 0xdc0 <fdevopen+0x18>
     db4:	61 15       	cp	r22, r1
     db6:	71 05       	cpc	r23, r1
     db8:	19 f4       	brne	.+6      	; 0xdc0 <fdevopen+0x18>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	3a c0       	rjmp	.+116    	; 0xe34 <fdevopen+0x8c>
     dc0:	8b 01       	movw	r16, r22
     dc2:	ec 01       	movw	r28, r24
     dc4:	6e e0       	ldi	r22, 0x0E	; 14
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <calloc>
     dd0:	fc 01       	movw	r30, r24
     dd2:	89 2b       	or	r24, r25
     dd4:	91 f3       	breq	.-28     	; 0xdba <fdevopen+0x12>
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	83 83       	std	Z+3, r24	; 0x03
     dda:	01 15       	cp	r16, r1
     ddc:	11 05       	cpc	r17, r1
     dde:	71 f0       	breq	.+28     	; 0xdfc <fdevopen+0x54>
     de0:	02 87       	std	Z+10, r16	; 0x0a
     de2:	13 87       	std	Z+11, r17	; 0x0b
     de4:	81 e8       	ldi	r24, 0x81	; 129
     de6:	83 83       	std	Z+3, r24	; 0x03
     de8:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <__iob>
     dec:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <__iob+0x1>
     df0:	89 2b       	or	r24, r25
     df2:	21 f4       	brne	.+8      	; 0xdfc <fdevopen+0x54>
     df4:	e0 93 44 20 	sts	0x2044, r30	; 0x802044 <__iob>
     df8:	f0 93 45 20 	sts	0x2045, r31	; 0x802045 <__iob+0x1>
     dfc:	20 97       	sbiw	r28, 0x00	; 0
     dfe:	c9 f0       	breq	.+50     	; 0xe32 <fdevopen+0x8a>
     e00:	c0 87       	std	Z+8, r28	; 0x08
     e02:	d1 87       	std	Z+9, r29	; 0x09
     e04:	83 81       	ldd	r24, Z+3	; 0x03
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	83 83       	std	Z+3, r24	; 0x03
     e0a:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <__iob+0x2>
     e0e:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <__iob+0x3>
     e12:	89 2b       	or	r24, r25
     e14:	71 f4       	brne	.+28     	; 0xe32 <fdevopen+0x8a>
     e16:	e0 93 46 20 	sts	0x2046, r30	; 0x802046 <__iob+0x2>
     e1a:	f0 93 47 20 	sts	0x2047, r31	; 0x802047 <__iob+0x3>
     e1e:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <__iob+0x4>
     e22:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <__iob+0x5>
     e26:	89 2b       	or	r24, r25
     e28:	21 f4       	brne	.+8      	; 0xe32 <fdevopen+0x8a>
     e2a:	e0 93 48 20 	sts	0x2048, r30	; 0x802048 <__iob+0x4>
     e2e:	f0 93 49 20 	sts	0x2049, r31	; 0x802049 <__iob+0x5>
     e32:	cf 01       	movw	r24, r30
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <calloc>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	86 9f       	mul	r24, r22
     e48:	80 01       	movw	r16, r0
     e4a:	87 9f       	mul	r24, r23
     e4c:	10 0d       	add	r17, r0
     e4e:	96 9f       	mul	r25, r22
     e50:	10 0d       	add	r17, r0
     e52:	11 24       	eor	r1, r1
     e54:	c8 01       	movw	r24, r16
     e56:	0e 94 3b 07 	call	0xe76	; 0xe76 <malloc>
     e5a:	ec 01       	movw	r28, r24
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	29 f0       	breq	.+10     	; 0xe6a <calloc+0x2c>
     e60:	a8 01       	movw	r20, r16
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <memset>
     e6a:	ce 01       	movw	r24, r28
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <malloc>:
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	91 05       	cpc	r25, r1
     e82:	10 f4       	brcc	.+4      	; 0xe88 <malloc+0x12>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <__flp>
     e8c:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <__flp+0x1>
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	30 97       	sbiw	r30, 0x00	; 0
     e9a:	19 f1       	breq	.+70     	; 0xee2 <malloc+0x6c>
     e9c:	40 81       	ld	r20, Z
     e9e:	51 81       	ldd	r21, Z+1	; 0x01
     ea0:	02 81       	ldd	r16, Z+2	; 0x02
     ea2:	13 81       	ldd	r17, Z+3	; 0x03
     ea4:	48 17       	cp	r20, r24
     ea6:	59 07       	cpc	r21, r25
     ea8:	c8 f0       	brcs	.+50     	; 0xedc <malloc+0x66>
     eaa:	84 17       	cp	r24, r20
     eac:	95 07       	cpc	r25, r21
     eae:	69 f4       	brne	.+26     	; 0xeca <malloc+0x54>
     eb0:	10 97       	sbiw	r26, 0x00	; 0
     eb2:	31 f0       	breq	.+12     	; 0xec0 <malloc+0x4a>
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	0c 93       	st	X, r16
     eb8:	12 97       	sbiw	r26, 0x02	; 2
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	1c 93       	st	X, r17
     ebe:	27 c0       	rjmp	.+78     	; 0xf0e <malloc+0x98>
     ec0:	00 93 4c 20 	sts	0x204C, r16	; 0x80204c <__flp>
     ec4:	10 93 4d 20 	sts	0x204D, r17	; 0x80204d <__flp+0x1>
     ec8:	22 c0       	rjmp	.+68     	; 0xf0e <malloc+0x98>
     eca:	21 15       	cp	r18, r1
     ecc:	31 05       	cpc	r19, r1
     ece:	19 f0       	breq	.+6      	; 0xed6 <malloc+0x60>
     ed0:	42 17       	cp	r20, r18
     ed2:	53 07       	cpc	r21, r19
     ed4:	18 f4       	brcc	.+6      	; 0xedc <malloc+0x66>
     ed6:	9a 01       	movw	r18, r20
     ed8:	bd 01       	movw	r22, r26
     eda:	ef 01       	movw	r28, r30
     edc:	df 01       	movw	r26, r30
     ede:	f8 01       	movw	r30, r16
     ee0:	db cf       	rjmp	.-74     	; 0xe98 <malloc+0x22>
     ee2:	21 15       	cp	r18, r1
     ee4:	31 05       	cpc	r19, r1
     ee6:	f9 f0       	breq	.+62     	; 0xf26 <malloc+0xb0>
     ee8:	28 1b       	sub	r18, r24
     eea:	39 0b       	sbc	r19, r25
     eec:	24 30       	cpi	r18, 0x04	; 4
     eee:	31 05       	cpc	r19, r1
     ef0:	80 f4       	brcc	.+32     	; 0xf12 <malloc+0x9c>
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	61 15       	cp	r22, r1
     ef8:	71 05       	cpc	r23, r1
     efa:	21 f0       	breq	.+8      	; 0xf04 <malloc+0x8e>
     efc:	fb 01       	movw	r30, r22
     efe:	82 83       	std	Z+2, r24	; 0x02
     f00:	93 83       	std	Z+3, r25	; 0x03
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <malloc+0x96>
     f04:	80 93 4c 20 	sts	0x204C, r24	; 0x80204c <__flp>
     f08:	90 93 4d 20 	sts	0x204D, r25	; 0x80204d <__flp+0x1>
     f0c:	fe 01       	movw	r30, r28
     f0e:	32 96       	adiw	r30, 0x02	; 2
     f10:	44 c0       	rjmp	.+136    	; 0xf9a <malloc+0x124>
     f12:	fe 01       	movw	r30, r28
     f14:	e2 0f       	add	r30, r18
     f16:	f3 1f       	adc	r31, r19
     f18:	81 93       	st	Z+, r24
     f1a:	91 93       	st	Z+, r25
     f1c:	22 50       	subi	r18, 0x02	; 2
     f1e:	31 09       	sbc	r19, r1
     f20:	28 83       	st	Y, r18
     f22:	39 83       	std	Y+1, r19	; 0x01
     f24:	3a c0       	rjmp	.+116    	; 0xf9a <malloc+0x124>
     f26:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
     f2a:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
     f2e:	23 2b       	or	r18, r19
     f30:	41 f4       	brne	.+16     	; 0xf42 <malloc+0xcc>
     f32:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     f36:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     f3a:	20 93 4a 20 	sts	0x204A, r18	; 0x80204a <__brkval>
     f3e:	30 93 4b 20 	sts	0x204B, r19	; 0x80204b <__brkval+0x1>
     f42:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     f46:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     f4a:	21 15       	cp	r18, r1
     f4c:	31 05       	cpc	r19, r1
     f4e:	41 f4       	brne	.+16     	; 0xf60 <malloc+0xea>
     f50:	2d b7       	in	r18, 0x3d	; 61
     f52:	3e b7       	in	r19, 0x3e	; 62
     f54:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     f58:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     f5c:	24 1b       	sub	r18, r20
     f5e:	35 0b       	sbc	r19, r21
     f60:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <__brkval>
     f64:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <__brkval+0x1>
     f68:	e2 17       	cp	r30, r18
     f6a:	f3 07       	cpc	r31, r19
     f6c:	a0 f4       	brcc	.+40     	; 0xf96 <malloc+0x120>
     f6e:	2e 1b       	sub	r18, r30
     f70:	3f 0b       	sbc	r19, r31
     f72:	28 17       	cp	r18, r24
     f74:	39 07       	cpc	r19, r25
     f76:	78 f0       	brcs	.+30     	; 0xf96 <malloc+0x120>
     f78:	ac 01       	movw	r20, r24
     f7a:	4e 5f       	subi	r20, 0xFE	; 254
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	24 17       	cp	r18, r20
     f80:	35 07       	cpc	r19, r21
     f82:	48 f0       	brcs	.+18     	; 0xf96 <malloc+0x120>
     f84:	4e 0f       	add	r20, r30
     f86:	5f 1f       	adc	r21, r31
     f88:	40 93 4a 20 	sts	0x204A, r20	; 0x80204a <__brkval>
     f8c:	50 93 4b 20 	sts	0x204B, r21	; 0x80204b <__brkval+0x1>
     f90:	81 93       	st	Z+, r24
     f92:	91 93       	st	Z+, r25
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <malloc+0x124>
     f96:	e0 e0       	ldi	r30, 0x00	; 0
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	cf 01       	movw	r24, r30
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	08 95       	ret

00000fa6 <free>:
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	09 f4       	brne	.+2      	; 0xfb0 <free+0xa>
     fae:	81 c0       	rjmp	.+258    	; 0x10b2 <free+0x10c>
     fb0:	fc 01       	movw	r30, r24
     fb2:	32 97       	sbiw	r30, 0x02	; 2
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	13 82       	std	Z+3, r1	; 0x03
     fb8:	a0 91 4c 20 	lds	r26, 0x204C	; 0x80204c <__flp>
     fbc:	b0 91 4d 20 	lds	r27, 0x204D	; 0x80204d <__flp+0x1>
     fc0:	10 97       	sbiw	r26, 0x00	; 0
     fc2:	81 f4       	brne	.+32     	; 0xfe4 <free+0x3e>
     fc4:	20 81       	ld	r18, Z
     fc6:	31 81       	ldd	r19, Z+1	; 0x01
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
     fd0:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
     fd4:	28 17       	cp	r18, r24
     fd6:	39 07       	cpc	r19, r25
     fd8:	51 f5       	brne	.+84     	; 0x102e <free+0x88>
     fda:	e0 93 4a 20 	sts	0x204A, r30	; 0x80204a <__brkval>
     fde:	f0 93 4b 20 	sts	0x204B, r31	; 0x80204b <__brkval+0x1>
     fe2:	67 c0       	rjmp	.+206    	; 0x10b2 <free+0x10c>
     fe4:	ed 01       	movw	r28, r26
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	ce 17       	cp	r28, r30
     fec:	df 07       	cpc	r29, r31
     fee:	40 f4       	brcc	.+16     	; 0x1000 <free+0x5a>
     ff0:	4a 81       	ldd	r20, Y+2	; 0x02
     ff2:	5b 81       	ldd	r21, Y+3	; 0x03
     ff4:	9e 01       	movw	r18, r28
     ff6:	41 15       	cp	r20, r1
     ff8:	51 05       	cpc	r21, r1
     ffa:	f1 f0       	breq	.+60     	; 0x1038 <free+0x92>
     ffc:	ea 01       	movw	r28, r20
     ffe:	f5 cf       	rjmp	.-22     	; 0xfea <free+0x44>
    1000:	c2 83       	std	Z+2, r28	; 0x02
    1002:	d3 83       	std	Z+3, r29	; 0x03
    1004:	40 81       	ld	r20, Z
    1006:	51 81       	ldd	r21, Z+1	; 0x01
    1008:	84 0f       	add	r24, r20
    100a:	95 1f       	adc	r25, r21
    100c:	c8 17       	cp	r28, r24
    100e:	d9 07       	cpc	r29, r25
    1010:	59 f4       	brne	.+22     	; 0x1028 <free+0x82>
    1012:	88 81       	ld	r24, Y
    1014:	99 81       	ldd	r25, Y+1	; 0x01
    1016:	84 0f       	add	r24, r20
    1018:	95 1f       	adc	r25, r21
    101a:	02 96       	adiw	r24, 0x02	; 2
    101c:	80 83       	st	Z, r24
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	82 83       	std	Z+2, r24	; 0x02
    1026:	93 83       	std	Z+3, r25	; 0x03
    1028:	21 15       	cp	r18, r1
    102a:	31 05       	cpc	r19, r1
    102c:	29 f4       	brne	.+10     	; 0x1038 <free+0x92>
    102e:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <__flp>
    1032:	f0 93 4d 20 	sts	0x204D, r31	; 0x80204d <__flp+0x1>
    1036:	3d c0       	rjmp	.+122    	; 0x10b2 <free+0x10c>
    1038:	e9 01       	movw	r28, r18
    103a:	ea 83       	std	Y+2, r30	; 0x02
    103c:	fb 83       	std	Y+3, r31	; 0x03
    103e:	49 91       	ld	r20, Y+
    1040:	59 91       	ld	r21, Y+
    1042:	c4 0f       	add	r28, r20
    1044:	d5 1f       	adc	r29, r21
    1046:	ec 17       	cp	r30, r28
    1048:	fd 07       	cpc	r31, r29
    104a:	61 f4       	brne	.+24     	; 0x1064 <free+0xbe>
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	84 0f       	add	r24, r20
    1052:	95 1f       	adc	r25, r21
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	e9 01       	movw	r28, r18
    1058:	88 83       	st	Y, r24
    105a:	99 83       	std	Y+1, r25	; 0x01
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	e0 e0       	ldi	r30, 0x00	; 0
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	13 97       	sbiw	r26, 0x03	; 3
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	19 f0       	breq	.+6      	; 0x107a <free+0xd4>
    1074:	fd 01       	movw	r30, r26
    1076:	dc 01       	movw	r26, r24
    1078:	f7 cf       	rjmp	.-18     	; 0x1068 <free+0xc2>
    107a:	8d 91       	ld	r24, X+
    107c:	9c 91       	ld	r25, X
    107e:	11 97       	sbiw	r26, 0x01	; 1
    1080:	9d 01       	movw	r18, r26
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
    108e:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	69 f4       	brne	.+26     	; 0x10b2 <free+0x10c>
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	29 f4       	brne	.+10     	; 0x10a6 <free+0x100>
    109c:	10 92 4c 20 	sts	0x204C, r1	; 0x80204c <__flp>
    10a0:	10 92 4d 20 	sts	0x204D, r1	; 0x80204d <__flp+0x1>
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <free+0x104>
    10a6:	12 82       	std	Z+2, r1	; 0x02
    10a8:	13 82       	std	Z+3, r1	; 0x03
    10aa:	a0 93 4a 20 	sts	0x204A, r26	; 0x80204a <__brkval>
    10ae:	b0 93 4b 20 	sts	0x204B, r27	; 0x80204b <__brkval+0x1>
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <memset>:
    10b8:	dc 01       	movw	r26, r24
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <memset+0x6>
    10bc:	6d 93       	st	X+, r22
    10be:	41 50       	subi	r20, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	e0 f7       	brcc	.-8      	; 0x10bc <memset+0x4>
    10c4:	08 95       	ret

000010c6 <_exit>:
    10c6:	f8 94       	cli

000010c8 <__stop_program>:
    10c8:	ff cf       	rjmp	.-2      	; 0x10c8 <__stop_program>
