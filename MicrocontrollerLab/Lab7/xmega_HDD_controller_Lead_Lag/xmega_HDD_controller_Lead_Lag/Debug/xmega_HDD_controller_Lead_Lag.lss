
xmega_HDD_controller_Lead_Lag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000105a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  0000105a  000010ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080200e  0080200e  000010fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e47  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e88  00000000  00000000  0000702b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085d  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000b710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004972  00000000  00000000  0000b860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  000101d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 01 	jmp	0x200	; 0x200 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_20>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      90:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      94:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      98:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      9c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      fc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     100:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     104:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     108:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     10c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     110:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     114:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     118:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     11c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     120:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     124:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     128:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     12c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     130:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     134:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     138:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     13c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     140:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     144:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     148:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     14c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     150:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     154:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     158:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     15c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     160:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     164:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     168:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     16c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     170:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     174:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     178:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     180:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     184:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     188:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     18c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     190:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     194:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     198:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     19c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1a8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ac:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1b8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1bc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1c8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1cc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1d8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1dc:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1e8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1ec:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
     1f8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 28 01 	jmp	0x250	; 0x250 <put_char>

00000200 <__ctors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	cd bf       	out	0x3d, r28	; 61
     208:	df e3       	ldi	r29, 0x3F	; 63
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	0c bf       	out	0x3c, r16	; 60
     210:	18 be       	out	0x38, r1	; 56
     212:	19 be       	out	0x39, r1	; 57
     214:	1a be       	out	0x3a, r1	; 58
     216:	1b be       	out	0x3b, r1	; 59

00000218 <__do_copy_data>:
     218:	10 e2       	ldi	r17, 0x20	; 32
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b0 e2       	ldi	r27, 0x20	; 32
     21e:	ea e5       	ldi	r30, 0x5A	; 90
     220:	f0 e1       	ldi	r31, 0x10	; 16
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	0b bf       	out	0x3b, r16	; 59
     226:	02 c0       	rjmp	.+4      	; 0x22c <__do_copy_data+0x14>
     228:	07 90       	elpm	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	ae 30       	cpi	r26, 0x0E	; 14
     22e:	b1 07       	cpc	r27, r17
     230:	d9 f7       	brne	.-10     	; 0x228 <__do_copy_data+0x10>
     232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_clear_bss>:
     234:	20 e2       	ldi	r18, 0x20	; 32
     236:	ae e0       	ldi	r26, 0x0E	; 14
     238:	b0 e2       	ldi	r27, 0x20	; 32
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 34       	cpi	r26, 0x4E	; 78
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 0d 04 	call	0x81a	; 0x81a <main>
     248:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <put_char>:
	fdevopen(&put_char,NULL);

}

static int put_char(char c, FILE *stream)
{
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);		//add return to newline character for term
     254:	8a 30       	cpi	r24, 0x0A	; 10
     256:	19 f4       	brne	.+6      	; 0x25e <put_char+0xe>
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	0e 94 28 01 	call	0x250	; 0x250 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     25e:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
     262:	85 ff       	sbrs	r24, 5
     264:	fc cf       	rjmp	.-8      	; 0x25e <put_char+0xe>
	USARTC0.DATA = c;
     266:	c0 93 a0 08 	sts	0x08A0, r28	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return 0;
}
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <__vector_20>:
/************************************************************************/
/* Interrupt Service Routine for TCC1 overflow.  This is where the		*/
/* control loop runs.                                                   */
/************************************************************************/
ISR(TCC1_OVF_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	08 b6       	in	r0, 0x38	; 56
     27e:	0f 92       	push	r0
     280:	18 be       	out	0x38, r1	; 56
     282:	09 b6       	in	r0, 0x39	; 57
     284:	0f 92       	push	r0
     286:	19 be       	out	0x39, r1	; 57
     288:	0b b6       	in	r0, 0x3b	; 59
     28a:	0f 92       	push	r0
     28c:	1b be       	out	0x3b, r1	; 59
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	
	adcIn = ADCA.CH0.RES;				//read setpoint from ADC
     2ae:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7de224>
     2b2:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7de225>
     2b6:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <adcIn>
     2ba:	90 93 33 20 	sts	0x2033, r25	; 0x802033 <adcIn+0x1>
	// setPoint = (adcIn/4095.);		//convert to voltage.0.
	setPoint = (adcIn/4095.)-0.030;		//convert to voltage
     2be:	60 91 32 20 	lds	r22, 0x2032	; 0x802032 <adcIn>
     2c2:	70 91 33 20 	lds	r23, 0x2033	; 0x802033 <adcIn+0x1>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__floatunsisf>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 ef       	ldi	r19, 0xF0	; 240
     2d2:	4f e7       	ldi	r20, 0x7F	; 127
     2d4:	55 e4       	ldi	r21, 0x45	; 69
     2d6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divsf3>
     2da:	2f e8       	ldi	r18, 0x8F	; 143
     2dc:	32 ec       	ldi	r19, 0xC2	; 194
     2de:	45 ef       	ldi	r20, 0xF5	; 245
     2e0:	5c e3       	ldi	r21, 0x3C	; 60
     2e2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__subsf3>
     2e6:	60 93 2e 20 	sts	0x202E, r22	; 0x80202e <setPoint>
     2ea:	70 93 2f 20 	sts	0x202F, r23	; 0x80202f <setPoint+0x1>
     2ee:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <setPoint+0x2>
     2f2:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <setPoint+0x3>
	// setPoint = 2;                   //Set the setpoint to midrange for initial testing of the controller
	
	encCount = TCC0.CNT;			//read encoder
     2f6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7de820>
     2fa:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__TEXT_REGION_LENGTH__+0x7de821>
     2fe:	80 93 40 20 	sts	0x2040, r24	; 0x802040 <encCount>
     302:	90 93 41 20 	sts	0x2041, r25	; 0x802041 <encCount+0x1>
	if(encCount < 0) encCount = 0;	//out of bounds check  (encoder count should not be below zero)
     306:	80 91 40 20 	lds	r24, 0x2040	; 0x802040 <encCount>
     30a:	90 91 41 20 	lds	r25, 0x2041	; 0x802041 <encCount+0x1>
     30e:	99 23       	and	r25, r25
     310:	24 f4       	brge	.+8      	; 0x31a <__vector_20+0xa8>
     312:	10 92 40 20 	sts	0x2040, r1	; 0x802040 <encCount>
     316:	10 92 41 20 	sts	0x2041, r1	; 0x802041 <encCount+0x1>
	
	position = encCount/700.;		//encoder range of 0-700 mapped to 0-1V
     31a:	60 91 40 20 	lds	r22, 0x2040	; 0x802040 <encCount>
     31e:	70 91 41 20 	lds	r23, 0x2041	; 0x802041 <encCount+0x1>
     322:	07 2e       	mov	r0, r23
     324:	00 0c       	add	r0, r0
     326:	88 0b       	sbc	r24, r24
     328:	99 0b       	sbc	r25, r25
     32a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__floatsisf>
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	4f e2       	ldi	r20, 0x2F	; 47
     334:	54 e4       	ldi	r21, 0x44	; 68
     336:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divsf3>
     33a:	60 93 3c 20 	sts	0x203C, r22	; 0x80203c <position>
     33e:	70 93 3d 20 	sts	0x203D, r23	; 0x80203d <position+0x1>
     342:	80 93 3e 20 	sts	0x203E, r24	; 0x80203e <position+0x2>
     346:	90 93 3f 20 	sts	0x203F, r25	; 0x80203f <position+0x3>
	positionDAC = (position*4095.);	//convert arm postition to DAC output
     34a:	60 91 3c 20 	lds	r22, 0x203C	; 0x80203c <position>
     34e:	70 91 3d 20 	lds	r23, 0x203D	; 0x80203d <position+0x1>
     352:	80 91 3e 20 	lds	r24, 0x203E	; 0x80203e <position+0x2>
     356:	90 91 3f 20 	lds	r25, 0x203F	; 0x80203f <position+0x3>
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 ef       	ldi	r19, 0xF0	; 240
     35e:	4f e7       	ldi	r20, 0x7F	; 127
     360:	55 e4       	ldi	r21, 0x45	; 69
     362:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
     366:	60 93 38 20 	sts	0x2038, r22	; 0x802038 <positionDAC>
     36a:	70 93 39 20 	sts	0x2039, r23	; 0x802039 <positionDAC+0x1>
     36e:	80 93 3a 20 	sts	0x203A, r24	; 0x80203a <positionDAC+0x2>
     372:	90 93 3b 20 	sts	0x203B, r25	; 0x80203b <positionDAC+0x3>
	// printf("positionDAC = %d, position = %d, encCount = %d\n", (int)(positionDAC), (int)(position*100), (int)encCount);
	// printf("encCount = %d\n", (int)encCount);
	if(positionDAC < 0) positionDAC = 0;	//rollover check
     376:	60 91 38 20 	lds	r22, 0x2038	; 0x802038 <positionDAC>
     37a:	70 91 39 20 	lds	r23, 0x2039	; 0x802039 <positionDAC+0x1>
     37e:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <positionDAC+0x2>
     382:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <positionDAC+0x3>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	a9 01       	movw	r20, r18
     38c:	0e 94 cb 04 	call	0x996	; 0x996 <__cmpsf2>
     390:	88 23       	and	r24, r24
     392:	44 f4       	brge	.+16     	; 0x3a4 <__vector_20+0x132>
     394:	10 92 38 20 	sts	0x2038, r1	; 0x802038 <positionDAC>
     398:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <positionDAC+0x1>
     39c:	10 92 3a 20 	sts	0x203A, r1	; 0x80203a <positionDAC+0x2>
     3a0:	10 92 3b 20 	sts	0x203B, r1	; 0x80203b <positionDAC+0x3>
	// positionDAC = 2048;
	// position = 0.0;

	error = setPoint - position;			//compute error
     3a4:	60 91 2e 20 	lds	r22, 0x202E	; 0x80202e <setPoint>
     3a8:	70 91 2f 20 	lds	r23, 0x202F	; 0x80202f <setPoint+0x1>
     3ac:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <setPoint+0x2>
     3b0:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <setPoint+0x3>
     3b4:	20 91 3c 20 	lds	r18, 0x203C	; 0x80203c <position>
     3b8:	30 91 3d 20 	lds	r19, 0x203D	; 0x80203d <position+0x1>
     3bc:	40 91 3e 20 	lds	r20, 0x203E	; 0x80203e <position+0x2>
     3c0:	50 91 3f 20 	lds	r21, 0x203F	; 0x80203f <position+0x3>
     3c4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__subsf3>
     3c8:	60 93 34 20 	sts	0x2034, r22	; 0x802034 <error>
     3cc:	70 93 35 20 	sts	0x2035, r23	; 0x802035 <error+0x1>
     3d0:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <error+0x2>
     3d4:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <error+0x3>
	
	/****** Control Equation ******/
	
	ctrlCorrection = -0.3;  // Initial value
     3d8:	8a e9       	ldi	r24, 0x9A	; 154
     3da:	99 e9       	ldi	r25, 0x99	; 153
     3dc:	a9 e9       	ldi	r26, 0x99	; 153
     3de:	be eb       	ldi	r27, 0xBE	; 190
     3e0:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <ctrlCorrection>
     3e4:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <ctrlCorrection+0x1>
     3e8:	a0 93 24 20 	sts	0x2024, r26	; 0x802024 <ctrlCorrection+0x2>
     3ec:	b0 93 25 20 	sts	0x2025, r27	; 0x802025 <ctrlCorrection+0x3>
	// when the control input (ctrlOut = 0.0) equalled 0.
	
	// ctrlOut = 0.6297*ctrlOut1 + 0.3691*ctrlOut2 + 25.4*error - 49.86*error1 + 24.47*error2; // Lead Lag controller
    // ctrlOut = 0.7368*ctrlOut1 + 0.2632*ctrlOut2 + 22.52*error - 44.4*error1 + 21.89*error2; // Lead PI controller
	// ctrlOut = 64.02*error - 62.99*error1 - 0.02784*ctrlOut1; // Lead controller
	ctrlOut = ctrlOut1 + 0.1972*error - 0.1972*error1; // PI controller
     3f0:	60 91 34 20 	lds	r22, 0x2034	; 0x802034 <error>
     3f4:	70 91 35 20 	lds	r23, 0x2035	; 0x802035 <error+0x1>
     3f8:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <error+0x2>
     3fc:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <error+0x3>
     400:	2c ec       	ldi	r18, 0xCC	; 204
     402:	3e ee       	ldi	r19, 0xEE	; 238
     404:	49 e4       	ldi	r20, 0x49	; 73
     406:	5e e3       	ldi	r21, 0x3E	; 62
     408:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
     40c:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <ctrlOut1>
     410:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <ctrlOut1+0x1>
     414:	40 91 20 20 	lds	r20, 0x2020	; 0x802020 <ctrlOut1+0x2>
     418:	50 91 21 20 	lds	r21, 0x2021	; 0x802021 <ctrlOut1+0x3>
     41c:	0e 94 5f 04 	call	0x8be	; 0x8be <__addsf3>
     420:	6b 01       	movw	r12, r22
     422:	7c 01       	movw	r14, r24
     424:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <error1>
     428:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <error1+0x1>
     42c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <error1+0x2>
     430:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <error1+0x3>
     434:	2c ec       	ldi	r18, 0xCC	; 204
     436:	3e ee       	ldi	r19, 0xEE	; 238
     438:	49 e4       	ldi	r20, 0x49	; 73
     43a:	5e e3       	ldi	r21, 0x3E	; 62
     43c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	c7 01       	movw	r24, r14
     446:	b6 01       	movw	r22, r12
     448:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__subsf3>
     44c:	60 93 2a 20 	sts	0x202A, r22	; 0x80202a <ctrlOut>
     450:	70 93 2b 20 	sts	0x202B, r23	; 0x80202b <ctrlOut+0x1>
     454:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <ctrlOut+0x2>
     458:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <ctrlOut+0x3>

    ctrlOut1 = ctrlOut;
     45c:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <ctrlOut>
     460:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <ctrlOut+0x1>
     464:	a0 91 2c 20 	lds	r26, 0x202C	; 0x80202c <ctrlOut+0x2>
     468:	b0 91 2d 20 	lds	r27, 0x202D	; 0x80202d <ctrlOut+0x3>
     46c:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <ctrlOut1>
     470:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <ctrlOut1+0x1>
     474:	a0 93 20 20 	sts	0x2020, r26	; 0x802020 <ctrlOut1+0x2>
     478:	b0 93 21 20 	sts	0x2021, r27	; 0x802021 <ctrlOut1+0x3>
    ctrlOut2 = ctrlOut1;
     47c:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <ctrlOut1>
     480:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <ctrlOut1+0x1>
     484:	a0 91 20 20 	lds	r26, 0x2020	; 0x802020 <ctrlOut1+0x2>
     488:	b0 91 21 20 	lds	r27, 0x2021	; 0x802021 <ctrlOut1+0x3>
     48c:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <ctrlOut2>
     490:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <ctrlOut2+0x1>
     494:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <ctrlOut2+0x2>
     498:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <ctrlOut2+0x3>
    error1 = error;
     49c:	80 91 34 20 	lds	r24, 0x2034	; 0x802034 <error>
     4a0:	90 91 35 20 	lds	r25, 0x2035	; 0x802035 <error+0x1>
     4a4:	a0 91 36 20 	lds	r26, 0x2036	; 0x802036 <error+0x2>
     4a8:	b0 91 37 20 	lds	r27, 0x2037	; 0x802037 <error+0x3>
     4ac:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <error1>
     4b0:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <error1+0x1>
     4b4:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <error1+0x2>
     4b8:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <error1+0x3>
    error2 = error1;
     4bc:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <error1>
     4c0:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <error1+0x1>
     4c4:	a0 91 18 20 	lds	r26, 0x2018	; 0x802018 <error1+0x2>
     4c8:	b0 91 19 20 	lds	r27, 0x2019	; 0x802019 <error1+0x3>
     4cc:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <error2>
     4d0:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <error2+0x1>
     4d4:	a0 93 14 20 	sts	0x2014, r26	; 0x802014 <error2+0x2>
     4d8:	b0 93 15 20 	sts	0x2015, r27	; 0x802015 <error2+0x3>
	// the Single ended to Bipolar circuit.  In a perfect world this value would be zero.
	// This value is used to calculate ctrlCorrection.  That is ctrlCorrection = -output value.
	
	/******************************/
	
	if (fabs(ctrlOut) >= maxVoltage)			//Saturation check
     4dc:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <ctrlOut>
     4e0:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <ctrlOut+0x1>
     4e4:	a0 91 2c 20 	lds	r26, 0x202C	; 0x80202c <ctrlOut+0x2>
     4e8:	b0 91 2d 20 	lds	r27, 0x202D	; 0x80202d <ctrlOut+0x3>
     4ec:	bc 01       	movw	r22, r24
     4ee:	cd 01       	movw	r24, r26
     4f0:	9f 77       	andi	r25, 0x7F	; 127
     4f2:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <maxVoltage>
     4f6:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <maxVoltage+0x1>
     4fa:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <maxVoltage+0x2>
     4fe:	50 91 09 20 	lds	r21, 0x2009	; 0x802009 <maxVoltage+0x3>
     502:	0e 94 2a 06 	call	0xc54	; 0xc54 <__gesf2>
     506:	88 23       	and	r24, r24
     508:	d4 f0       	brlt	.+52     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	ctrlOut = copysign(maxVoltage, ctrlOut);
     50a:	40 91 2a 20 	lds	r20, 0x202A	; 0x80202a <ctrlOut>
     50e:	50 91 2b 20 	lds	r21, 0x202B	; 0x80202b <ctrlOut+0x1>
     512:	60 91 2c 20 	lds	r22, 0x202C	; 0x80202c <ctrlOut+0x2>
     516:	70 91 2d 20 	lds	r23, 0x202D	; 0x80202d <ctrlOut+0x3>
     51a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <maxVoltage>
     51e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <maxVoltage+0x1>
     522:	a0 91 08 20 	lds	r26, 0x2008	; 0x802008 <maxVoltage+0x2>
     526:	b0 91 09 20 	lds	r27, 0x2009	; 0x802009 <maxVoltage+0x3>
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     52a:	77 fb       	bst	r23, 7
     52c:	b7 f9       	bld	r27, 7
     52e:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <ctrlOut>
     532:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <ctrlOut+0x1>
     536:	a0 93 2c 20 	sts	0x202C, r26	; 0x80202c <ctrlOut+0x2>
     53a:	b0 93 2d 20 	sts	0x202D, r27	; 0x80202d <ctrlOut+0x3>
	
	ctrlDAC = ((ctrlOut+ ctrlCorrection)*dacConst)+2048.;	// Convert ctrl output voltage (including ctrlCorrection) to DAC value
     53e:	60 91 2a 20 	lds	r22, 0x202A	; 0x80202a <ctrlOut>
     542:	70 91 2b 20 	lds	r23, 0x202B	; 0x80202b <ctrlOut+0x1>
     546:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <ctrlOut+0x2>
     54a:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <ctrlOut+0x3>
     54e:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <ctrlCorrection>
     552:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <ctrlCorrection+0x1>
     556:	40 91 24 20 	lds	r20, 0x2024	; 0x802024 <ctrlCorrection+0x2>
     55a:	50 91 25 20 	lds	r21, 0x2025	; 0x802025 <ctrlCorrection+0x3>
     55e:	0e 94 5f 04 	call	0x8be	; 0x8be <__addsf3>
     562:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <__data_end>
     566:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <__data_end+0x1>
     56a:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <__data_end+0x2>
     56e:	50 91 11 20 	lds	r21, 0x2011	; 0x802011 <__data_end+0x3>
     572:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	55 e4       	ldi	r21, 0x45	; 69
     57e:	0e 94 5f 04 	call	0x8be	; 0x8be <__addsf3>
     582:	60 93 26 20 	sts	0x2026, r22	; 0x802026 <ctrlDAC>
     586:	70 93 27 20 	sts	0x2027, r23	; 0x802027 <ctrlDAC+0x1>
     58a:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <ctrlDAC+0x2>
     58e:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <ctrlDAC+0x3>
	if(ctrlDAC < 0) ctrlDAC=0;								// Check to make sure ctrlDAC is not less than zero
     592:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     596:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     59a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     59e:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	a9 01       	movw	r20, r18
     5a8:	0e 94 cb 04 	call	0x996	; 0x996 <__cmpsf2>
     5ac:	88 23       	and	r24, r24
     5ae:	44 f4       	brge	.+16     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5b0:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <ctrlDAC>
     5b4:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <ctrlDAC+0x1>
     5b8:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <ctrlDAC+0x2>
     5bc:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <ctrlDAC+0x3>
	if(ctrlDAC > 4095) ctrlDAC=4095;						// Check to make sure ctrlDAC is not greater than the maximum value
     5c0:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     5c4:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     5c8:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     5cc:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 ef       	ldi	r19, 0xF0	; 240
     5d4:	4f e7       	ldi	r20, 0x7F	; 127
     5d6:	55 e4       	ldi	r21, 0x45	; 69
     5d8:	0e 94 2a 06 	call	0xc54	; 0xc54 <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	64 f4       	brge	.+24     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 ef       	ldi	r25, 0xF0	; 240
     5e4:	af e7       	ldi	r26, 0x7F	; 127
     5e6:	b5 e4       	ldi	r27, 0x45	; 69
     5e8:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <ctrlDAC>
     5ec:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <ctrlDAC+0x1>
     5f0:	a0 93 28 20 	sts	0x2028, r26	; 0x802028 <ctrlDAC+0x2>
     5f4:	b0 93 29 20 	sts	0x2029, r27	; 0x802029 <ctrlDAC+0x3>
	// while((DACB.STATUS & DAC_CH1DRE_bm)==0);
	// DACB.CH1DATA = (int)positionDAC;					//Write arm position to DACB channel 1

	// flip the order to check channel 0 and channel 1
	// printf("positionDAC = %d\n", (int)(positionDAC));
	while((DACB.STATUS & DAC_CH0DRE_bm)==0);
     5f8:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     5fc:	80 ff       	sbrs	r24, 0
     5fe:	fc cf       	rjmp	.-8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
	DACB.CH0DATA = (int)positionDAC;				//Write arm position to DACB channel 0
     600:	60 91 38 20 	lds	r22, 0x2038	; 0x802038 <positionDAC>
     604:	70 91 39 20 	lds	r23, 0x2039	; 0x802039 <positionDAC+0x1>
     608:	80 91 3a 20 	lds	r24, 0x203A	; 0x80203a <positionDAC+0x2>
     60c:	90 91 3b 20 	lds	r25, 0x203B	; 0x80203b <positionDAC+0x3>
     610:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixsfsi>
     614:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7de338>
     618:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7de339>
	while((DACB.STATUS & DAC_CH1DRE_bm)==0);
     61c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__TEXT_REGION_LENGTH__+0x7de325>
     620:	81 ff       	sbrs	r24, 1
     622:	fc cf       	rjmp	.-8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
	DACB.CH1DATA = (int)ctrlDAC;					//Write ctrl signal to DACB channel 1
     624:	60 91 26 20 	lds	r22, 0x2026	; 0x802026 <ctrlDAC>
     628:	70 91 27 20 	lds	r23, 0x2027	; 0x802027 <ctrlDAC+0x1>
     62c:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <ctrlDAC+0x2>
     630:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <ctrlDAC+0x3>
     634:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixsfsi>
     638:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <__TEXT_REGION_LENGTH__+0x7de33a>
     63c:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <__TEXT_REGION_LENGTH__+0x7de33b>

	
	// printf("Error = %d, ctrlOut = %d, Position = %d, ctrlDac = %d, PositionDac = %d\n", (int)(error*100), (int)(ctrlOut*100), (int)(position*100), (int)ctrlDAC, (int)positionDAC);
	
	PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for timing
     640:	80 e8       	ldi	r24, 0x80	; 128
     642:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x7de667>
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	09 be       	out	0x39, r0	; 57
     66e:	0f 90       	pop	r0
     670:	08 be       	out	0x38, r0	; 56
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <clk_init>:
/*Initialization Functions for Hardware                                 */
/************************************************************************/

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     67c:	e0 e5       	ldi	r30, 0x50	; 80
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	82 60       	ori	r24, 0x02	; 2
     684:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32MHz Osc to be stable
     686:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
     68a:	81 ff       	sbrs	r24, 1
     68c:	fc cf       	rjmp	.-8      	; 0x686 <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//enable access to system clock
     68e:	88 ed       	ldi	r24, 0xD8	; 216
     690:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
     698:	08 95       	ret

0000069a <usart_init>:

void usart_init(void)
{

	//Set TxD as output RxD as input
	PORTC.DIRSET = (1<<3);
     69a:	e0 e4       	ldi	r30, 0x40	; 64
     69c:	f6 e0       	ldi	r31, 0x06	; 6
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = (1<<2);
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	82 83       	std	Z+2, r24	; 0x02

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     6a6:	e0 ea       	ldi	r30, 0xA0	; 160
     6a8:	f8 e0       	ldi	r31, 0x08	; 8
     6aa:	85 81       	ldd	r24, Z+5	; 0x05
     6ac:	83 60       	ori	r24, 0x03	; 3
     6ae:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     6b0:	8b e6       	ldi	r24, 0x6B	; 107
     6b2:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     6b4:	80 eb       	ldi	r24, 0xB0	; 176
     6b6:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx and Rx
	USARTC0.CTRLB |= USART_TXEN_bm;
     6b8:	84 81       	ldd	r24, Z+4	; 0x04
     6ba:	88 60       	ori	r24, 0x08	; 8
     6bc:	84 83       	std	Z+4, r24	; 0x04

	// setup printf to use serial port
	fdevopen(&put_char,NULL);
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e2       	ldi	r24, 0x28	; 40
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 9c 06 	call	0xd38	; 0xd38 <fdevopen>
     6ca:	08 95       	ret

000006cc <encoder_init>:


void encoder_init(void)
{
	// set encoder pins as input
	PORTD.DIRCLR = (1<<0) | (1<<1);
     6cc:	e0 e6       	ldi	r30, 0x60	; 96
     6ce:	f6 e0       	ldi	r31, 0x06	; 6
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to level sensing
     6d4:	80 89       	ldd	r24, Z+16	; 0x10
     6d6:	83 60       	ori	r24, 0x03	; 3
     6d8:	80 8b       	std	Z+16, r24	; 0x10

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 to Event channel 0
     6da:	e0 e8       	ldi	r30, 0x80	; 128
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	88 e6       	ldi	r24, 0x68	; 104
     6e0:	80 83       	st	Z, r24
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode
     6e2:	80 85       	ldd	r24, Z+8	; 0x08
     6e4:	89 60       	ori	r24, 0x09	; 9
     6e6:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;					//set digital filter to 1 sample

	//setup timer
	TCC0.CTRLD |= TC_EVACT_QDEC_gc				//set timer to quadrature decode
     6e8:	e0 e0       	ldi	r30, 0x00	; 0
     6ea:	f8 e0       	ldi	r31, 0x08	; 8
     6ec:	83 81       	ldd	r24, Z+3	; 0x03
     6ee:	88 66       	ori	r24, 0x68	; 104
     6f0:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source
	TCC0.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer
     6f2:	80 81       	ld	r24, Z
     6f4:	81 60       	ori	r24, 0x01	; 1
     6f6:	80 83       	st	Z, r24
     6f8:	08 95       	ret

000006fa <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     6fa:	aa ec       	ldi	r26, 0xCA	; 202
     6fc:	b1 e0       	ldi	r27, 0x01	; 1
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	9c 93       	st	X, r25
	result = pgm_read_byte(index);
     702:	e8 2f       	mov	r30, r24
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	84 91       	lpm	r24, Z

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     708:	1c 92       	st	X, r1

	return result;
}
     70a:	08 95       	ret

0000070c <ADC_CalibrationValues_Set>:
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
}

void ADC_CalibrationValues_Set(ADC_t * adc)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
	if(&ADCA == adc){
     712:	c1 15       	cp	r28, r1
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	d8 07       	cpc	r29, r24
     718:	39 f4       	brne	.+14     	; 0x728 <ADC_CalibrationValues_Set+0x1c>
		/* Get ADCCAL0 from byte address 0x20 (Word address 0x10. */
		adc->CAL = SP_ReadCalibrationByte(0x20);
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	8c 87       	std	Y+12, r24	; 0x0c
     724:	9d 87       	std	Y+13, r25	; 0x0d
     726:	06 c0       	rjmp	.+12     	; 0x734 <ADC_CalibrationValues_Set+0x28>
		}else {
		/* Get ADCCAL0 from byte address 0x24 (Word address 0x12. */
		adc->CAL = SP_ReadCalibrationByte(0x24);
     728:	84 e2       	ldi	r24, 0x24	; 36
     72a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	8c 87       	std	Y+12, r24	; 0x0c
     732:	9d 87       	std	Y+13, r25	; 0x0d
	}
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <adc_init>:
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
}

void adc_init(void)
{
	ADC_CalibrationValues_Set(&ADCA);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	0e 94 86 03 	call	0x70c	; 0x70c <ADC_CalibrationValues_Set>
	ADCA.CTRLB |= ADC_FREERUN_bm;
     742:	e0 e0       	ldi	r30, 0x00	; 0
     744:	f2 e0       	ldi	r31, 0x02	; 2
     746:	81 81       	ldd	r24, Z+1	; 0x01
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL |= ADC_BANDGAP_bm;				//enable bandgap for internal vref
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	82 60       	ori	r24, 0x02	; 2
     750:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;
     752:	80 a1       	ldd	r24, Z+32	; 0x20
     754:	81 60       	ori	r24, 0x01	; 1
     756:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.PRESCALER |= ADC_PRESCALER_DIV16_gc;	//maximum ADC clock of 2 MHz
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	82 60       	ori	r24, 0x02	; 2
     75c:	84 83       	std	Z+4, r24	; 0x04
	ADCA.CTRLA |= ADC_ENABLE_bm;				//enable ADCA
     75e:	80 81       	ld	r24, Z
     760:	81 60       	ori	r24, 0x01	; 1
     762:	80 83       	st	Z, r24
     764:	08 95       	ret

00000766 <DAC_CalibrationValues_Set>:
		adc->CAL = SP_ReadCalibrationByte(0x24);
	}
}

void DAC_CalibrationValues_Set(DAC_t * dac)
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
	if(&DACA == dac){
     76c:	c1 15       	cp	r28, r1
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	d8 07       	cpc	r29, r24
     772:	89 f4       	brne	.+34     	; 0x796 <DAC_CalibrationValues_Set+0x30>
		/* Get DACA0OFFCAL from byte address 0x30 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x30);
     774:	80 e3       	ldi	r24, 0x30	; 48
     776:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     77a:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACA0GAINCAL from byte address 0x31 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x31);
     77c:	81 e3       	ldi	r24, 0x31	; 49
     77e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     782:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACA1OFFCAL from byte address 0x34 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x34);
     784:	84 e3       	ldi	r24, 0x34	; 52
     786:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     78a:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACA1GAINCAL from byte address 0x35 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x35);
     78c:	85 e3       	ldi	r24, 0x35	; 53
     78e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     792:	8a 87       	std	Y+10, r24	; 0x0a
     794:	10 c0       	rjmp	.+32     	; 0x7b6 <DAC_CalibrationValues_Set+0x50>
		}else {
		/* Get DACB0OFFCAL from byte address 0x32 */
		dac->CH0OFFSETCAL = SP_ReadCalibrationByte(0x32);
     796:	82 e3       	ldi	r24, 0x32	; 50
     798:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     79c:	89 87       	std	Y+9, r24	; 0x09
		/* Get DACB0GAINCAL from byte address 0x33 */
		dac->CH0GAINCAL = SP_ReadCalibrationByte(0x33);
     79e:	83 e3       	ldi	r24, 0x33	; 51
     7a0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     7a4:	88 87       	std	Y+8, r24	; 0x08
		/* Get DACB1OFFCAL from byte address 0x36 */
		dac->CH1OFFSETCAL = SP_ReadCalibrationByte(0x36);
     7a6:	86 e3       	ldi	r24, 0x36	; 54
     7a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     7ac:	8b 87       	std	Y+11, r24	; 0x0b
		/* Get DACB1GAINCAL from byte address 0x37 */
		dac->CH1GAINCAL = SP_ReadCalibrationByte(0x37);
     7ae:	87 e3       	ldi	r24, 0x37	; 55
     7b0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <SP_ReadCalibrationByte>
     7b4:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <dac_init>:
}


void dac_init(void)
{
	DAC_CalibrationValues_Set(&DACB);
     7bc:	80 e2       	ldi	r24, 0x20	; 32
     7be:	93 e0       	ldi	r25, 0x03	; 3
     7c0:	0e 94 b3 03 	call	0x766	; 0x766 <DAC_CalibrationValues_Set>
	DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
     7c4:	e0 e2       	ldi	r30, 0x20	; 32
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
     7ca:	80 64       	ori	r24, 0x40	; 64
     7cc:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     7ce:	82 81       	ldd	r24, Z+2	; 0x02
     7d0:	82 83       	std	Z+2, r24	; 0x02
	// DACB.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACB.CH0DATAH = 0x00;
     7d2:	11 8e       	std	Z+25, r1	; 0x19
	DACB.CH1DATAH = 0x00;
     7d4:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     7d6:	80 81       	ld	r24, Z
     7d8:	8d 60       	ori	r24, 0x0D	; 13
     7da:	80 83       	st	Z, r24
	
	DAC_CalibrationValues_Set(&DACA);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 b3 03 	call	0x766	; 0x766 <DAC_CalibrationValues_Set>
	DACA.CTRLB |= DAC_CHSEL_DUAL_gc;
     7e4:	e0 e0       	ldi	r30, 0x00	; 0
     7e6:	f3 e0       	ldi	r31, 0x03	; 3
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	80 64       	ori	r24, 0x40	; 64
     7ec:	81 83       	std	Z+1, r24	; 0x01
	DACA.CTRLC |= DAC_REFSEL_INT1V_gc;	// 1 volt internal reference. bug in xmega makes 0-.75v output noisy when using reference above 2v
     7ee:	82 81       	ldd	r24, Z+2	; 0x02
     7f0:	82 83       	std	Z+2, r24	; 0x02
	//DACA.TIMCTRL |= DAC_CONINTVAL_32CLK_gc;
	DACA.CH0DATAH = 0x00;
     7f2:	11 8e       	std	Z+25, r1	; 0x19
	DACA.CH1DATAH = 0x00;
     7f4:	13 8e       	std	Z+27, r1	; 0x1b
	DACA.CTRLA |= DAC_ENABLE_bm | DAC_CH0EN_bm | DAC_CH1EN_bm;
     7f6:	80 81       	ld	r24, Z
     7f8:	8d 60       	ori	r24, 0x0D	; 13
     7fa:	80 83       	st	Z, r24
     7fc:	08 95       	ret

000007fe <timer_init>:

	return result;
}

void timer_init(uint16_t topCount)
{
     7fe:	9c 01       	movw	r18, r24
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode, Output Compare pins disconnected
     800:	e0 e4       	ldi	r30, 0x40	; 64
     802:	f8 e0       	ldi	r31, 0x08	; 8
     804:	81 81       	ldd	r24, Z+1	; 0x01
     806:	81 83       	std	Z+1, r24	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrrupt
     808:	96 81       	ldd	r25, Z+6	; 0x06
     80a:	91 60       	ori	r25, 0x01	; 1
     80c:	96 83       	std	Z+6, r25	; 0x06
	TCC1.PER = topCount;					//Set Period
     80e:	26 a3       	std	Z+38, r18	; 0x26
     810:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV4_gc;		//Start at Clk/4
     812:	80 81       	ld	r24, Z
     814:	83 60       	ori	r24, 0x03	; 3
     816:	80 83       	st	Z, r24
     818:	08 95       	ret

0000081a <main>:


int main(void)
{
	
	clk_init();
     81a:	0e 94 3e 03 	call	0x67c	; 0x67c <clk_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81e:	2f ef       	ldi	r18, 0xFF	; 255
     820:	83 ed       	ldi	r24, 0xD3	; 211
     822:	90 e3       	ldi	r25, 0x30	; 48
     824:	21 50       	subi	r18, 0x01	; 1
     826:	80 40       	sbci	r24, 0x00	; 0
     828:	90 40       	sbci	r25, 0x00	; 0
     82a:	e1 f7       	brne	.-8      	; 0x824 <main+0xa>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <main+0x14>
     82e:	00 00       	nop
    _delay_ms(500); //add a delay 0.5 for the encoder to stablize
	encoder_init();
     830:	0e 94 66 03 	call	0x6cc	; 0x6cc <encoder_init>
	usart_init();
     834:	0e 94 4d 03 	call	0x69a	; 0x69a <usart_init>
	dac_init();
     838:	0e 94 de 03 	call	0x7bc	; 0x7bc <dac_init>
	adc_init();
     83c:	0e 94 9d 03 	call	0x73a	; 0x73a <adc_init>
	
	PORTD.DIRSET = (1<<7);	//set D7 as output for timing pin
     840:	80 e8       	ldi	r24, 0x80	; 128
     842:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7de661>
	dacConst = 4095./(2.0*maxVoltage);		//Conversion factor for Control voltage to DAC value
     846:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <maxVoltage>
     84a:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <maxVoltage+0x1>
     84e:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <maxVoltage+0x2>
     852:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <maxVoltage+0x3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	0e 94 5f 04 	call	0x8be	; 0x8be <__addsf3>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 ef       	ldi	r23, 0xF0	; 240
     866:	8f e7       	ldi	r24, 0x7F	; 127
     868:	95 e4       	ldi	r25, 0x45	; 69
     86a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divsf3>
     86e:	60 93 0e 20 	sts	0x200E, r22	; 0x80200e <__data_end>
     872:	70 93 0f 20 	sts	0x200F, r23	; 0x80200f <__data_end+0x1>
     876:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__data_end+0x2>
     87a:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__data_end+0x3>
	topCount = (uint16_t)(Ts*8000000.);		//Computed TOP value for TCC1
     87e:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <Ts>
     882:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <Ts+0x1>
     886:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <Ts+0x2>
     88a:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <Ts+0x3>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	34 e2       	ldi	r19, 0x24	; 36
     892:	44 ef       	ldi	r20, 0xF4	; 244
     894:	5a e4       	ldi	r21, 0x4A	; 74
     896:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
     89a:	0e 94 49 05 	call	0xa92	; 0xa92 <__fixunssfsi>
     89e:	60 93 42 20 	sts	0x2042, r22	; 0x802042 <topCount>
     8a2:	70 93 43 20 	sts	0x2043, r23	; 0x802043 <topCount+0x1>
	
	timer_init(topCount);
     8a6:	80 91 42 20 	lds	r24, 0x2042	; 0x802042 <topCount>
     8aa:	90 91 43 20 	lds	r25, 0x2043	; 0x802043 <topCount+0x1>
     8ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <timer_init>
	
	//enable intterupts all levels
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	sei();
     8b8:	78 94       	sei
     8ba:	ff cf       	rjmp	.-2      	; 0x8ba <main+0xa0>

000008bc <__subsf3>:
     8bc:	50 58       	subi	r21, 0x80	; 128

000008be <__addsf3>:
     8be:	bb 27       	eor	r27, r27
     8c0:	aa 27       	eor	r26, r26
     8c2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3x>
     8c6:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_round>
     8ca:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_pscA>
     8ce:	38 f0       	brcs	.+14     	; 0x8de <__addsf3+0x20>
     8d0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscB>
     8d4:	20 f0       	brcs	.+8      	; 0x8de <__addsf3+0x20>
     8d6:	39 f4       	brne	.+14     	; 0x8e6 <__addsf3+0x28>
     8d8:	9f 3f       	cpi	r25, 0xFF	; 255
     8da:	19 f4       	brne	.+6      	; 0x8e2 <__addsf3+0x24>
     8dc:	26 f4       	brtc	.+8      	; 0x8e6 <__addsf3+0x28>
     8de:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_nan>
     8e2:	0e f4       	brtc	.+2      	; 0x8e6 <__addsf3+0x28>
     8e4:	e0 95       	com	r30
     8e6:	e7 fb       	bst	r30, 7
     8e8:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_inf>

000008ec <__addsf3x>:
     8ec:	e9 2f       	mov	r30, r25
     8ee:	0e 94 01 06 	call	0xc02	; 0xc02 <__fp_split3>
     8f2:	58 f3       	brcs	.-42     	; 0x8ca <__addsf3+0xc>
     8f4:	ba 17       	cp	r27, r26
     8f6:	62 07       	cpc	r22, r18
     8f8:	73 07       	cpc	r23, r19
     8fa:	84 07       	cpc	r24, r20
     8fc:	95 07       	cpc	r25, r21
     8fe:	20 f0       	brcs	.+8      	; 0x908 <__addsf3x+0x1c>
     900:	79 f4       	brne	.+30     	; 0x920 <__addsf3x+0x34>
     902:	a6 f5       	brtc	.+104    	; 0x96c <__addsf3x+0x80>
     904:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_zero>
     908:	0e f4       	brtc	.+2      	; 0x90c <__addsf3x+0x20>
     90a:	e0 95       	com	r30
     90c:	0b 2e       	mov	r0, r27
     90e:	ba 2f       	mov	r27, r26
     910:	a0 2d       	mov	r26, r0
     912:	0b 01       	movw	r0, r22
     914:	b9 01       	movw	r22, r18
     916:	90 01       	movw	r18, r0
     918:	0c 01       	movw	r0, r24
     91a:	ca 01       	movw	r24, r20
     91c:	a0 01       	movw	r20, r0
     91e:	11 24       	eor	r1, r1
     920:	ff 27       	eor	r31, r31
     922:	59 1b       	sub	r21, r25
     924:	99 f0       	breq	.+38     	; 0x94c <__addsf3x+0x60>
     926:	59 3f       	cpi	r21, 0xF9	; 249
     928:	50 f4       	brcc	.+20     	; 0x93e <__addsf3x+0x52>
     92a:	50 3e       	cpi	r21, 0xE0	; 224
     92c:	68 f1       	brcs	.+90     	; 0x988 <__addsf3x+0x9c>
     92e:	1a 16       	cp	r1, r26
     930:	f0 40       	sbci	r31, 0x00	; 0
     932:	a2 2f       	mov	r26, r18
     934:	23 2f       	mov	r18, r19
     936:	34 2f       	mov	r19, r20
     938:	44 27       	eor	r20, r20
     93a:	58 5f       	subi	r21, 0xF8	; 248
     93c:	f3 cf       	rjmp	.-26     	; 0x924 <__addsf3x+0x38>
     93e:	46 95       	lsr	r20
     940:	37 95       	ror	r19
     942:	27 95       	ror	r18
     944:	a7 95       	ror	r26
     946:	f0 40       	sbci	r31, 0x00	; 0
     948:	53 95       	inc	r21
     94a:	c9 f7       	brne	.-14     	; 0x93e <__addsf3x+0x52>
     94c:	7e f4       	brtc	.+30     	; 0x96c <__addsf3x+0x80>
     94e:	1f 16       	cp	r1, r31
     950:	ba 0b       	sbc	r27, r26
     952:	62 0b       	sbc	r22, r18
     954:	73 0b       	sbc	r23, r19
     956:	84 0b       	sbc	r24, r20
     958:	ba f0       	brmi	.+46     	; 0x988 <__addsf3x+0x9c>
     95a:	91 50       	subi	r25, 0x01	; 1
     95c:	a1 f0       	breq	.+40     	; 0x986 <__addsf3x+0x9a>
     95e:	ff 0f       	add	r31, r31
     960:	bb 1f       	adc	r27, r27
     962:	66 1f       	adc	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	88 1f       	adc	r24, r24
     968:	c2 f7       	brpl	.-16     	; 0x95a <__addsf3x+0x6e>
     96a:	0e c0       	rjmp	.+28     	; 0x988 <__addsf3x+0x9c>
     96c:	ba 0f       	add	r27, r26
     96e:	62 1f       	adc	r22, r18
     970:	73 1f       	adc	r23, r19
     972:	84 1f       	adc	r24, r20
     974:	48 f4       	brcc	.+18     	; 0x988 <__addsf3x+0x9c>
     976:	87 95       	ror	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b7 95       	ror	r27
     97e:	f7 95       	ror	r31
     980:	9e 3f       	cpi	r25, 0xFE	; 254
     982:	08 f0       	brcs	.+2      	; 0x986 <__addsf3x+0x9a>
     984:	b0 cf       	rjmp	.-160    	; 0x8e6 <__addsf3+0x28>
     986:	93 95       	inc	r25
     988:	88 0f       	add	r24, r24
     98a:	08 f0       	brcs	.+2      	; 0x98e <__addsf3x+0xa2>
     98c:	99 27       	eor	r25, r25
     98e:	ee 0f       	add	r30, r30
     990:	97 95       	ror	r25
     992:	87 95       	ror	r24
     994:	08 95       	ret

00000996 <__cmpsf2>:
     996:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_cmp>
     99a:	08 f4       	brcc	.+2      	; 0x99e <__cmpsf2+0x8>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret

000009a0 <__divsf3>:
     9a0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__divsf3x>
     9a4:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_round>
     9a8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscB>
     9ac:	58 f0       	brcs	.+22     	; 0x9c4 <__divsf3+0x24>
     9ae:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_pscA>
     9b2:	40 f0       	brcs	.+16     	; 0x9c4 <__divsf3+0x24>
     9b4:	29 f4       	brne	.+10     	; 0x9c0 <__divsf3+0x20>
     9b6:	5f 3f       	cpi	r21, 0xFF	; 255
     9b8:	29 f0       	breq	.+10     	; 0x9c4 <__divsf3+0x24>
     9ba:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_inf>
     9be:	51 11       	cpse	r21, r1
     9c0:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_szero>
     9c4:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_nan>

000009c8 <__divsf3x>:
     9c8:	0e 94 01 06 	call	0xc02	; 0xc02 <__fp_split3>
     9cc:	68 f3       	brcs	.-38     	; 0x9a8 <__divsf3+0x8>

000009ce <__divsf3_pse>:
     9ce:	99 23       	and	r25, r25
     9d0:	b1 f3       	breq	.-20     	; 0x9be <__divsf3+0x1e>
     9d2:	55 23       	and	r21, r21
     9d4:	91 f3       	breq	.-28     	; 0x9ba <__divsf3+0x1a>
     9d6:	95 1b       	sub	r25, r21
     9d8:	55 0b       	sbc	r21, r21
     9da:	bb 27       	eor	r27, r27
     9dc:	aa 27       	eor	r26, r26
     9de:	62 17       	cp	r22, r18
     9e0:	73 07       	cpc	r23, r19
     9e2:	84 07       	cpc	r24, r20
     9e4:	38 f0       	brcs	.+14     	; 0x9f4 <__divsf3_pse+0x26>
     9e6:	9f 5f       	subi	r25, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	22 0f       	add	r18, r18
     9ec:	33 1f       	adc	r19, r19
     9ee:	44 1f       	adc	r20, r20
     9f0:	aa 1f       	adc	r26, r26
     9f2:	a9 f3       	breq	.-22     	; 0x9de <__divsf3_pse+0x10>
     9f4:	35 d0       	rcall	.+106    	; 0xa60 <__divsf3_pse+0x92>
     9f6:	0e 2e       	mov	r0, r30
     9f8:	3a f0       	brmi	.+14     	; 0xa08 <__divsf3_pse+0x3a>
     9fa:	e0 e8       	ldi	r30, 0x80	; 128
     9fc:	32 d0       	rcall	.+100    	; 0xa62 <__divsf3_pse+0x94>
     9fe:	91 50       	subi	r25, 0x01	; 1
     a00:	50 40       	sbci	r21, 0x00	; 0
     a02:	e6 95       	lsr	r30
     a04:	00 1c       	adc	r0, r0
     a06:	ca f7       	brpl	.-14     	; 0x9fa <__divsf3_pse+0x2c>
     a08:	2b d0       	rcall	.+86     	; 0xa60 <__divsf3_pse+0x92>
     a0a:	fe 2f       	mov	r31, r30
     a0c:	29 d0       	rcall	.+82     	; 0xa60 <__divsf3_pse+0x92>
     a0e:	66 0f       	add	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	88 1f       	adc	r24, r24
     a14:	bb 1f       	adc	r27, r27
     a16:	26 17       	cp	r18, r22
     a18:	37 07       	cpc	r19, r23
     a1a:	48 07       	cpc	r20, r24
     a1c:	ab 07       	cpc	r26, r27
     a1e:	b0 e8       	ldi	r27, 0x80	; 128
     a20:	09 f0       	breq	.+2      	; 0xa24 <__divsf3_pse+0x56>
     a22:	bb 0b       	sbc	r27, r27
     a24:	80 2d       	mov	r24, r0
     a26:	bf 01       	movw	r22, r30
     a28:	ff 27       	eor	r31, r31
     a2a:	93 58       	subi	r25, 0x83	; 131
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	3a f0       	brmi	.+14     	; 0xa3e <__divsf3_pse+0x70>
     a30:	9e 3f       	cpi	r25, 0xFE	; 254
     a32:	51 05       	cpc	r21, r1
     a34:	78 f0       	brcs	.+30     	; 0xa54 <__divsf3_pse+0x86>
     a36:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_inf>
     a3a:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_szero>
     a3e:	5f 3f       	cpi	r21, 0xFF	; 255
     a40:	e4 f3       	brlt	.-8      	; 0xa3a <__divsf3_pse+0x6c>
     a42:	98 3e       	cpi	r25, 0xE8	; 232
     a44:	d4 f3       	brlt	.-12     	; 0xa3a <__divsf3_pse+0x6c>
     a46:	86 95       	lsr	r24
     a48:	77 95       	ror	r23
     a4a:	67 95       	ror	r22
     a4c:	b7 95       	ror	r27
     a4e:	f7 95       	ror	r31
     a50:	9f 5f       	subi	r25, 0xFF	; 255
     a52:	c9 f7       	brne	.-14     	; 0xa46 <__divsf3_pse+0x78>
     a54:	88 0f       	add	r24, r24
     a56:	91 1d       	adc	r25, r1
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	97 f9       	bld	r25, 7
     a5e:	08 95       	ret
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	bb 1f       	adc	r27, r27
     a6a:	62 17       	cp	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	ba 07       	cpc	r27, r26
     a72:	20 f0       	brcs	.+8      	; 0xa7c <__divsf3_pse+0xae>
     a74:	62 1b       	sub	r22, r18
     a76:	73 0b       	sbc	r23, r19
     a78:	84 0b       	sbc	r24, r20
     a7a:	ba 0b       	sbc	r27, r26
     a7c:	ee 1f       	adc	r30, r30
     a7e:	88 f7       	brcc	.-30     	; 0xa62 <__divsf3_pse+0x94>
     a80:	e0 95       	com	r30
     a82:	08 95       	ret

00000a84 <__fixsfsi>:
     a84:	0e 94 49 05 	call	0xa92	; 0xa92 <__fixunssfsi>
     a88:	68 94       	set
     a8a:	b1 11       	cpse	r27, r1
     a8c:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_szero>
     a90:	08 95       	ret

00000a92 <__fixunssfsi>:
     a92:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_splitA>
     a96:	88 f0       	brcs	.+34     	; 0xaba <__fixunssfsi+0x28>
     a98:	9f 57       	subi	r25, 0x7F	; 127
     a9a:	98 f0       	brcs	.+38     	; 0xac2 <__fixunssfsi+0x30>
     a9c:	b9 2f       	mov	r27, r25
     a9e:	99 27       	eor	r25, r25
     aa0:	b7 51       	subi	r27, 0x17	; 23
     aa2:	b0 f0       	brcs	.+44     	; 0xad0 <__fixunssfsi+0x3e>
     aa4:	e1 f0       	breq	.+56     	; 0xade <__fixunssfsi+0x4c>
     aa6:	66 0f       	add	r22, r22
     aa8:	77 1f       	adc	r23, r23
     aaa:	88 1f       	adc	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	1a f0       	brmi	.+6      	; 0xab6 <__fixunssfsi+0x24>
     ab0:	ba 95       	dec	r27
     ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__fixunssfsi+0x14>
     ab4:	14 c0       	rjmp	.+40     	; 0xade <__fixunssfsi+0x4c>
     ab6:	b1 30       	cpi	r27, 0x01	; 1
     ab8:	91 f0       	breq	.+36     	; 0xade <__fixunssfsi+0x4c>
     aba:	0e 94 23 06 	call	0xc46	; 0xc46 <__fp_zero>
     abe:	b1 e0       	ldi	r27, 0x01	; 1
     ac0:	08 95       	ret
     ac2:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_zero>
     ac6:	67 2f       	mov	r22, r23
     ac8:	78 2f       	mov	r23, r24
     aca:	88 27       	eor	r24, r24
     acc:	b8 5f       	subi	r27, 0xF8	; 248
     ace:	39 f0       	breq	.+14     	; 0xade <__fixunssfsi+0x4c>
     ad0:	b9 3f       	cpi	r27, 0xF9	; 249
     ad2:	cc f3       	brlt	.-14     	; 0xac6 <__fixunssfsi+0x34>
     ad4:	86 95       	lsr	r24
     ad6:	77 95       	ror	r23
     ad8:	67 95       	ror	r22
     ada:	b3 95       	inc	r27
     adc:	d9 f7       	brne	.-10     	; 0xad4 <__fixunssfsi+0x42>
     ade:	3e f4       	brtc	.+14     	; 0xaee <__fixunssfsi+0x5c>
     ae0:	90 95       	com	r25
     ae2:	80 95       	com	r24
     ae4:	70 95       	com	r23
     ae6:	61 95       	neg	r22
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	8f 4f       	sbci	r24, 0xFF	; 255
     aec:	9f 4f       	sbci	r25, 0xFF	; 255
     aee:	08 95       	ret

00000af0 <__floatunsisf>:
     af0:	e8 94       	clt
     af2:	09 c0       	rjmp	.+18     	; 0xb06 <__floatsisf+0x12>

00000af4 <__floatsisf>:
     af4:	97 fb       	bst	r25, 7
     af6:	3e f4       	brtc	.+14     	; 0xb06 <__floatsisf+0x12>
     af8:	90 95       	com	r25
     afa:	80 95       	com	r24
     afc:	70 95       	com	r23
     afe:	61 95       	neg	r22
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	8f 4f       	sbci	r24, 0xFF	; 255
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	99 23       	and	r25, r25
     b08:	a9 f0       	breq	.+42     	; 0xb34 <__floatsisf+0x40>
     b0a:	f9 2f       	mov	r31, r25
     b0c:	96 e9       	ldi	r25, 0x96	; 150
     b0e:	bb 27       	eor	r27, r27
     b10:	93 95       	inc	r25
     b12:	f6 95       	lsr	r31
     b14:	87 95       	ror	r24
     b16:	77 95       	ror	r23
     b18:	67 95       	ror	r22
     b1a:	b7 95       	ror	r27
     b1c:	f1 11       	cpse	r31, r1
     b1e:	f8 cf       	rjmp	.-16     	; 0xb10 <__floatsisf+0x1c>
     b20:	fa f4       	brpl	.+62     	; 0xb60 <__floatsisf+0x6c>
     b22:	bb 0f       	add	r27, r27
     b24:	11 f4       	brne	.+4      	; 0xb2a <__floatsisf+0x36>
     b26:	60 ff       	sbrs	r22, 0
     b28:	1b c0       	rjmp	.+54     	; 0xb60 <__floatsisf+0x6c>
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	8f 4f       	sbci	r24, 0xFF	; 255
     b30:	9f 4f       	sbci	r25, 0xFF	; 255
     b32:	16 c0       	rjmp	.+44     	; 0xb60 <__floatsisf+0x6c>
     b34:	88 23       	and	r24, r24
     b36:	11 f0       	breq	.+4      	; 0xb3c <__floatsisf+0x48>
     b38:	96 e9       	ldi	r25, 0x96	; 150
     b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__floatsisf+0x6a>
     b3c:	77 23       	and	r23, r23
     b3e:	21 f0       	breq	.+8      	; 0xb48 <__floatsisf+0x54>
     b40:	9e e8       	ldi	r25, 0x8E	; 142
     b42:	87 2f       	mov	r24, r23
     b44:	76 2f       	mov	r23, r22
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <__floatsisf+0x5e>
     b48:	66 23       	and	r22, r22
     b4a:	71 f0       	breq	.+28     	; 0xb68 <__floatsisf+0x74>
     b4c:	96 e8       	ldi	r25, 0x86	; 134
     b4e:	86 2f       	mov	r24, r22
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	2a f0       	brmi	.+10     	; 0xb60 <__floatsisf+0x6c>
     b56:	9a 95       	dec	r25
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	da f7       	brpl	.-10     	; 0xb56 <__floatsisf+0x62>
     b60:	88 0f       	add	r24, r24
     b62:	96 95       	lsr	r25
     b64:	87 95       	ror	r24
     b66:	97 f9       	bld	r25, 7
     b68:	08 95       	ret

00000b6a <__fp_cmp>:
     b6a:	99 0f       	add	r25, r25
     b6c:	00 08       	sbc	r0, r0
     b6e:	55 0f       	add	r21, r21
     b70:	aa 0b       	sbc	r26, r26
     b72:	e0 e8       	ldi	r30, 0x80	; 128
     b74:	fe ef       	ldi	r31, 0xFE	; 254
     b76:	16 16       	cp	r1, r22
     b78:	17 06       	cpc	r1, r23
     b7a:	e8 07       	cpc	r30, r24
     b7c:	f9 07       	cpc	r31, r25
     b7e:	c0 f0       	brcs	.+48     	; 0xbb0 <__fp_cmp+0x46>
     b80:	12 16       	cp	r1, r18
     b82:	13 06       	cpc	r1, r19
     b84:	e4 07       	cpc	r30, r20
     b86:	f5 07       	cpc	r31, r21
     b88:	98 f0       	brcs	.+38     	; 0xbb0 <__fp_cmp+0x46>
     b8a:	62 1b       	sub	r22, r18
     b8c:	73 0b       	sbc	r23, r19
     b8e:	84 0b       	sbc	r24, r20
     b90:	95 0b       	sbc	r25, r21
     b92:	39 f4       	brne	.+14     	; 0xba2 <__fp_cmp+0x38>
     b94:	0a 26       	eor	r0, r26
     b96:	61 f0       	breq	.+24     	; 0xbb0 <__fp_cmp+0x46>
     b98:	23 2b       	or	r18, r19
     b9a:	24 2b       	or	r18, r20
     b9c:	25 2b       	or	r18, r21
     b9e:	21 f4       	brne	.+8      	; 0xba8 <__fp_cmp+0x3e>
     ba0:	08 95       	ret
     ba2:	0a 26       	eor	r0, r26
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__fp_cmp+0x3e>
     ba6:	a1 40       	sbci	r26, 0x01	; 1
     ba8:	a6 95       	lsr	r26
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	81 1d       	adc	r24, r1
     bae:	81 1d       	adc	r24, r1
     bb0:	08 95       	ret

00000bb2 <__fp_inf>:
     bb2:	97 f9       	bld	r25, 7
     bb4:	9f 67       	ori	r25, 0x7F	; 127
     bb6:	80 e8       	ldi	r24, 0x80	; 128
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	08 95       	ret

00000bbe <__fp_nan>:
     bbe:	9f ef       	ldi	r25, 0xFF	; 255
     bc0:	80 ec       	ldi	r24, 0xC0	; 192
     bc2:	08 95       	ret

00000bc4 <__fp_pscA>:
     bc4:	00 24       	eor	r0, r0
     bc6:	0a 94       	dec	r0
     bc8:	16 16       	cp	r1, r22
     bca:	17 06       	cpc	r1, r23
     bcc:	18 06       	cpc	r1, r24
     bce:	09 06       	cpc	r0, r25
     bd0:	08 95       	ret

00000bd2 <__fp_pscB>:
     bd2:	00 24       	eor	r0, r0
     bd4:	0a 94       	dec	r0
     bd6:	12 16       	cp	r1, r18
     bd8:	13 06       	cpc	r1, r19
     bda:	14 06       	cpc	r1, r20
     bdc:	05 06       	cpc	r0, r21
     bde:	08 95       	ret

00000be0 <__fp_round>:
     be0:	09 2e       	mov	r0, r25
     be2:	03 94       	inc	r0
     be4:	00 0c       	add	r0, r0
     be6:	11 f4       	brne	.+4      	; 0xbec <__fp_round+0xc>
     be8:	88 23       	and	r24, r24
     bea:	52 f0       	brmi	.+20     	; 0xc00 <__fp_round+0x20>
     bec:	bb 0f       	add	r27, r27
     bee:	40 f4       	brcc	.+16     	; 0xc00 <__fp_round+0x20>
     bf0:	bf 2b       	or	r27, r31
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <__fp_round+0x18>
     bf4:	60 ff       	sbrs	r22, 0
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__fp_round+0x20>
     bf8:	6f 5f       	subi	r22, 0xFF	; 255
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	8f 4f       	sbci	r24, 0xFF	; 255
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	08 95       	ret

00000c02 <__fp_split3>:
     c02:	57 fd       	sbrc	r21, 7
     c04:	90 58       	subi	r25, 0x80	; 128
     c06:	44 0f       	add	r20, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	59 f0       	breq	.+22     	; 0xc22 <__fp_splitA+0x10>
     c0c:	5f 3f       	cpi	r21, 0xFF	; 255
     c0e:	71 f0       	breq	.+28     	; 0xc2c <__fp_splitA+0x1a>
     c10:	47 95       	ror	r20

00000c12 <__fp_splitA>:
     c12:	88 0f       	add	r24, r24
     c14:	97 fb       	bst	r25, 7
     c16:	99 1f       	adc	r25, r25
     c18:	61 f0       	breq	.+24     	; 0xc32 <__fp_splitA+0x20>
     c1a:	9f 3f       	cpi	r25, 0xFF	; 255
     c1c:	79 f0       	breq	.+30     	; 0xc3c <__fp_splitA+0x2a>
     c1e:	87 95       	ror	r24
     c20:	08 95       	ret
     c22:	12 16       	cp	r1, r18
     c24:	13 06       	cpc	r1, r19
     c26:	14 06       	cpc	r1, r20
     c28:	55 1f       	adc	r21, r21
     c2a:	f2 cf       	rjmp	.-28     	; 0xc10 <__fp_split3+0xe>
     c2c:	46 95       	lsr	r20
     c2e:	f1 df       	rcall	.-30     	; 0xc12 <__fp_splitA>
     c30:	08 c0       	rjmp	.+16     	; 0xc42 <__fp_splitA+0x30>
     c32:	16 16       	cp	r1, r22
     c34:	17 06       	cpc	r1, r23
     c36:	18 06       	cpc	r1, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	f1 cf       	rjmp	.-30     	; 0xc1e <__fp_splitA+0xc>
     c3c:	86 95       	lsr	r24
     c3e:	71 05       	cpc	r23, r1
     c40:	61 05       	cpc	r22, r1
     c42:	08 94       	sec
     c44:	08 95       	ret

00000c46 <__fp_zero>:
     c46:	e8 94       	clt

00000c48 <__fp_szero>:
     c48:	bb 27       	eor	r27, r27
     c4a:	66 27       	eor	r22, r22
     c4c:	77 27       	eor	r23, r23
     c4e:	cb 01       	movw	r24, r22
     c50:	97 f9       	bld	r25, 7
     c52:	08 95       	ret

00000c54 <__gesf2>:
     c54:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_cmp>
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__gesf2+0x8>
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	08 95       	ret

00000c5e <__mulsf3>:
     c5e:	0e 94 42 06 	call	0xc84	; 0xc84 <__mulsf3x>
     c62:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_round>
     c66:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_pscA>
     c6a:	38 f0       	brcs	.+14     	; 0xc7a <__mulsf3+0x1c>
     c6c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_pscB>
     c70:	20 f0       	brcs	.+8      	; 0xc7a <__mulsf3+0x1c>
     c72:	95 23       	and	r25, r21
     c74:	11 f0       	breq	.+4      	; 0xc7a <__mulsf3+0x1c>
     c76:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_inf>
     c7a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_nan>
     c7e:	11 24       	eor	r1, r1
     c80:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_szero>

00000c84 <__mulsf3x>:
     c84:	0e 94 01 06 	call	0xc02	; 0xc02 <__fp_split3>
     c88:	70 f3       	brcs	.-36     	; 0xc66 <__mulsf3+0x8>

00000c8a <__mulsf3_pse>:
     c8a:	95 9f       	mul	r25, r21
     c8c:	c1 f3       	breq	.-16     	; 0xc7e <__mulsf3+0x20>
     c8e:	95 0f       	add	r25, r21
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	55 1f       	adc	r21, r21
     c94:	62 9f       	mul	r22, r18
     c96:	f0 01       	movw	r30, r0
     c98:	72 9f       	mul	r23, r18
     c9a:	bb 27       	eor	r27, r27
     c9c:	f0 0d       	add	r31, r0
     c9e:	b1 1d       	adc	r27, r1
     ca0:	63 9f       	mul	r22, r19
     ca2:	aa 27       	eor	r26, r26
     ca4:	f0 0d       	add	r31, r0
     ca6:	b1 1d       	adc	r27, r1
     ca8:	aa 1f       	adc	r26, r26
     caa:	64 9f       	mul	r22, r20
     cac:	66 27       	eor	r22, r22
     cae:	b0 0d       	add	r27, r0
     cb0:	a1 1d       	adc	r26, r1
     cb2:	66 1f       	adc	r22, r22
     cb4:	82 9f       	mul	r24, r18
     cb6:	22 27       	eor	r18, r18
     cb8:	b0 0d       	add	r27, r0
     cba:	a1 1d       	adc	r26, r1
     cbc:	62 1f       	adc	r22, r18
     cbe:	73 9f       	mul	r23, r19
     cc0:	b0 0d       	add	r27, r0
     cc2:	a1 1d       	adc	r26, r1
     cc4:	62 1f       	adc	r22, r18
     cc6:	83 9f       	mul	r24, r19
     cc8:	a0 0d       	add	r26, r0
     cca:	61 1d       	adc	r22, r1
     ccc:	22 1f       	adc	r18, r18
     cce:	74 9f       	mul	r23, r20
     cd0:	33 27       	eor	r19, r19
     cd2:	a0 0d       	add	r26, r0
     cd4:	61 1d       	adc	r22, r1
     cd6:	23 1f       	adc	r18, r19
     cd8:	84 9f       	mul	r24, r20
     cda:	60 0d       	add	r22, r0
     cdc:	21 1d       	adc	r18, r1
     cde:	82 2f       	mov	r24, r18
     ce0:	76 2f       	mov	r23, r22
     ce2:	6a 2f       	mov	r22, r26
     ce4:	11 24       	eor	r1, r1
     ce6:	9f 57       	subi	r25, 0x7F	; 127
     ce8:	50 40       	sbci	r21, 0x00	; 0
     cea:	9a f0       	brmi	.+38     	; 0xd12 <__mulsf3_pse+0x88>
     cec:	f1 f0       	breq	.+60     	; 0xd2a <__mulsf3_pse+0xa0>
     cee:	88 23       	and	r24, r24
     cf0:	4a f0       	brmi	.+18     	; 0xd04 <__mulsf3_pse+0x7a>
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	bb 1f       	adc	r27, r27
     cf8:	66 1f       	adc	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	91 50       	subi	r25, 0x01	; 1
     d00:	50 40       	sbci	r21, 0x00	; 0
     d02:	a9 f7       	brne	.-22     	; 0xcee <__mulsf3_pse+0x64>
     d04:	9e 3f       	cpi	r25, 0xFE	; 254
     d06:	51 05       	cpc	r21, r1
     d08:	80 f0       	brcs	.+32     	; 0xd2a <__mulsf3_pse+0xa0>
     d0a:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_inf>
     d0e:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_szero>
     d12:	5f 3f       	cpi	r21, 0xFF	; 255
     d14:	e4 f3       	brlt	.-8      	; 0xd0e <__mulsf3_pse+0x84>
     d16:	98 3e       	cpi	r25, 0xE8	; 232
     d18:	d4 f3       	brlt	.-12     	; 0xd0e <__mulsf3_pse+0x84>
     d1a:	86 95       	lsr	r24
     d1c:	77 95       	ror	r23
     d1e:	67 95       	ror	r22
     d20:	b7 95       	ror	r27
     d22:	f7 95       	ror	r31
     d24:	e7 95       	ror	r30
     d26:	9f 5f       	subi	r25, 0xFF	; 255
     d28:	c1 f7       	brne	.-16     	; 0xd1a <__mulsf3_pse+0x90>
     d2a:	fe 2b       	or	r31, r30
     d2c:	88 0f       	add	r24, r24
     d2e:	91 1d       	adc	r25, r1
     d30:	96 95       	lsr	r25
     d32:	87 95       	ror	r24
     d34:	97 f9       	bld	r25, 7
     d36:	08 95       	ret

00000d38 <fdevopen>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	31 f4       	brne	.+12     	; 0xd50 <fdevopen+0x18>
     d44:	61 15       	cp	r22, r1
     d46:	71 05       	cpc	r23, r1
     d48:	19 f4       	brne	.+6      	; 0xd50 <fdevopen+0x18>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	3a c0       	rjmp	.+116    	; 0xdc4 <fdevopen+0x8c>
     d50:	8b 01       	movw	r16, r22
     d52:	ec 01       	movw	r28, r24
     d54:	6e e0       	ldi	r22, 0x0E	; 14
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 e7 06 	call	0xdce	; 0xdce <calloc>
     d60:	fc 01       	movw	r30, r24
     d62:	89 2b       	or	r24, r25
     d64:	91 f3       	breq	.-28     	; 0xd4a <fdevopen+0x12>
     d66:	80 e8       	ldi	r24, 0x80	; 128
     d68:	83 83       	std	Z+3, r24	; 0x03
     d6a:	01 15       	cp	r16, r1
     d6c:	11 05       	cpc	r17, r1
     d6e:	71 f0       	breq	.+28     	; 0xd8c <fdevopen+0x54>
     d70:	02 87       	std	Z+10, r16	; 0x0a
     d72:	13 87       	std	Z+11, r17	; 0x0b
     d74:	81 e8       	ldi	r24, 0x81	; 129
     d76:	83 83       	std	Z+3, r24	; 0x03
     d78:	80 91 44 20 	lds	r24, 0x2044	; 0x802044 <__iob>
     d7c:	90 91 45 20 	lds	r25, 0x2045	; 0x802045 <__iob+0x1>
     d80:	89 2b       	or	r24, r25
     d82:	21 f4       	brne	.+8      	; 0xd8c <fdevopen+0x54>
     d84:	e0 93 44 20 	sts	0x2044, r30	; 0x802044 <__iob>
     d88:	f0 93 45 20 	sts	0x2045, r31	; 0x802045 <__iob+0x1>
     d8c:	20 97       	sbiw	r28, 0x00	; 0
     d8e:	c9 f0       	breq	.+50     	; 0xdc2 <fdevopen+0x8a>
     d90:	c0 87       	std	Z+8, r28	; 0x08
     d92:	d1 87       	std	Z+9, r29	; 0x09
     d94:	83 81       	ldd	r24, Z+3	; 0x03
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	83 83       	std	Z+3, r24	; 0x03
     d9a:	80 91 46 20 	lds	r24, 0x2046	; 0x802046 <__iob+0x2>
     d9e:	90 91 47 20 	lds	r25, 0x2047	; 0x802047 <__iob+0x3>
     da2:	89 2b       	or	r24, r25
     da4:	71 f4       	brne	.+28     	; 0xdc2 <fdevopen+0x8a>
     da6:	e0 93 46 20 	sts	0x2046, r30	; 0x802046 <__iob+0x2>
     daa:	f0 93 47 20 	sts	0x2047, r31	; 0x802047 <__iob+0x3>
     dae:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <__iob+0x4>
     db2:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <__iob+0x5>
     db6:	89 2b       	or	r24, r25
     db8:	21 f4       	brne	.+8      	; 0xdc2 <fdevopen+0x8a>
     dba:	e0 93 48 20 	sts	0x2048, r30	; 0x802048 <__iob+0x4>
     dbe:	f0 93 49 20 	sts	0x2049, r31	; 0x802049 <__iob+0x5>
     dc2:	cf 01       	movw	r24, r30
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <calloc>:
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	86 9f       	mul	r24, r22
     dd8:	80 01       	movw	r16, r0
     dda:	87 9f       	mul	r24, r23
     ddc:	10 0d       	add	r17, r0
     dde:	96 9f       	mul	r25, r22
     de0:	10 0d       	add	r17, r0
     de2:	11 24       	eor	r1, r1
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 03 07 	call	0xe06	; 0xe06 <malloc>
     dea:	ec 01       	movw	r28, r24
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	29 f0       	breq	.+10     	; 0xdfa <calloc+0x2c>
     df0:	a8 01       	movw	r20, r16
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	0e 94 24 08 	call	0x1048	; 0x1048 <memset>
     dfa:	ce 01       	movw	r24, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <malloc>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	91 05       	cpc	r25, r1
     e12:	10 f4       	brcc	.+4      	; 0xe18 <malloc+0x12>
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <__flp>
     e1c:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <__flp+0x1>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	30 97       	sbiw	r30, 0x00	; 0
     e2a:	19 f1       	breq	.+70     	; 0xe72 <malloc+0x6c>
     e2c:	40 81       	ld	r20, Z
     e2e:	51 81       	ldd	r21, Z+1	; 0x01
     e30:	02 81       	ldd	r16, Z+2	; 0x02
     e32:	13 81       	ldd	r17, Z+3	; 0x03
     e34:	48 17       	cp	r20, r24
     e36:	59 07       	cpc	r21, r25
     e38:	c8 f0       	brcs	.+50     	; 0xe6c <malloc+0x66>
     e3a:	84 17       	cp	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	69 f4       	brne	.+26     	; 0xe5a <malloc+0x54>
     e40:	10 97       	sbiw	r26, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <malloc+0x4a>
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	0c 93       	st	X, r16
     e48:	12 97       	sbiw	r26, 0x02	; 2
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	1c 93       	st	X, r17
     e4e:	27 c0       	rjmp	.+78     	; 0xe9e <malloc+0x98>
     e50:	00 93 4c 20 	sts	0x204C, r16	; 0x80204c <__flp>
     e54:	10 93 4d 20 	sts	0x204D, r17	; 0x80204d <__flp+0x1>
     e58:	22 c0       	rjmp	.+68     	; 0xe9e <malloc+0x98>
     e5a:	21 15       	cp	r18, r1
     e5c:	31 05       	cpc	r19, r1
     e5e:	19 f0       	breq	.+6      	; 0xe66 <malloc+0x60>
     e60:	42 17       	cp	r20, r18
     e62:	53 07       	cpc	r21, r19
     e64:	18 f4       	brcc	.+6      	; 0xe6c <malloc+0x66>
     e66:	9a 01       	movw	r18, r20
     e68:	bd 01       	movw	r22, r26
     e6a:	ef 01       	movw	r28, r30
     e6c:	df 01       	movw	r26, r30
     e6e:	f8 01       	movw	r30, r16
     e70:	db cf       	rjmp	.-74     	; 0xe28 <malloc+0x22>
     e72:	21 15       	cp	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	f9 f0       	breq	.+62     	; 0xeb6 <malloc+0xb0>
     e78:	28 1b       	sub	r18, r24
     e7a:	39 0b       	sbc	r19, r25
     e7c:	24 30       	cpi	r18, 0x04	; 4
     e7e:	31 05       	cpc	r19, r1
     e80:	80 f4       	brcc	.+32     	; 0xea2 <malloc+0x9c>
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	9b 81       	ldd	r25, Y+3	; 0x03
     e86:	61 15       	cp	r22, r1
     e88:	71 05       	cpc	r23, r1
     e8a:	21 f0       	breq	.+8      	; 0xe94 <malloc+0x8e>
     e8c:	fb 01       	movw	r30, r22
     e8e:	82 83       	std	Z+2, r24	; 0x02
     e90:	93 83       	std	Z+3, r25	; 0x03
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <malloc+0x96>
     e94:	80 93 4c 20 	sts	0x204C, r24	; 0x80204c <__flp>
     e98:	90 93 4d 20 	sts	0x204D, r25	; 0x80204d <__flp+0x1>
     e9c:	fe 01       	movw	r30, r28
     e9e:	32 96       	adiw	r30, 0x02	; 2
     ea0:	44 c0       	rjmp	.+136    	; 0xf2a <malloc+0x124>
     ea2:	fe 01       	movw	r30, r28
     ea4:	e2 0f       	add	r30, r18
     ea6:	f3 1f       	adc	r31, r19
     ea8:	81 93       	st	Z+, r24
     eaa:	91 93       	st	Z+, r25
     eac:	22 50       	subi	r18, 0x02	; 2
     eae:	31 09       	sbc	r19, r1
     eb0:	28 83       	st	Y, r18
     eb2:	39 83       	std	Y+1, r19	; 0x01
     eb4:	3a c0       	rjmp	.+116    	; 0xf2a <malloc+0x124>
     eb6:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
     eba:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
     ebe:	23 2b       	or	r18, r19
     ec0:	41 f4       	brne	.+16     	; 0xed2 <malloc+0xcc>
     ec2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     ec6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     eca:	20 93 4a 20 	sts	0x204A, r18	; 0x80204a <__brkval>
     ece:	30 93 4b 20 	sts	0x204B, r19	; 0x80204b <__brkval+0x1>
     ed2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     ed6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     eda:	21 15       	cp	r18, r1
     edc:	31 05       	cpc	r19, r1
     ede:	41 f4       	brne	.+16     	; 0xef0 <malloc+0xea>
     ee0:	2d b7       	in	r18, 0x3d	; 61
     ee2:	3e b7       	in	r19, 0x3e	; 62
     ee4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     ee8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     eec:	24 1b       	sub	r18, r20
     eee:	35 0b       	sbc	r19, r21
     ef0:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <__brkval>
     ef4:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <__brkval+0x1>
     ef8:	e2 17       	cp	r30, r18
     efa:	f3 07       	cpc	r31, r19
     efc:	a0 f4       	brcc	.+40     	; 0xf26 <malloc+0x120>
     efe:	2e 1b       	sub	r18, r30
     f00:	3f 0b       	sbc	r19, r31
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	78 f0       	brcs	.+30     	; 0xf26 <malloc+0x120>
     f08:	ac 01       	movw	r20, r24
     f0a:	4e 5f       	subi	r20, 0xFE	; 254
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	24 17       	cp	r18, r20
     f10:	35 07       	cpc	r19, r21
     f12:	48 f0       	brcs	.+18     	; 0xf26 <malloc+0x120>
     f14:	4e 0f       	add	r20, r30
     f16:	5f 1f       	adc	r21, r31
     f18:	40 93 4a 20 	sts	0x204A, r20	; 0x80204a <__brkval>
     f1c:	50 93 4b 20 	sts	0x204B, r21	; 0x80204b <__brkval+0x1>
     f20:	81 93       	st	Z+, r24
     f22:	91 93       	st	Z+, r25
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <malloc+0x124>
     f26:	e0 e0       	ldi	r30, 0x00	; 0
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	cf 01       	movw	r24, r30
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <free>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <free+0xa>
     f3e:	81 c0       	rjmp	.+258    	; 0x1042 <free+0x10c>
     f40:	fc 01       	movw	r30, r24
     f42:	32 97       	sbiw	r30, 0x02	; 2
     f44:	12 82       	std	Z+2, r1	; 0x02
     f46:	13 82       	std	Z+3, r1	; 0x03
     f48:	a0 91 4c 20 	lds	r26, 0x204C	; 0x80204c <__flp>
     f4c:	b0 91 4d 20 	lds	r27, 0x204D	; 0x80204d <__flp+0x1>
     f50:	10 97       	sbiw	r26, 0x00	; 0
     f52:	81 f4       	brne	.+32     	; 0xf74 <free+0x3e>
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
     f60:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
     f64:	28 17       	cp	r18, r24
     f66:	39 07       	cpc	r19, r25
     f68:	51 f5       	brne	.+84     	; 0xfbe <free+0x88>
     f6a:	e0 93 4a 20 	sts	0x204A, r30	; 0x80204a <__brkval>
     f6e:	f0 93 4b 20 	sts	0x204B, r31	; 0x80204b <__brkval+0x1>
     f72:	67 c0       	rjmp	.+206    	; 0x1042 <free+0x10c>
     f74:	ed 01       	movw	r28, r26
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	ce 17       	cp	r28, r30
     f7c:	df 07       	cpc	r29, r31
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <free+0x5a>
     f80:	4a 81       	ldd	r20, Y+2	; 0x02
     f82:	5b 81       	ldd	r21, Y+3	; 0x03
     f84:	9e 01       	movw	r18, r28
     f86:	41 15       	cp	r20, r1
     f88:	51 05       	cpc	r21, r1
     f8a:	f1 f0       	breq	.+60     	; 0xfc8 <free+0x92>
     f8c:	ea 01       	movw	r28, r20
     f8e:	f5 cf       	rjmp	.-22     	; 0xf7a <free+0x44>
     f90:	c2 83       	std	Z+2, r28	; 0x02
     f92:	d3 83       	std	Z+3, r29	; 0x03
     f94:	40 81       	ld	r20, Z
     f96:	51 81       	ldd	r21, Z+1	; 0x01
     f98:	84 0f       	add	r24, r20
     f9a:	95 1f       	adc	r25, r21
     f9c:	c8 17       	cp	r28, r24
     f9e:	d9 07       	cpc	r29, r25
     fa0:	59 f4       	brne	.+22     	; 0xfb8 <free+0x82>
     fa2:	88 81       	ld	r24, Y
     fa4:	99 81       	ldd	r25, Y+1	; 0x01
     fa6:	84 0f       	add	r24, r20
     fa8:	95 1f       	adc	r25, r21
     faa:	02 96       	adiw	r24, 0x02	; 2
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	82 83       	std	Z+2, r24	; 0x02
     fb6:	93 83       	std	Z+3, r25	; 0x03
     fb8:	21 15       	cp	r18, r1
     fba:	31 05       	cpc	r19, r1
     fbc:	29 f4       	brne	.+10     	; 0xfc8 <free+0x92>
     fbe:	e0 93 4c 20 	sts	0x204C, r30	; 0x80204c <__flp>
     fc2:	f0 93 4d 20 	sts	0x204D, r31	; 0x80204d <__flp+0x1>
     fc6:	3d c0       	rjmp	.+122    	; 0x1042 <free+0x10c>
     fc8:	e9 01       	movw	r28, r18
     fca:	ea 83       	std	Y+2, r30	; 0x02
     fcc:	fb 83       	std	Y+3, r31	; 0x03
     fce:	49 91       	ld	r20, Y+
     fd0:	59 91       	ld	r21, Y+
     fd2:	c4 0f       	add	r28, r20
     fd4:	d5 1f       	adc	r29, r21
     fd6:	ec 17       	cp	r30, r28
     fd8:	fd 07       	cpc	r31, r29
     fda:	61 f4       	brne	.+24     	; 0xff4 <free+0xbe>
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	84 0f       	add	r24, r20
     fe2:	95 1f       	adc	r25, r21
     fe4:	02 96       	adiw	r24, 0x02	; 2
     fe6:	e9 01       	movw	r28, r18
     fe8:	88 83       	st	Y, r24
     fea:	99 83       	std	Y+1, r25	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	9b 83       	std	Y+3, r25	; 0x03
     ff4:	e0 e0       	ldi	r30, 0x00	; 0
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	8d 91       	ld	r24, X+
     ffc:	9c 91       	ld	r25, X
     ffe:	13 97       	sbiw	r26, 0x03	; 3
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	19 f0       	breq	.+6      	; 0x100a <free+0xd4>
    1004:	fd 01       	movw	r30, r26
    1006:	dc 01       	movw	r26, r24
    1008:	f7 cf       	rjmp	.-18     	; 0xff8 <free+0xc2>
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	9d 01       	movw	r18, r26
    1012:	2e 5f       	subi	r18, 0xFE	; 254
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	20 91 4a 20 	lds	r18, 0x204A	; 0x80204a <__brkval>
    101e:	30 91 4b 20 	lds	r19, 0x204B	; 0x80204b <__brkval+0x1>
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	69 f4       	brne	.+26     	; 0x1042 <free+0x10c>
    1028:	30 97       	sbiw	r30, 0x00	; 0
    102a:	29 f4       	brne	.+10     	; 0x1036 <free+0x100>
    102c:	10 92 4c 20 	sts	0x204C, r1	; 0x80204c <__flp>
    1030:	10 92 4d 20 	sts	0x204D, r1	; 0x80204d <__flp+0x1>
    1034:	02 c0       	rjmp	.+4      	; 0x103a <free+0x104>
    1036:	12 82       	std	Z+2, r1	; 0x02
    1038:	13 82       	std	Z+3, r1	; 0x03
    103a:	a0 93 4a 20 	sts	0x204A, r26	; 0x80204a <__brkval>
    103e:	b0 93 4b 20 	sts	0x204B, r27	; 0x80204b <__brkval+0x1>
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <memset>:
    1048:	dc 01       	movw	r26, r24
    104a:	01 c0       	rjmp	.+2      	; 0x104e <memset+0x6>
    104c:	6d 93       	st	X+, r22
    104e:	41 50       	subi	r20, 0x01	; 1
    1050:	50 40       	sbci	r21, 0x00	; 0
    1052:	e0 f7       	brcc	.-8      	; 0x104c <memset+0x4>
    1054:	08 95       	ret

00001056 <_exit>:
    1056:	f8 94       	cli

00001058 <__stop_program>:
    1058:	ff cf       	rjmp	.-2      	; 0x1058 <__stop_program>
