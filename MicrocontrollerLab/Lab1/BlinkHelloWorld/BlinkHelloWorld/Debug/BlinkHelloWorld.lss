
BlinkHelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000719  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000677  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	1b d0       	rcall	.+54     	; 0x78 <main>
  42:	29 c0       	rjmp	.+82     	; 0x96 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <ioinit>:
	return(0);
}
void ioinit (void)
{
	//1 = output, 0 = input
	DDRB = 0b11111111; //All outputs
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111; //All outputs
  4a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111110; //PORTD (RX on PD0)
  4c:	8e ef       	ldi	r24, 0xFE	; 254
  4e:	8a b9       	out	0x0a, r24	; 10
  50:	08 95       	ret

00000052 <delay_ms>:
}
//General short delays
void delay_ms(uint16_t x)
{
  52:	ac 01       	movw	r20, r24
	uint8_t y, z;
	for ( ; x > 0 ; x--){
  54:	0d c0       	rjmp	.+26     	; 0x70 <delay_ms+0x1e>
		for ( y = 0 ; y < 60 ; y++){
			for ( z = 0 ; z < 1 ; z++){
				asm volatile ("nop");
  56:	00 00       	nop
void delay_ms(uint16_t x)
{
	uint8_t y, z;
	for ( ; x > 0 ; x--){
		for ( y = 0 ; y < 60 ; y++){
			for ( z = 0 ; z < 1 ; z++){
  58:	9f 5f       	subi	r25, 0xFF	; 255
  5a:	01 c0       	rjmp	.+2      	; 0x5e <delay_ms+0xc>
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	99 23       	and	r25, r25
  60:	d1 f3       	breq	.-12     	; 0x56 <delay_ms+0x4>
//General short delays
void delay_ms(uint16_t x)
{
	uint8_t y, z;
	for ( ; x > 0 ; x--){
		for ( y = 0 ; y < 60 ; y++){
  62:	2f 5f       	subi	r18, 0xFF	; 255
  64:	01 c0       	rjmp	.+2      	; 0x68 <delay_ms+0x16>
  66:	20 e0       	ldi	r18, 0x00	; 0
  68:	2c 33       	cpi	r18, 0x3C	; 60
  6a:	c0 f3       	brcs	.-16     	; 0x5c <delay_ms+0xa>
}
//General short delays
void delay_ms(uint16_t x)
{
	uint8_t y, z;
	for ( ; x > 0 ; x--){
  6c:	41 50       	subi	r20, 0x01	; 1
  6e:	51 09       	sbc	r21, r1
  70:	41 15       	cp	r20, r1
  72:	51 05       	cpc	r21, r1
  74:	c1 f7       	brne	.-16     	; 0x66 <delay_ms+0x14>
			for ( z = 0 ; z < 1 ; z++){
				asm volatile ("nop");
			}
		}
	}
  76:	08 95       	ret

00000078 <main>:
void ioinit(void); //Initializes IO
void delay_ms(uint16_t x); //General purpose delay
//======================
int main (void)
{
	ioinit(); //Setup IO pins and defaults
  78:	e6 df       	rcall	.-52     	; 0x46 <ioinit>
	while(1)
	{
		PORTC = 0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	88 b9       	out	0x08, r24	; 8
		PORTB = 0xFF;
  7e:	85 b9       	out	0x05, r24	; 5
		PORTD = 0xFF;
  80:	8b b9       	out	0x0b, r24	; 11
		delay_ms(500);
  82:	84 ef       	ldi	r24, 0xF4	; 244
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	e5 df       	rcall	.-54     	; 0x52 <delay_ms>
		PORTC = 0x00;
  88:	18 b8       	out	0x08, r1	; 8
		PORTB = 0x00;
  8a:	15 b8       	out	0x05, r1	; 5
		PORTD = 0x00;
  8c:	1b b8       	out	0x0b, r1	; 11
		delay_ms(500);
  8e:	84 ef       	ldi	r24, 0xF4	; 244
  90:	91 e0       	ldi	r25, 0x01	; 1
  92:	df df       	rcall	.-66     	; 0x52 <delay_ms>
  94:	f2 cf       	rjmp	.-28     	; 0x7a <main+0x2>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
